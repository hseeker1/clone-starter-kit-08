{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n/**\r\n * Representing an AccountKeyFail.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass AccountKeyFail {\n  /**\r\n   * Decodes an RLP-encoded AccountKeyFail string.\r\n   *\r\n   * @example\r\n   * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\r\n   *\r\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\r\n   * @return {AccountKeyFail}\r\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`);\n    return new AccountKeyFail();\n  }\n  /**\r\n   * Returns an RLP-encoded AccountKeyFail string.\r\n   *\r\n   * @example\r\n   * const encoding = accountKeyFail.getRLPEncoding()\r\n   *\r\n   * @return {string}\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  getRLPEncoding() {\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG;\n  }\n\n}\n\nmodule.exports = AccountKeyFail;","map":{"version":3,"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyFail","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_FAIL_TAG","Error","getRLPEncoding","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyFail.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\n\r\n/**\r\n * Representing an AccountKeyFail.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyFail {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\r\n     * @return {AccountKeyFail}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG))\r\n            throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`)\r\n\r\n        return new AccountKeyFail()\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyFail.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getRLPEncoding() {\r\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyFail\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAsBD,OAAO,CAAC,oBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAN,CAAqB;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACiB,OAANC,MAAM,CAACC,aAAD,EAAgB;IACzBA,aAAa,GAAGL,KAAK,CAACM,YAAN,CAAmBD,aAAnB,CAAhB;IACA,IAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACM,oBAAzC,CAAL,EACI,MAAM,IAAIC,KAAJ,CAAW,uDAAsDP,eAAe,CAACM,oBAAqB,KAAIH,aAAc,EAAxH,CAAN;IAEJ,OAAO,IAAIF,cAAJ,EAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;;EACAO,cAAc,GAAG;IACb,OAAOR,eAAe,CAACM,oBAAvB;EACH;;AA7BgB;;AAgCrBG,MAAM,CAACC,OAAP,GAAiBT,cAAjB"},"metadata":{},"sourceType":"script"}