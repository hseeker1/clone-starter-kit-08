{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG,\n    CODE_FORMAT = _require.CODE_FORMAT,\n    getCodeFormatTag = _require.getCodeFormatTag,\n    isNot = _require.isNot;\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy)) throw new Error(\"Cannot decode to SmartContractDeploy. The prefix must be \".concat(TX_TYPE_TAG.TxTypeSmartContractDeploy, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 10),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      to = _RLP$decode2[3],\n      value = _RLP$decode2[4],\n      from = _RLP$decode2[5],\n      input = _RLP$decode2[6],\n      humanReadable = _RLP$decode2[7],\n      codeFormat = _RLP$decode2[8],\n      signatures = _RLP$decode2[9];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to: to,\n    value: utils.trimLeadingZero(value),\n    from: from,\n    input: input,\n    humanReadable: humanReadable === '0x1',\n    codeFormat: getCodeFormatTag(codeFormat),\n    signatures: signatures\n  };\n}\n/**\r\n * Represents a smart contract deploy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy|SmartContractDeploy} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\n\n\nvar SmartContractDeploy = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(SmartContractDeploy, _AbstractTransaction);\n\n  var _super = _createSuper(SmartContractDeploy);\n\n  /**\r\n   * Creates a smart contract deploy transaction.\r\n   * @constructor\r\n   * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n   *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n   *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   */\n  function SmartContractDeploy(createTxObj, klaytnCall) {\n    var _this;\n\n    _classCallCheck(this, SmartContractDeploy);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj, klaytnCall);\n    _this.to = createTxObj.to || '0x';\n    _this.value = createTxObj.value || '0x0';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data;\n    _this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false;\n    _this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM;\n    if (createTxObj.gasPrice !== undefined) _this.gasPrice = createTxObj.gasPrice;\n    return _this;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(SmartContractDeploy, [{\n    key: \"gasPrice\",\n    get: function get() {\n      return this._gasPrice;\n    },\n    set: function set(g) {\n      this._gasPrice = utils.numberToHex(g);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this._to;\n    },\n    set: function set(address) {\n      if (address !== '0x') throw new Error(\"Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.\");\n      this._to = address.toLowerCase();\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = utils.numberToHex(val);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(data) {\n      this._input = data;\n    }\n    /**\r\n     * @type {boolean}\r\n     */\n\n  }, {\n    key: \"humanReadable\",\n    get: function get() {\n      return this._humanReadable;\n    },\n    set: function set(hr) {\n      if (!_.isBoolean(hr)) throw new Error(\"Invalid humanReadable \".concat(hr));\n      this._humanReadable = hr;\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"codeFormat\",\n    get: function get() {\n      return this._codeFormat;\n    },\n    set: function set(cf) {\n      this._codeFormat = getCodeFormatTag(cf);\n    }\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeSmartContractDeploy + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat), signatures]).slice(2);\n    }\n    /**\r\n     * Returns the RLP-encoded string to make the signature of this transaction.\r\n     * This method has to be overrided in classes which extends AbstractTransaction.\r\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n     *\r\n     * @example\r\n     * const result = tx.getCommonRLPEncodingForSignature()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string without signature.\r\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeSmartContractDeploy, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat)]);\n    }\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\n\n  }, {\n    key: \"fillTransaction\",\n    value: function () {\n      var _fillTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$Promise$all, _yield$Promise$all2, chainId, gasPrice, nonce;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n\n              case 2:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n                chainId = _yield$Promise$all2[0];\n                gasPrice = _yield$Promise$all2[1];\n                nonce = _yield$Promise$all2[2];\n                this.chainId = chainId;\n                this.gasPrice = gasPrice;\n                this.nonce = nonce;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fillTransaction() {\n        return _fillTransaction.apply(this, arguments);\n      }\n\n      return fillTransaction;\n    }()\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"validateOptionalValues\",\n    value: function validateOptionalValues() {\n      _get(_getPrototypeOf(SmartContractDeploy.prototype), \"validateOptionalValues\", this).call(this);\n\n      if (this.gasPrice === undefined) throw new Error(\"gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.\");\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\r\n     * Creates a smart contract deploy transaction.\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\n    function create(createTxObj, klaytnCall) {\n      return new SmartContractDeploy(createTxObj, klaytnCall);\n    }\n    /**\r\n     * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(rlpEncoded, klaytnCall) {\n      return new SmartContractDeploy(_decode(rlpEncoded), klaytnCall);\n    }\n  }]);\n\n  return SmartContractDeploy;\n}(AbstractTransaction);\n\nmodule.exports = SmartContractDeploy;","map":{"version":3,"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","CODE_FORMAT","getCodeFormatTag","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeSmartContractDeploy","Error","typeDettached","slice","decode","nonce","gasPrice","gas","to","value","from","input","humanReadable","codeFormat","signatures","trimLeadingZero","SmartContractDeploy","createTxObj","klaytnCall","isString","data","undefined","EVM","_gasPrice","g","numberToHex","_to","address","toLowerCase","_value","val","_input","isHex","_humanReadable","hr","isBoolean","_codeFormat","cf","validateOptionalValues","map","sig","encode","fromNat","Promise","all","chainId","getChainId","suggestGasPrice","getNonce","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/smartContractDeploy/smartContractDeploy.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst AbstractTransaction = require('../abstractTransaction')\r\nconst { TX_TYPE_STRING, TX_TYPE_TAG, CODE_FORMAT, getCodeFormatTag, isNot } = require('../../transactionHelper/transactionHelper')\r\nconst utils = require('../../../../caver-utils/src')\r\n\r\nfunction _decode(rlpEncoded) {\r\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\r\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy))\r\n        throw new Error(`Cannot decode to SmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeSmartContractDeploy}: ${rlpEncoded}`)\r\n\r\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\r\n    const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures] = RLP.decode(typeDettached)\r\n\r\n    return {\r\n        nonce: utils.trimLeadingZero(nonce),\r\n        gasPrice: utils.trimLeadingZero(gasPrice),\r\n        gas: utils.trimLeadingZero(gas),\r\n        to,\r\n        value: utils.trimLeadingZero(value),\r\n        from,\r\n        input,\r\n        humanReadable: humanReadable === '0x1',\r\n        codeFormat: getCodeFormatTag(codeFormat),\r\n        signatures,\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a smart contract deploy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy|SmartContractDeploy} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\r\nclass SmartContractDeploy extends AbstractTransaction {\r\n    /**\r\n     * Creates a smart contract deploy transaction.\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\r\n    static create(createTxObj, klaytnCall) {\r\n        return new SmartContractDeploy(createTxObj, klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\r\n    static decode(rlpEncoded, klaytnCall) {\r\n        return new SmartContractDeploy(_decode(rlpEncoded), klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * Creates a smart contract deploy transaction.\r\n     * @constructor\r\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     */\r\n    constructor(createTxObj, klaytnCall) {\r\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\r\n        super(TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj, klaytnCall)\r\n        this.to = createTxObj.to || '0x'\r\n        this.value = createTxObj.value || '0x0'\r\n\r\n        if (createTxObj.input && createTxObj.data)\r\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\r\n\r\n        this.input = createTxObj.input || createTxObj.data\r\n\r\n        this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false\r\n        this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM\r\n\r\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get gasPrice() {\r\n        return this._gasPrice\r\n    }\r\n\r\n    set gasPrice(g) {\r\n        this._gasPrice = utils.numberToHex(g)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get to() {\r\n        return this._to\r\n    }\r\n\r\n    set to(address) {\r\n        if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`)\r\n        this._to = address.toLowerCase()\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n    set value(val) {\r\n        this._value = utils.numberToHex(val)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get input() {\r\n        return this._input\r\n    }\r\n\r\n    set input(input) {\r\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\r\n        this._input = utils.addHexPrefix(input)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get data() {\r\n        return this._input\r\n    }\r\n\r\n    set data(data) {\r\n        this._input = data\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    get humanReadable() {\r\n        return this._humanReadable\r\n    }\r\n\r\n    set humanReadable(hr) {\r\n        if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`)\r\n        this._humanReadable = hr\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get codeFormat() {\r\n        return this._codeFormat\r\n    }\r\n\r\n    set codeFormat(cf) {\r\n        this._codeFormat = getCodeFormatTag(cf)\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\r\n    getRLPEncoding() {\r\n        this.validateOptionalValues()\r\n        const signatures = this.signatures.map(sig => sig.encode())\r\n\r\n        return (\r\n            TX_TYPE_TAG.TxTypeSmartContractDeploy +\r\n            RLP.encode([\r\n                Bytes.fromNat(this.nonce),\r\n                Bytes.fromNat(this.gasPrice),\r\n                Bytes.fromNat(this.gas),\r\n                this.to.toLowerCase(),\r\n                Bytes.fromNat(this.value),\r\n                this.from.toLowerCase(),\r\n                this.input,\r\n                Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\r\n                Bytes.fromNat(this.codeFormat),\r\n                signatures,\r\n            ]).slice(2)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string to make the signature of this transaction.\r\n     * This method has to be overrided in classes which extends AbstractTransaction.\r\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n     *\r\n     * @example\r\n     * const result = tx.getCommonRLPEncodingForSignature()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string without signature.\r\n     */\r\n    getCommonRLPEncodingForSignature() {\r\n        this.validateOptionalValues()\r\n\r\n        return RLP.encode([\r\n            TX_TYPE_TAG.TxTypeSmartContractDeploy,\r\n            Bytes.fromNat(this.nonce),\r\n            Bytes.fromNat(this.gasPrice),\r\n            Bytes.fromNat(this.gas),\r\n            this.to.toLowerCase(),\r\n            Bytes.fromNat(this.value),\r\n            this.from.toLowerCase(),\r\n            this.input,\r\n            Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\r\n            Bytes.fromNat(this.codeFormat),\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\r\n    async fillTransaction() {\r\n        const [chainId, gasPrice, nonce] = await Promise.all([\r\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\r\n            isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice,\r\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\r\n        ])\r\n\r\n        this.chainId = chainId\r\n        this.gasPrice = gasPrice\r\n        this.nonce = nonce\r\n    }\r\n\r\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\r\n    validateOptionalValues() {\r\n        super.validateOptionalValues()\r\n        if (this.gasPrice === undefined)\r\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\r\n    }\r\n}\r\n\r\nmodule.exports = SmartContractDeploy\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}