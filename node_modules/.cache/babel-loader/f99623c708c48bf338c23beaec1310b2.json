{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar CID = require('cids');\n\nvar _require = require('../package.json'),\n    version = _require.version;\n\nvar blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n/**\r\n * Represents an immutable block of data that is uniquely referenced with a cid.\r\n *\r\n * @example\r\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\r\n */\n\nvar Block = /*#__PURE__*/function (_Symbol$toStringTag) {\n  /**\r\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\r\n   * @param {CID} cid - The cid of the data\r\n   */\n  function Block(data, cid) {\n    _classCallCheck(this, Block);\n\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n  /**\r\n   * The data of this block.\r\n   *\r\n   * @deprecated\r\n   * @type {Uint8Array}\r\n   */\n\n\n  _createClass(Block, [{\n    key: \"_data\",\n    get: function get() {\n      deprecateData();\n      return this.data;\n    }\n    /**\r\n     * The cid of the data this block represents.\r\n     *\r\n     * @deprecated\r\n     * @type {CID}\r\n     */\n\n  }, {\n    key: \"_cid\",\n    get: function get() {\n      deprecateCID();\n      return this.cid;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Block';\n    }\n  }, {\n    key: blockSymbol,\n    get: function get() {\n      return true;\n    }\n    /**\r\n     * Check if the given value is a Block.\r\n     *\r\n     * @param {any} other\r\n     * @returns {other is Block}\r\n     */\n\n  }], [{\n    key: \"isBlock\",\n    value: function isBlock(other) {\n      return Boolean(other && other[blockSymbol]);\n    }\n  }]);\n\n  return Block;\n}(Symbol.toStringTag);\n/**\r\n * @param {RegExp} range\r\n * @param {string} message\r\n * @returns {() => void}\r\n */\n\n\nvar deprecate = function deprecate(range, message) {\n  var warned = false;\n  return function () {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true; // eslint-disable-next-line no-console\n\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\n\nvar deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nvar deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":{"version":3,"names":["CID","require","version","blockSymbol","Symbol","for","readonly","writable","configurable","enumerable","Block","data","cid","Uint8Array","Error","isCID","Object","defineProperties","deprecateData","deprecateCID","other","Boolean","toStringTag","deprecate","range","message","warned","test","console","warn","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-block/src/index.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\n\r\nconst { version } = require('../package.json')\r\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block')\r\nconst readonly = { writable: false, configurable: false, enumerable: true }\r\n\r\n/**\r\n * Represents an immutable block of data that is uniquely referenced with a cid.\r\n *\r\n * @example\r\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\r\n */\r\nclass Block {\r\n  /**\r\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\r\n   * @param {CID} cid - The cid of the data\r\n   */\r\n  constructor (data, cid) {\r\n    if (!data || !(data instanceof Uint8Array)) {\r\n      throw new Error('first argument  must be a Uint8Array')\r\n    }\r\n\r\n    if (!cid || !CID.isCID(cid)) {\r\n      throw new Error('second argument must be a CID')\r\n    }\r\n\r\n    this.data = data\r\n    this.cid = cid\r\n\r\n    Object.defineProperties(this, {\r\n      data: readonly,\r\n      cid: readonly\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The data of this block.\r\n   *\r\n   * @deprecated\r\n   * @type {Uint8Array}\r\n   */\r\n  get _data () {\r\n    deprecateData()\r\n    return this.data\r\n  }\r\n\r\n  /**\r\n   * The cid of the data this block represents.\r\n   *\r\n   * @deprecated\r\n   * @type {CID}\r\n   */\r\n  get _cid () {\r\n    deprecateCID()\r\n    return this.cid\r\n  }\r\n\r\n  get [Symbol.toStringTag] () {\r\n    return 'Block'\r\n  }\r\n\r\n  get [blockSymbol] () {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Check if the given value is a Block.\r\n   *\r\n   * @param {any} other\r\n   * @returns {other is Block}\r\n   */\r\n  static isBlock (other) {\r\n    return Boolean(other && other[blockSymbol])\r\n  }\r\n}\r\n\r\n/**\r\n * @param {RegExp} range\r\n * @param {string} message\r\n * @returns {() => void}\r\n */\r\nconst deprecate = (range, message) => {\r\n  let warned = false\r\n  return () => {\r\n    if (range.test(version)) {\r\n      if (!warned) {\r\n        warned = true\r\n        // eslint-disable-next-line no-console\r\n        console.warn(message)\r\n      }\r\n    } else {\r\n      throw new Error(message)\r\n    }\r\n  }\r\n}\r\n\r\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead')\r\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead')\r\n\r\nmodule.exports = Block\r\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,eAAoBA,OAAO,CAAC,iBAAD,CAA3B;AAAA,IAAQC,OAAR,YAAQA,OAAR;;AACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,GAAP,CAAW,2BAAX,CAApB;AACA,IAAMC,QAAQ,GAAG;EAAEC,QAAQ,EAAE,KAAZ;EAAmBC,YAAY,EAAE,KAAjC;EAAwCC,UAAU,EAAE;AAApD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;EACJ;AACF;AACA;AACA;EACE,eAAaC,IAAb,EAAmBC,GAAnB,EAAwB;IAAA;;IACtB,IAAI,CAACD,IAAD,IAAS,EAAEA,IAAI,YAAYE,UAAlB,CAAb,EAA4C;MAC1C,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;IACD;;IAED,IAAI,CAACF,GAAD,IAAQ,CAACZ,GAAG,CAACe,KAAJ,CAAUH,GAAV,CAAb,EAA6B;MAC3B,MAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKC,GAAL,GAAWA,GAAX;IAEAI,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BN,IAAI,EAAEL,QADsB;MAE5BM,GAAG,EAAEN;IAFuB,CAA9B;EAID;EAED;AACF;AACA;AACA;AACA;AACA;;;;;SACE,eAAa;MACXY,aAAa;MACb,OAAO,KAAKP,IAAZ;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;SACE,eAAY;MACVQ,YAAY;MACZ,OAAO,KAAKP,GAAZ;IACD;;;SAED,eAA4B;MAC1B,OAAO,OAAP;IACD;;SAEIT,W;SAAL,eAAqB;MACnB,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,iBAAgBiB,KAAhB,EAAuB;MACrB,OAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACjB,WAAD,CAAf,CAAd;IACD;;;;EAhBIC,MAAM,CAACkB,W;AAmBd;AACA;AACA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,OAAR,EAAoB;EACpC,IAAIC,MAAM,GAAG,KAAb;EACA,OAAO,YAAM;IACX,IAAIF,KAAK,CAACG,IAAN,CAAWzB,OAAX,CAAJ,EAAyB;MACvB,IAAI,CAACwB,MAAL,EAAa;QACXA,MAAM,GAAG,IAAT,CADW,CAEX;;QACAE,OAAO,CAACC,IAAR,CAAaJ,OAAb;MACD;IACF,CAND,MAMO;MACL,MAAM,IAAIX,KAAJ,CAAUW,OAAV,CAAN;IACD;EACF,CAVD;AAWD,CAbD;;AAeA,IAAMN,YAAY,GAAGI,SAAS,CAAC,eAAD,EAAkB,4FAAlB,CAA9B;AACA,IAAML,aAAa,GAAGK,SAAS,CAAC,cAAD,EAAiB,8FAAjB,CAA/B;AAEAO,MAAM,CAACC,OAAP,GAAiBrB,KAAjB"},"metadata":{},"sourceType":"script"}