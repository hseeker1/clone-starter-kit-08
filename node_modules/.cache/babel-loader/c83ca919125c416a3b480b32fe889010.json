{"ast":null,"code":"/*\r\n    Copyright 2022 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src');\n/**\r\n * An object defines the access tuple.\r\n *\r\n * @typedef {object} module:Transaction.AccessTupleObject\r\n * @property {string} address - The address string.\r\n * @property {Array.<string>} storageKeys - An array of the storage keys.\r\n */\n\n/**\r\n * Represents an access tuple that has an address and storage keys.\r\n * AccessTuple is the element type of the access list.\r\n * @class\r\n */\n\n\nclass AccessTuple {\n  /**\r\n   * Creates an access tuple.\r\n   *\r\n   * @example\r\n   * const result = caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ])\r\n   *\r\n   * @param {string} address - The address string.\r\n   * @param {Array.<string>} storageKeys - An array of the storage keys.\r\n   * @return {AccessTuple} An access tuple.\r\n   */\n  static create(address, storageKeys) {\n    return new AccessTuple(address, storageKeys);\n  }\n  /**\r\n   * Creates an access tuple.\r\n   * @constructor\r\n   * @param {string} address - The address string.\r\n   * @param {Array.<string>} storageKeys - An array of the storage keys.\r\n   */\n\n\n  constructor(address, storageKeys) {\n    this.address = address;\n    this.storageKeys = storageKeys;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addr) {\n    if (!_.isString(addr)) throw new Error(`Invalid address type: Address should be string type ${typeof addr}`);\n    if (!utils.isAddress(addr)) throw new Error(`Invalid address: ${addr}`);\n    addr = utils.addHexPrefix(addr);\n    this._address = addr;\n  }\n  /**\r\n   * @type {Array.<string>}\r\n   */\n\n\n  get storageKeys() {\n    return this._storageKeys;\n  }\n\n  set storageKeys(keys) {\n    if (!_.isArray(keys)) keys = [keys];\n\n    for (let k of keys) {\n      if (!_.isString(k)) throw new Error(`Invalid storageKey type: Storage key should be string type ${typeof k}`);\n      if (!utils.isHex(k)) throw new Error(`Invalid storageKey: The storage key must be a hexadecimal string ${k}`);\n      k = utils.addHexPrefix(k);\n      if (k.length !== 66) throw new Error(`Invalid storageKey length: The storage key must be a 32-byte`);\n    }\n\n    keys.sort();\n    this._storageKeys = keys;\n  }\n  /**\r\n   * Returns an encoded access tuple.\r\n   *\r\n   * @example\r\n   * const result = accessTuple.encodeToBytes()\r\n   *\r\n   * @return {Array.<string|Array.<string>>} An encoded access tuple.\r\n   */\n\n\n  encodeToBytes() {\n    const storageItems = [];\n\n    for (const key of this.storageKeys) {\n      storageItems.push(key.toLowerCase());\n    }\n\n    return [this.address.toLowerCase(), storageItems];\n  }\n  /**\r\n   * Returns whether the AccessTuple object is the same as the accessTuple passed as a parameter.\r\n   *\r\n   * @example\r\n   * const result = accessTuple.isEqual(at)\r\n   *\r\n   * @return {boolean} Returns `true` is accessTuple has value with a param.\r\n   */\n\n\n  isEqual(at) {\n    if (this.storageKeys.length !== at.storageKeys.length) return false;\n    if (this.address.toLowerCase() !== at.address.toLowerCase()) return false;\n\n    for (let i = 0; i < this.storageKeys.length; i++) {\n      if (this.storageKeys[i].toLowerCase() !== at.storageKeys[i].toLowerCase()) return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Returns a JSON object without _ prefix variable name.\r\n   *\r\n   * @example\r\n   * const result = accessTuple.toObject()\r\n   *\r\n   * @return {module:Transaction.AccessTupleObject} An access tuple object.\r\n   */\n\n\n  toObject() {\n    const accessTupleObject = {\n      address: this.address,\n      storageKeys: []\n    };\n\n    for (const sk of this.storageKeys) {\n      accessTupleObject.storageKeys.push(sk);\n    }\n\n    return accessTupleObject;\n  }\n\n}\n\nmodule.exports = AccessTuple;","map":{"version":3,"names":["_","require","utils","AccessTuple","create","address","storageKeys","constructor","_address","addr","isString","Error","isAddress","addHexPrefix","_storageKeys","keys","isArray","k","isHex","length","sort","encodeToBytes","storageItems","key","push","toLowerCase","isEqual","at","i","toObject","accessTupleObject","sk","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-transaction/src/utils/accessTuple.js"],"sourcesContent":["/*\r\n    Copyright 2022 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../../caver-utils/src')\r\n\r\n/**\r\n * An object defines the access tuple.\r\n *\r\n * @typedef {object} module:Transaction.AccessTupleObject\r\n * @property {string} address - The address string.\r\n * @property {Array.<string>} storageKeys - An array of the storage keys.\r\n */\r\n/**\r\n * Represents an access tuple that has an address and storage keys.\r\n * AccessTuple is the element type of the access list.\r\n * @class\r\n */\r\nclass AccessTuple {\r\n    /**\r\n     * Creates an access tuple.\r\n     *\r\n     * @example\r\n     * const result = caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ])\r\n     *\r\n     * @param {string} address - The address string.\r\n     * @param {Array.<string>} storageKeys - An array of the storage keys.\r\n     * @return {AccessTuple} An access tuple.\r\n     */\r\n    static create(address, storageKeys) {\r\n        return new AccessTuple(address, storageKeys)\r\n    }\r\n\r\n    /**\r\n     * Creates an access tuple.\r\n     * @constructor\r\n     * @param {string} address - The address string.\r\n     * @param {Array.<string>} storageKeys - An array of the storage keys.\r\n     */\r\n    constructor(address, storageKeys) {\r\n        this.address = address\r\n        this.storageKeys = storageKeys\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get address() {\r\n        return this._address\r\n    }\r\n\r\n    set address(addr) {\r\n        if (!_.isString(addr)) throw new Error(`Invalid address type: Address should be string type ${typeof addr}`)\r\n        if (!utils.isAddress(addr)) throw new Error(`Invalid address: ${addr}`)\r\n        addr = utils.addHexPrefix(addr)\r\n        this._address = addr\r\n    }\r\n\r\n    /**\r\n     * @type {Array.<string>}\r\n     */\r\n    get storageKeys() {\r\n        return this._storageKeys\r\n    }\r\n\r\n    set storageKeys(keys) {\r\n        if (!_.isArray(keys)) keys = [keys]\r\n        for (let k of keys) {\r\n            if (!_.isString(k)) throw new Error(`Invalid storageKey type: Storage key should be string type ${typeof k}`)\r\n            if (!utils.isHex(k)) throw new Error(`Invalid storageKey: The storage key must be a hexadecimal string ${k}`)\r\n            k = utils.addHexPrefix(k)\r\n            if (k.length !== 66) throw new Error(`Invalid storageKey length: The storage key must be a 32-byte`)\r\n        }\r\n        keys.sort()\r\n        this._storageKeys = keys\r\n    }\r\n\r\n    /**\r\n     * Returns an encoded access tuple.\r\n     *\r\n     * @example\r\n     * const result = accessTuple.encodeToBytes()\r\n     *\r\n     * @return {Array.<string|Array.<string>>} An encoded access tuple.\r\n     */\r\n    encodeToBytes() {\r\n        const storageItems = []\r\n        for (const key of this.storageKeys) {\r\n            storageItems.push(key.toLowerCase())\r\n        }\r\n        return [this.address.toLowerCase(), storageItems]\r\n    }\r\n\r\n    /**\r\n     * Returns whether the AccessTuple object is the same as the accessTuple passed as a parameter.\r\n     *\r\n     * @example\r\n     * const result = accessTuple.isEqual(at)\r\n     *\r\n     * @return {boolean} Returns `true` is accessTuple has value with a param.\r\n     */\r\n    isEqual(at) {\r\n        if (this.storageKeys.length !== at.storageKeys.length) return false\r\n        if (this.address.toLowerCase() !== at.address.toLowerCase()) return false\r\n\r\n        for (let i = 0; i < this.storageKeys.length; i++) {\r\n            if (this.storageKeys[i].toLowerCase() !== at.storageKeys[i].toLowerCase()) return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Returns a JSON object without _ prefix variable name.\r\n     *\r\n     * @example\r\n     * const result = accessTuple.toObject()\r\n     *\r\n     * @return {module:Transaction.AccessTupleObject} An access tuple object.\r\n     */\r\n    toObject() {\r\n        const accessTupleObject = { address: this.address, storageKeys: [] }\r\n        for (const sk of this.storageKeys) {\r\n            accessTupleObject.storageKeys.push(sk)\r\n        }\r\n        return accessTupleObject\r\n    }\r\n}\r\n\r\nmodule.exports = AccessTuple\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}