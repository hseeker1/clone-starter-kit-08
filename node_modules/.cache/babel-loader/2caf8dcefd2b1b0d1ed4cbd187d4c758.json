{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../../caver-contract');\n\nvar _require = require('./kctHelper'),\n    kip37JsonInterface = _require.kip37JsonInterface,\n    kip37ByteCode = _require.kip37ByteCode,\n    determineSendParams = _require.determineSendParams,\n    formatParamForUint256 = _require.formatParamForUint256,\n    validateDeployParameterForKIP37 = _require.validateDeployParameterForKIP37,\n    interfaceIds = _require.interfaceIds;\n\nvar _require2 = require('../../caver-utils'),\n    isAddress = _require2.isAddress,\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex,\n    stripHexPrefix = _require2.stripHexPrefix,\n    leftPad = _require2.leftPad;\n\nvar KIP13 = require('./kip13');\n/**\r\n * The KIP37 class that helps you easily handle a smart contract that implements KIP-37 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\r\n * @hideconstructor\r\n * @class\r\n */\n\n\nvar KIP37 = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(KIP37, _Contract);\n\n  var _super = _createSuper(KIP37);\n\n  function KIP37(tokenAddress) {\n    var _this;\n\n    var abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip37JsonInterface;\n\n    _classCallCheck(this, KIP37);\n\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    _this = _super.call(this, abi, tokenAddress);\n\n    _this.setWallet(KIP37.wallet);\n\n    return _this;\n  }\n  /**\r\n   * Clones the current KIP37 instance.\r\n   *\r\n   * @example\r\n   * const cloned = kip37.clone()\r\n   * const cloned = kip37.clone('0x{new kip7 address}')\r\n   *\r\n   * @param {string} [tokenAddress] The address of the token contract.\r\n   * @return {KIP37}\r\n   */\n\n\n  _createClass(KIP37, [{\n    key: \"clone\",\n    value: function clone() {\n      var tokenAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.address;\n      var cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n      cloned.setWallet(this._wallet);\n      return cloned;\n    }\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await kip37.detectInterface()\r\n     *\r\n     * @return {Promise<KIP37.KIP37DetectedObject>}\r\n     */\n\n  }, {\n    key: \"detectInterface\",\n    value: function () {\n      var _detectInterface = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n\n        var detected, notSupportedMsg, contractAddress, isSupported;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                detected = {\n                  IKIP37: false,\n                  IKIP37Metadata: false,\n                  IKIP37Mintable: false,\n                  IKIP37Burnable: false,\n                  IKIP37Pausable: false\n                };\n                notSupportedMsg = \"This contract does not support KIP-13.\";\n                contractAddress = this._address;\n                _context2.prev = 3;\n                _context2.next = 6;\n                return KIP13.isImplementedKIP13Interface(contractAddress);\n\n              case 6:\n                isSupported = _context2.sent;\n\n                if (!(isSupported !== true)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(notSupportedMsg);\n\n              case 9:\n                _context2.next = 11;\n                return this.supportsInterface(interfaceIds.kip37.IKIP37);\n\n              case 11:\n                detected.IKIP37 = _context2.sent;\n\n                if (!(detected.IKIP37 === false)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", detected);\n\n              case 14:\n                _context2.next = 16;\n                return Promise.all(Object.keys(interfaceIds.kip37).map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(interfaceName) {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(interfaceIds.kip37[interfaceName] !== interfaceIds.kip37.IKIP37)) {\n                              _context.next = 4;\n                              break;\n                            }\n\n                            _context.next = 3;\n                            return _this2.supportsInterface(interfaceIds.kip37[interfaceName]);\n\n                          case 3:\n                            detected[interfaceName] = _context.sent;\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 16:\n                return _context2.abrupt(\"return\", detected);\n\n              case 19:\n                _context2.prev = 19;\n                _context2.t0 = _context2[\"catch\"](3);\n                throw new Error(notSupportedMsg);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 19]]);\n      }));\n\n      function detectInterface() {\n        return _detectInterface.apply(this, arguments);\n      }\n\n      return detectInterface;\n    }()\n    /**\r\n     * Returns `true` if this contract implements the interface defined by `interfaceId`.\r\n     *\r\n     * @example\r\n     * const supported = await kip37.supportsInterface('0x6433ca1f')\r\n     *\r\n     * @param {string} interfaceId The interface id to check.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"supportsInterface\",\n    value: function () {\n      var _supportsInterface = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(interfaceId) {\n        var isSupported;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.methods.supportsInterface(interfaceId).call();\n\n              case 2:\n                isSupported = _context3.sent;\n                return _context3.abrupt(\"return\", isSupported);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function supportsInterface(_x2) {\n        return _supportsInterface.apply(this, arguments);\n      }\n\n      return supportsInterface;\n    }()\n    /**\r\n     * Returns distinct Uniform Resource Identifier (URI) of the given token.\r\n     * If the string {id} exists in any URI, this function will replace this with the actual token ID in hexadecimal form.\r\n     * Please refer to {@link http://kips.klaytn.com/KIPs/kip-37#metadata|KIP-34 Metadata}.\r\n     *\r\n     * @example\r\n     * const uri = await kip37.uri('0x0')\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to get uri.\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"uri\",\n    value: function () {\n      var _uri = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id) {\n        var uri, tokenIdInHex;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.methods.uri(formatParamForUint256(id)).call();\n\n              case 2:\n                uri = _context4.sent;\n\n                // Replace {id} to token id in hexadecimal form.\n                if (uri.includes('{id}')) {\n                  tokenIdInHex = stripHexPrefix(toHex(id));\n                  tokenIdInHex = leftPad(tokenIdInHex, 64, '0');\n                  uri = uri.replace('{id}', tokenIdInHex);\n                }\n\n                return _context4.abrupt(\"return\", uri);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function uri(_x3) {\n        return _uri.apply(this, arguments);\n      }\n\n      return uri;\n    }()\n    /**\r\n     * Returns the total token supply of the specific token.\r\n     *\r\n     * @example\r\n     * const totalSupply = await kip37.totalSupply(0)\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to see the total supply.\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"totalSupply\",\n    value: function () {\n      var _totalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(id) {\n        var totalSupply;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.methods.totalSupply(formatParamForUint256(id)).call();\n\n              case 2:\n                totalSupply = _context5.sent;\n                return _context5.abrupt(\"return\", new BigNumber(totalSupply));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function totalSupply(_x4) {\n        return _totalSupply.apply(this, arguments);\n      }\n\n      return totalSupply;\n    }()\n    /**\r\n     * Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * @example\r\n     * const balance = await kip37.balanceOf('0x{address in hex}', 0)\r\n     *\r\n     * @param {string} account The address of the account for which you want to see balance.\r\n     * @param {BigNumber|string|number} id The token id to see balance.\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(account, id) {\n        var balance;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.methods.balanceOf(account, formatParamForUint256(id)).call();\n\n              case 2:\n                balance = _context6.sent;\n                return _context6.abrupt(\"return\", new BigNumber(balance));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function balanceOf(_x5, _x6) {\n        return _balanceOf.apply(this, arguments);\n      }\n\n      return balanceOf;\n    }()\n    /**\r\n     * Returns the balance of multiple account/token pairs.\r\n     * `balanceOfBatch` is a batch operation of {@link balanceOf}, and the length of arrays with `accounts` and `ids` must be the same.\r\n     *\r\n     * @param {Array.<string>} accounts The address of the accounts for which you want to see balance.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of ids of token you want to see balance.\r\n     * @return {Promise<Array.<BigNumber>>}\r\n     */\n\n  }, {\n    key: \"balanceOfBatch\",\n    value: function () {\n      var _balanceOfBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(accounts, ids) {\n        var formattedTokenIds, i, balances, ret, _iterator, _step, bal;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(ids.length !== accounts.length)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error(\"ids and accounts must have the same length.\");\n\n              case 2:\n                formattedTokenIds = [];\n\n                for (i = 0; i < ids.length; i++) {\n                  formattedTokenIds.push(formatParamForUint256(ids[i]));\n                }\n\n                _context7.next = 6;\n                return this.methods.balanceOfBatch(accounts, formattedTokenIds).call();\n\n              case 6:\n                balances = _context7.sent;\n                ret = [];\n                _iterator = _createForOfIteratorHelper(balances);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    bal = _step.value;\n                    ret.push(new BigNumber(bal));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context7.abrupt(\"return\", ret);\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function balanceOfBatch(_x7, _x8) {\n        return _balanceOfBatch.apply(this, arguments);\n      }\n\n      return balanceOfBatch;\n    }()\n    /**\r\n     * Queries the approval status of an operator for a given owner. Returns true if an operator is approved by a given owner.\r\n     *\r\n     * @example\r\n     * const isApprovedForAll = await kip37.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\r\n     *\r\n     * @param {string} owner The address of the owner.\r\n     * @param {string} operator The address of the operator.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isApprovedForAll\",\n    value: function () {\n      var _isApprovedForAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(owner, operator) {\n        var isApprovedForAll;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.methods.isApprovedForAll(owner, operator).call();\n\n              case 2:\n                isApprovedForAll = _context8.sent;\n                return _context8.abrupt(\"return\", isApprovedForAll);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function isApprovedForAll(_x9, _x10) {\n        return _isApprovedForAll.apply(this, arguments);\n      }\n\n      return isApprovedForAll;\n    }()\n    /**\r\n     * Returns whether or not the token contract's transaction (or specific token) is paused.\r\n     *\r\n     * If `id` parameter is not defined, return whether the token contract's transaction is paused.\r\n     * If `id` parameter is defined, return whether the specific token is paused.\r\n     *\r\n     * @example\r\n     * // without token id parameter\r\n     * const isPaused = await kip37.paused()\r\n     * // with token id parameter\r\n     * const isPaused = await kip37.paused(0)\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to check wether paused or not. If this parameter is omitted, the `paused` function return whether the contract is in paused state.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"paused\",\n    value: function () {\n      var _paused = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(id) {\n        var callObject, isPaused;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                callObject = id !== undefined ? this.methods.paused(formatParamForUint256(id)) : this.methods.paused();\n                _context9.next = 3;\n                return callObject.call();\n\n              case 3:\n                isPaused = _context9.sent;\n                return _context9.abrupt(\"return\", isPaused);\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function paused(_x11) {\n        return _paused.apply(this, arguments);\n      }\n\n      return paused;\n    }()\n    /**\r\n     * Returns `true` if the given account is a pauser who can suspend transferring tokens.\r\n     *\r\n     * @example\r\n     * const isPauser = await kip37.isPauser('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the right to suspend transferring tokens.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isPauser\",\n    value: function () {\n      var _isPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(account) {\n        var isPauser;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.methods.isPauser(account).call();\n\n              case 2:\n                isPauser = _context10.sent;\n                return _context10.abrupt(\"return\", isPauser);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function isPauser(_x12) {\n        return _isPauser.apply(this, arguments);\n      }\n\n      return isPauser;\n    }()\n    /**\r\n     * Returns `true` if the given account is a minter who can issue new KIP37 tokens.\r\n     *\r\n     * @example\r\n     * const isMinter = await kip37.isMinter('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the minting right.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isMinter\",\n    value: function () {\n      var _isMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(account) {\n        var isMinter;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.methods.isMinter(account).call();\n\n              case 2:\n                isMinter = _context11.sent;\n                return _context11.abrupt(\"return\", isMinter);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function isMinter(_x13) {\n        return _isMinter.apply(this, arguments);\n      }\n\n      return isMinter;\n    }()\n    /**\r\n     * create creates token and assigns them to account, increasing the total supply.\r\n     *\r\n     * @example\r\n     * // Send via a sendParam object with the from field given\r\n     * const receipt = await kip37.create(2, '1000000000000000000', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to create.\r\n     * @param {BigNumber|string|number} initialSupply The amount of tokens being minted.\r\n     * @param {string} [uri] The token URI of the created token.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(id, initialSupply, uri) {\n        var sendParam,\n            executableObj,\n            _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                sendParam = _args12.length > 3 && _args12[3] !== undefined ? _args12[3] : {};\n\n                if (!(uri && _.isObject(uri))) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                if (!(uri.gas !== undefined || uri.from !== undefined)) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = uri;\n                uri = '';\n\n              case 7:\n                executableObj = this.methods.create(formatParamForUint256(id), formatParamForUint256(initialSupply), uri);\n                _context12.next = 10;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 10:\n                sendParam = _context12.sent;\n                return _context12.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 12:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function create(_x14, _x15, _x16) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\r\n     * Approves the given operator, or disallow the given operator, to transfer all tokens of the owner.\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.setApprovalForAll('0x{address in hex}', true, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} operator The address of an account to be approved/prohibited to transfer the owner's all tokens.\r\n     * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"setApprovalForAll\",\n    value: function () {\n      var _setApprovalForAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(operator, approved) {\n        var sendParam,\n            executableObj,\n            _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                sendParam = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {};\n                executableObj = this.methods.setApprovalForAll(operator, approved);\n                _context13.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context13.sent;\n                return _context13.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function setApprovalForAll(_x17, _x18) {\n        return _setApprovalForAll.apply(this, arguments);\n      }\n\n      return setApprovalForAll;\n    }()\n    /**\r\n     * Safely transfers the given `amount` tokens of specific token type `id` from `from` to the `recipient`.\r\n     *\r\n     * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 2, 10000, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} id The token id to transfer.\r\n     * @param {BigNumber|string|number} amount The amount of token you want to transfer.\r\n     * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"safeTransferFrom\",\n    value: function () {\n      var _safeTransferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(from, to, id, amount, data) {\n        var sendParam,\n            executableObj,\n            _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                sendParam = _args14.length > 5 && _args14[5] !== undefined ? _args14[5] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context14.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = Buffer.from('');\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                executableObj = this.methods.safeTransferFrom(from, to, formatParamForUint256(id), formatParamForUint256(amount), data);\n                _context14.next = 11;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 11:\n                sendParam = _context14.sent;\n                return _context14.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 13:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function safeTransferFrom(_x19, _x20, _x21, _x22, _x23) {\n        return _safeTransferFrom.apply(this, arguments);\n      }\n\n      return safeTransferFrom;\n    }()\n    /**\r\n     * Safely batch transfers of multiple token ids and values from `from` to the `recipient`.\r\n     *\r\n     * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.safeBatchTransferFrom('0x{address in hex}', '0x{address in hex}', [1, 2], [10, 1000], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\r\n     * @param {string} recipient The address of the account to receive the token.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to transfer.\r\n     * @param {Array.<BigNumber|string|number>} amounts An array of the token amounts you want to transfer.\r\n     * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"safeBatchTransferFrom\",\n    value: function () {\n      var _safeBatchTransferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(from, recipient, ids, amounts, data) {\n        var sendParam,\n            formattedTokenIds,\n            formattedTokenAmounts,\n            i,\n            executableObj,\n            _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                sendParam = _args15.length > 5 && _args15[5] !== undefined ? _args15[5] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context15.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = Buffer.from('');\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                if (!(ids.length !== amounts.length)) {\n                  _context15.next = 10;\n                  break;\n                }\n\n                throw new Error(\"ids and amounts must have the same length.\");\n\n              case 10:\n                formattedTokenIds = [];\n                formattedTokenAmounts = [];\n\n                for (i = 0; i < ids.length; i++) {\n                  formattedTokenIds.push(formatParamForUint256(ids[i]));\n                  formattedTokenAmounts.push(formatParamForUint256(amounts[i]));\n                }\n\n                executableObj = this.methods.safeBatchTransferFrom(from, recipient, formattedTokenIds, formattedTokenAmounts, data);\n                _context15.next = 16;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 16:\n                sendParam = _context15.sent;\n                return _context15.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 18:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function safeBatchTransferFrom(_x24, _x25, _x26, _x27, _x28) {\n        return _safeBatchTransferFrom.apply(this, arguments);\n      }\n\n      return safeBatchTransferFrom;\n    }()\n    /**\r\n     * Mints the token of the specific token type `id` and assigns the tokens according to the variables `to` and `value`.\r\n     * The mint function allows you to mint specific token to multiple accounts at once by passing arrays `to` to and `value` as parameters.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.mint('0x{address in hex}', 2, 1000, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string|Array.<string>} toList An address of the account or an array of addresses to which the minted token will be issued.\r\n     * @param {BigNumber|string|number} id The token id to mint.\r\n     * @param {BigNumber|string|number|Array.<BigNumber|string|number>} values The amount of token to be minted. If an array containing multiple addresses is delivered to `to` parameter, the value must be delivered in the form of an array.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"mint\",\n    value: function () {\n      var _mint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(toList, id, values) {\n        var sendParam,\n            executableObj,\n            formattedTokenValues,\n            _iterator2,\n            _step2,\n            val,\n            _args16 = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                sendParam = _args16.length > 3 && _args16[3] !== undefined ? _args16[3] : {};\n\n                if (!(_.isArray(toList) !== _.isArray(values))) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                throw new Error(\"If you want to minting a specific token to multiple accounts, both toList and values both must be arrays.\");\n\n              case 3:\n                if (!_.isArray(toList)) {\n                  _context16.next = 12;\n                  break;\n                }\n\n                if (!(toList.length !== values.length)) {\n                  _context16.next = 6;\n                  break;\n                }\n\n                throw new Error(\"toList and values must have the same length.\");\n\n              case 6:\n                formattedTokenValues = [];\n                _iterator2 = _createForOfIteratorHelper(values);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    val = _step2.value;\n                    formattedTokenValues.push(formatParamForUint256(val));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                executableObj = this.methods.mint(formatParamForUint256(id), toList, formattedTokenValues);\n                _context16.next = 13;\n                break;\n\n              case 12:\n                executableObj = this.methods.mint(formatParamForUint256(id), toList, formatParamForUint256(values));\n\n              case 13:\n                _context16.next = 15;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 15:\n                sendParam = _context16.sent;\n                return _context16.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 17:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function mint(_x29, _x30, _x31) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /**\r\n     * Mints the multiple KIP-37 tokens of the specific token types `ids` in a batch and assigns the tokens according to the variables `to` and `values`.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.mintBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to An address of the account to which the minted tokens will be issued.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to mint.\r\n     * @param {Array.<BigNumber|string|number>} values An array of the token amounts to mint.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"mintBatch\",\n    value: function () {\n      var _mintBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(to, ids, values) {\n        var sendParam,\n            formattedTokenIds,\n            formattedTokenValues,\n            i,\n            executableObj,\n            _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                sendParam = _args17.length > 3 && _args17[3] !== undefined ? _args17[3] : {};\n\n                if (!(ids.length !== values.length)) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                throw new Error(\"ids and values must have the same length.\");\n\n              case 3:\n                formattedTokenIds = [];\n                formattedTokenValues = [];\n\n                for (i = 0; i < ids.length; i++) {\n                  formattedTokenIds.push(formatParamForUint256(ids[i]));\n                  formattedTokenValues.push(formatParamForUint256(values[i]));\n                }\n\n                executableObj = this.methods.mintBatch(to, formattedTokenIds, formattedTokenValues);\n                _context17.next = 9;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 9:\n                sendParam = _context17.sent;\n                return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 11:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function mintBatch(_x32, _x33, _x34) {\n        return _mintBatch.apply(this, arguments);\n      }\n\n      return mintBatch;\n    }()\n    /**\r\n     * Adds an account as a minter, who are permitted to mint tokens.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account to be added as a minter.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"addMinter\",\n    value: function () {\n      var _addMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(account) {\n        var sendParam,\n            executableObj,\n            _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                sendParam = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};\n                executableObj = this.methods.addMinter(account);\n                _context18.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context18.sent;\n                return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function addMinter(_x35) {\n        return _addMinter.apply(this, arguments);\n      }\n\n      return addMinter;\n    }()\n    /**\r\n     * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.renounceMinter({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"renounceMinter\",\n    value: function () {\n      var _renounceMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var sendParam,\n            executableObj,\n            _args19 = arguments;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                sendParam = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n                executableObj = this.methods.renounceMinter();\n                _context19.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context19.sent;\n                return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function renounceMinter() {\n        return _renounceMinter.apply(this, arguments);\n      }\n\n      return renounceMinter;\n    }()\n    /**\r\n     * Burns specific KIP-37 tokens.\r\n     *\r\n     * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.burn('0x{address in hex}', 2, 10, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account that owns the token to be destroyed.\r\n     * @param {BigNumber|string|number} id The id of token to be destroyed.\r\n     * @param {BigNumber|string|number} value The amount of token to be destroyed.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\r\n     */\n\n  }, {\n    key: \"burn\",\n    value: function () {\n      var _burn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(account, id, value) {\n        var sendParam,\n            executableObj,\n            _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sendParam = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};\n                executableObj = this.methods.burn(account, formatParamForUint256(id), formatParamForUint256(value));\n                _context20.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context20.sent;\n                return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function burn(_x36, _x37, _x38) {\n        return _burn.apply(this, arguments);\n      }\n\n      return burn;\n    }()\n    /**\r\n     * Burns the multiple KIP-37 tokens.\r\n     *\r\n     * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.burnBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account that owns the token to be destroyed.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to burn.\r\n     * @param {Array.<BigNumber|string|number>} values An array of the token amounts to burn.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"burnBatch\",\n    value: function () {\n      var _burnBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(account, ids, values) {\n        var sendParam,\n            formattedTokenIds,\n            formattedTokenValues,\n            i,\n            executableObj,\n            _args21 = arguments;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sendParam = _args21.length > 3 && _args21[3] !== undefined ? _args21[3] : {};\n\n                if (!(ids.length !== values.length)) {\n                  _context21.next = 3;\n                  break;\n                }\n\n                throw new Error(\"ids and values must have the same length.\");\n\n              case 3:\n                formattedTokenIds = [];\n                formattedTokenValues = [];\n\n                for (i = 0; i < ids.length; i++) {\n                  formattedTokenIds.push(formatParamForUint256(ids[i]));\n                  formattedTokenValues.push(formatParamForUint256(values[i]));\n                }\n\n                executableObj = this.methods.burnBatch(account, formattedTokenIds, formattedTokenValues);\n                _context21.next = 9;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 9:\n                sendParam = _context21.sent;\n                return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 11:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function burnBatch(_x39, _x40, _x41) {\n        return _burnBatch.apply(this, arguments);\n      }\n\n      return burnBatch;\n    }()\n    /**\r\n     * Suspends functions related to token operation.\r\n     * If `id` parameter is defined, pause the specific token. Otherwise pause the token contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.pause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to pause. If this parameter is omitted, the `pause` function pause the token contract.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function () {\n      var _pause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(id) {\n        var sendParam,\n            executableObj,\n            _args22 = arguments;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                sendParam = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : {};\n\n                if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\n                  sendParam = id;\n                  id = undefined;\n                }\n\n                executableObj = id !== undefined ? this.methods.pause(formatParamForUint256(id)) : this.methods.pause();\n                _context22.next = 5;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 5:\n                sendParam = _context22.sent;\n                return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 7:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function pause(_x42) {\n        return _pause.apply(this, arguments);\n      }\n\n      return pause;\n    }()\n    /**\r\n     * Resumes the paused contract or specific token.\r\n     * If `id` parameter is defined, unpause the specific token. Otherwise unpause the token contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.unpause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to unpause. If this parameter is omitted, the `unpause` function unpause the token contract.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"unpause\",\n    value: function () {\n      var _unpause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(id) {\n        var sendParam,\n            executableObj,\n            _args23 = arguments;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                sendParam = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};\n\n                if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\n                  sendParam = id;\n                  id = undefined;\n                }\n\n                executableObj = id !== undefined ? this.methods.unpause(formatParamForUint256(id)) : this.methods.unpause();\n                _context23.next = 5;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 5:\n                sendParam = _context23.sent;\n                return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 7:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function unpause(_x43) {\n        return _unpause.apply(this, arguments);\n      }\n\n      return unpause;\n    }()\n    /**\r\n     * Adds an account as a pauser that has the right to suspend the contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account to be a new pauser.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"addPauser\",\n    value: function () {\n      var _addPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(account) {\n        var sendParam,\n            executableObj,\n            _args24 = arguments;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                sendParam = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};\n                executableObj = this.methods.addPauser(account);\n                _context24.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context24.sent;\n                return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function addPauser(_x44) {\n        return _addPauser.apply(this, arguments);\n      }\n\n      return addPauser;\n    }()\n    /**\r\n     * Renounces the right to pause the contract. Only a pauser address can renounce the pausing right.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.renouncePauser({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\n\n  }, {\n    key: \"renouncePauser\",\n    value: function () {\n      var _renouncePauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var sendParam,\n            executableObj,\n            _args25 = arguments;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                sendParam = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};\n                executableObj = this.methods.renouncePauser();\n                _context25.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context25.sent;\n                return _context25.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function renouncePauser() {\n        return _renouncePauser.apply(this, arguments);\n      }\n\n      return renouncePauser;\n    }()\n  }], [{\n    key: \"create\",\n    value:\n    /**\r\n     * Creates a new KIP37 instance with its bound methods and events.\r\n     *\r\n     * @example\r\n     * const kip37 = caver.kct.kip37.create('0x{address in hex}')\r\n     *\r\n     * @param {string} tokenAddress - The KIP-37 token contract address.\r\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-37.\r\n     * @return {KIP37}\r\n     */\n    function create(tokenAddress, abi) {\n      return new KIP37(tokenAddress, abi);\n    }\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-37 contract.\r\n     *\r\n     * @typedef {object} KIP37.KIP37DeployParams\r\n     * @property {string} uri - The URI for all token types, by relying on the {@link http://kips.klaytn.com/KIPs/kip-37#metadata|token type ID substitution mechanism}.\r\n     */\n\n    /**\r\n     * Deploys a KIP-37 token contract to Klaytn network.\r\n     *\r\n     * By default, it returns a KIP37 instance when the deployment is finished.\r\n     * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n     *\r\n     * @example\r\n     * const tokenInfo = { uri: 'uri string' }\r\n     *\r\n     * // Below example will use `caver.wallet`.\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}')\r\n     *\r\n     * // Use sendOptions instead of deployer address.\r\n     * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, sendOptions)\r\n     *\r\n     * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n     *\r\n     * @param {KIP37.KIP37DeployParams} tokenInfo The object that defines the uri to deploy.\r\n     * @param {Contract.SendOptions|string} sendOptions An object holding parameters that are required for sending a transaction.\r\n     * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n     * @return {Promise<*>}\r\n     */\n\n  }, {\n    key: \"deploy\",\n    value: function deploy(tokenInfo, sendOptions, wallet) {\n      validateDeployParameterForKIP37(tokenInfo);\n      var uri = tokenInfo.uri;\n      var kip37 = new KIP37();\n      if (wallet !== undefined) kip37.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n      if (_.isString(sendOptions)) sendOptions = {\n        from: sendOptions,\n        gas: 7000000,\n        value: 0\n      };\n      sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 7000000;\n      return kip37.deploy({\n        data: kip37ByteCode,\n        arguments: [uri]\n      }).send(sendOptions);\n    }\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-37 contract.\r\n     *\r\n     * @typedef {object} KIP37.KIP37DetectedObject\r\n     * @property {boolean} IKIP37 - Whether to implement `IKIP37` interface.\r\n     * @property {boolean} IKIP37Metadata - Whether to implement `IKIP37Metadata` interface.\r\n     * @property {boolean} IKIP37Mintable - Whether to implement `IKIP37Mintable` interface.\r\n     * @property {boolean} IKIP37Burnable - Whether to implement `IKIP37Burnable` interface.\r\n     * @property {boolean} IKIP37Pausable - Whether to implement `IKIP37Pausable` interface.\r\n     */\n\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await caver.kct.kip37.detectInterface('0x{address in hex}')\r\n     *\r\n     * @param {string} contractAddress The address of the KIP-37 token contract to detect.\r\n     * @return {Promise<KIP37.KIP37DetectedObject>}\r\n     */\n\n  }, {\n    key: \"detectInterface\",\n    value: function detectInterface(contractAddress) {\n      var kip37 = new KIP37(contractAddress);\n      return kip37.detectInterface();\n    }\n  }]);\n\n  return KIP37;\n}(Contract);\n/**\r\n * The byte code of the KIP-37 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip37.byteCode\r\n *\r\n * @static\r\n * @type {string}\r\n */\n\n\nKIP37.byteCode = kip37ByteCode;\n/**\r\n * The abi of the KIP-37 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip37.abi\r\n *\r\n * @static\r\n * @type {Array.<object>}\r\n */\n\nKIP37.abi = kip37JsonInterface;\nmodule.exports = KIP37;","map":{"version":3,"names":["_","require","BigNumber","Contract","kip37JsonInterface","kip37ByteCode","determineSendParams","formatParamForUint256","validateDeployParameterForKIP37","interfaceIds","isAddress","toBuffer","isHexStrict","toHex","stripHexPrefix","leftPad","KIP13","KIP37","tokenAddress","abi","isString","Error","undefined","setWallet","wallet","options","address","cloned","constructor","jsonInterface","_wallet","detected","IKIP37","IKIP37Metadata","IKIP37Mintable","IKIP37Burnable","IKIP37Pausable","notSupportedMsg","contractAddress","_address","isImplementedKIP13Interface","isSupported","supportsInterface","kip37","Promise","all","Object","keys","map","interfaceName","interfaceId","methods","call","id","uri","includes","tokenIdInHex","replace","totalSupply","account","balanceOf","balance","accounts","ids","length","formattedTokenIds","i","push","balanceOfBatch","balances","ret","bal","owner","operator","isApprovedForAll","callObject","paused","isPaused","isPauser","isMinter","initialSupply","sendParam","isObject","gas","from","executableObj","create","send","approved","setApprovalForAll","to","amount","data","Buffer","isBuffer","safeTransferFrom","recipient","amounts","formattedTokenAmounts","safeBatchTransferFrom","toList","values","isArray","formattedTokenValues","val","mint","mintBatch","addMinter","renounceMinter","value","burn","burnBatch","pause","unpause","addPauser","renouncePauser","tokenInfo","sendOptions","deploy","arguments","detectInterface","byteCode","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-kct/src/kip37.js"],"sourcesContent":["/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst BigNumber = require('bignumber.js')\r\n\r\nconst Contract = require('../../caver-contract')\r\nconst {\r\n    kip37JsonInterface,\r\n    kip37ByteCode,\r\n    determineSendParams,\r\n    formatParamForUint256,\r\n    validateDeployParameterForKIP37,\r\n    interfaceIds,\r\n} = require('./kctHelper')\r\nconst { isAddress, toBuffer, isHexStrict, toHex, stripHexPrefix, leftPad } = require('../../caver-utils')\r\nconst KIP13 = require('./kip13')\r\n\r\n/**\r\n * The KIP37 class that helps you easily handle a smart contract that implements KIP-37 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\r\n * @hideconstructor\r\n * @class\r\n */\r\nclass KIP37 extends Contract {\r\n    /**\r\n     * Creates a new KIP37 instance with its bound methods and events.\r\n     *\r\n     * @example\r\n     * const kip37 = caver.kct.kip37.create('0x{address in hex}')\r\n     *\r\n     * @param {string} tokenAddress - The KIP-37 token contract address.\r\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-37.\r\n     * @return {KIP37}\r\n     */\r\n    static create(tokenAddress, abi) {\r\n        return new KIP37(tokenAddress, abi)\r\n    }\r\n\r\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-37 contract.\r\n     *\r\n     * @typedef {object} KIP37.KIP37DeployParams\r\n     * @property {string} uri - The URI for all token types, by relying on the {@link http://kips.klaytn.com/KIPs/kip-37#metadata|token type ID substitution mechanism}.\r\n     */\r\n    /**\r\n     * Deploys a KIP-37 token contract to Klaytn network.\r\n     *\r\n     * By default, it returns a KIP37 instance when the deployment is finished.\r\n     * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n     *\r\n     * @example\r\n     * const tokenInfo = { uri: 'uri string' }\r\n     *\r\n     * // Below example will use `caver.wallet`.\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}')\r\n     *\r\n     * // Use sendOptions instead of deployer address.\r\n     * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, sendOptions)\r\n     *\r\n     * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n     * const deployed = await caver.kct.kip37.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n     *\r\n     * @param {KIP37.KIP37DeployParams} tokenInfo The object that defines the uri to deploy.\r\n     * @param {Contract.SendOptions|string} sendOptions An object holding parameters that are required for sending a transaction.\r\n     * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n     * @return {Promise<*>}\r\n     */\r\n    static deploy(tokenInfo, sendOptions, wallet) {\r\n        validateDeployParameterForKIP37(tokenInfo)\r\n\r\n        const { uri } = tokenInfo\r\n        const kip37 = new KIP37()\r\n        if (wallet !== undefined) kip37.setWallet(wallet)\r\n\r\n        // If sendOptions is string type, sendOptions means deployer's address\r\n        if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 7000000, value: 0 }\r\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 7000000\r\n\r\n        return kip37\r\n            .deploy({\r\n                data: kip37ByteCode,\r\n                arguments: [uri],\r\n            })\r\n            .send(sendOptions)\r\n    }\r\n\r\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-37 contract.\r\n     *\r\n     * @typedef {object} KIP37.KIP37DetectedObject\r\n     * @property {boolean} IKIP37 - Whether to implement `IKIP37` interface.\r\n     * @property {boolean} IKIP37Metadata - Whether to implement `IKIP37Metadata` interface.\r\n     * @property {boolean} IKIP37Mintable - Whether to implement `IKIP37Mintable` interface.\r\n     * @property {boolean} IKIP37Burnable - Whether to implement `IKIP37Burnable` interface.\r\n     * @property {boolean} IKIP37Pausable - Whether to implement `IKIP37Pausable` interface.\r\n     */\r\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await caver.kct.kip37.detectInterface('0x{address in hex}')\r\n     *\r\n     * @param {string} contractAddress The address of the KIP-37 token contract to detect.\r\n     * @return {Promise<KIP37.KIP37DetectedObject>}\r\n     */\r\n    static detectInterface(contractAddress) {\r\n        const kip37 = new KIP37(contractAddress)\r\n        return kip37.detectInterface()\r\n    }\r\n\r\n    constructor(tokenAddress, abi = kip37JsonInterface) {\r\n        if (tokenAddress) {\r\n            if (_.isString(tokenAddress)) {\r\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\r\n            } else {\r\n                abi = tokenAddress\r\n                tokenAddress = undefined\r\n            }\r\n        }\r\n        super(abi, tokenAddress)\r\n        this.setWallet(KIP37.wallet)\r\n    }\r\n\r\n    /**\r\n     * Clones the current KIP37 instance.\r\n     *\r\n     * @example\r\n     * const cloned = kip37.clone()\r\n     * const cloned = kip37.clone('0x{new kip7 address}')\r\n     *\r\n     * @param {string} [tokenAddress] The address of the token contract.\r\n     * @return {KIP37}\r\n     */\r\n    clone(tokenAddress = this.options.address) {\r\n        const cloned = new this.constructor(tokenAddress, this.options.jsonInterface)\r\n        cloned.setWallet(this._wallet)\r\n        return cloned\r\n    }\r\n\r\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await kip37.detectInterface()\r\n     *\r\n     * @return {Promise<KIP37.KIP37DetectedObject>}\r\n     */\r\n    async detectInterface() {\r\n        const detected = {\r\n            IKIP37: false,\r\n            IKIP37Metadata: false,\r\n            IKIP37Mintable: false,\r\n            IKIP37Burnable: false,\r\n            IKIP37Pausable: false,\r\n        }\r\n\r\n        const notSupportedMsg = `This contract does not support KIP-13.`\r\n        const contractAddress = this._address\r\n\r\n        try {\r\n            const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress)\r\n            if (isSupported !== true) throw new Error(notSupportedMsg)\r\n\r\n            // Since there is an extension that has the same interface id even though it is a different KCT,\r\n            // it must be checked first whether the contract is a KIP-37 contract.\r\n            detected.IKIP37 = await this.supportsInterface(interfaceIds.kip37.IKIP37)\r\n            if (detected.IKIP37 === false) return detected\r\n\r\n            await Promise.all(\r\n                Object.keys(interfaceIds.kip37).map(async interfaceName => {\r\n                    if (interfaceIds.kip37[interfaceName] !== interfaceIds.kip37.IKIP37)\r\n                        detected[interfaceName] = await this.supportsInterface(interfaceIds.kip37[interfaceName])\r\n                })\r\n            )\r\n            return detected\r\n        } catch (e) {\r\n            throw new Error(notSupportedMsg)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if this contract implements the interface defined by `interfaceId`.\r\n     *\r\n     * @example\r\n     * const supported = await kip37.supportsInterface('0x6433ca1f')\r\n     *\r\n     * @param {string} interfaceId The interface id to check.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async supportsInterface(interfaceId) {\r\n        const isSupported = await this.methods.supportsInterface(interfaceId).call()\r\n        return isSupported\r\n    }\r\n\r\n    /**\r\n     * Returns distinct Uniform Resource Identifier (URI) of the given token.\r\n     * If the string {id} exists in any URI, this function will replace this with the actual token ID in hexadecimal form.\r\n     * Please refer to {@link http://kips.klaytn.com/KIPs/kip-37#metadata|KIP-34 Metadata}.\r\n     *\r\n     * @example\r\n     * const uri = await kip37.uri('0x0')\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to get uri.\r\n     * @return {Promise<string>}\r\n     */\r\n    async uri(id) {\r\n        let uri = await this.methods.uri(formatParamForUint256(id)).call()\r\n\r\n        // Replace {id} to token id in hexadecimal form.\r\n        if (uri.includes('{id}')) {\r\n            let tokenIdInHex = stripHexPrefix(toHex(id))\r\n            tokenIdInHex = leftPad(tokenIdInHex, 64, '0')\r\n            uri = uri.replace('{id}', tokenIdInHex)\r\n        }\r\n        return uri\r\n    }\r\n\r\n    /**\r\n     * Returns the total token supply of the specific token.\r\n     *\r\n     * @example\r\n     * const totalSupply = await kip37.totalSupply(0)\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to see the total supply.\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async totalSupply(id) {\r\n        const totalSupply = await this.methods.totalSupply(formatParamForUint256(id)).call()\r\n        return new BigNumber(totalSupply)\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * @example\r\n     * const balance = await kip37.balanceOf('0x{address in hex}', 0)\r\n     *\r\n     * @param {string} account The address of the account for which you want to see balance.\r\n     * @param {BigNumber|string|number} id The token id to see balance.\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async balanceOf(account, id) {\r\n        const balance = await this.methods.balanceOf(account, formatParamForUint256(id)).call()\r\n        return new BigNumber(balance)\r\n    }\r\n\r\n    /**\r\n     * Returns the balance of multiple account/token pairs.\r\n     * `balanceOfBatch` is a batch operation of {@link balanceOf}, and the length of arrays with `accounts` and `ids` must be the same.\r\n     *\r\n     * @param {Array.<string>} accounts The address of the accounts for which you want to see balance.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of ids of token you want to see balance.\r\n     * @return {Promise<Array.<BigNumber>>}\r\n     */\r\n    async balanceOfBatch(accounts, ids) {\r\n        if (ids.length !== accounts.length) throw new Error(`ids and accounts must have the same length.`)\r\n\r\n        const formattedTokenIds = []\r\n        for (let i = 0; i < ids.length; i++) {\r\n            formattedTokenIds.push(formatParamForUint256(ids[i]))\r\n        }\r\n\r\n        const balances = await this.methods.balanceOfBatch(accounts, formattedTokenIds).call()\r\n\r\n        const ret = []\r\n        for (const bal of balances) {\r\n            ret.push(new BigNumber(bal))\r\n        }\r\n\r\n        return ret\r\n    }\r\n\r\n    /**\r\n     * Queries the approval status of an operator for a given owner. Returns true if an operator is approved by a given owner.\r\n     *\r\n     * @example\r\n     * const isApprovedForAll = await kip37.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\r\n     *\r\n     * @param {string} owner The address of the owner.\r\n     * @param {string} operator The address of the operator.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isApprovedForAll(owner, operator) {\r\n        const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call()\r\n        return isApprovedForAll\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the token contract's transaction (or specific token) is paused.\r\n     *\r\n     * If `id` parameter is not defined, return whether the token contract's transaction is paused.\r\n     * If `id` parameter is defined, return whether the specific token is paused.\r\n     *\r\n     * @example\r\n     * // without token id parameter\r\n     * const isPaused = await kip37.paused()\r\n     * // with token id parameter\r\n     * const isPaused = await kip37.paused(0)\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to check wether paused or not. If this parameter is omitted, the `paused` function return whether the contract is in paused state.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async paused(id) {\r\n        const callObject = id !== undefined ? this.methods.paused(formatParamForUint256(id)) : this.methods.paused()\r\n        const isPaused = await callObject.call()\r\n        return isPaused\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the given account is a pauser who can suspend transferring tokens.\r\n     *\r\n     * @example\r\n     * const isPauser = await kip37.isPauser('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the right to suspend transferring tokens.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isPauser(account) {\r\n        const isPauser = await this.methods.isPauser(account).call()\r\n        return isPauser\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the given account is a minter who can issue new KIP37 tokens.\r\n     *\r\n     * @example\r\n     * const isMinter = await kip37.isMinter('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the minting right.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isMinter(account) {\r\n        const isMinter = await this.methods.isMinter(account).call()\r\n        return isMinter\r\n    }\r\n\r\n    /**\r\n     * create creates token and assigns them to account, increasing the total supply.\r\n     *\r\n     * @example\r\n     * // Send via a sendParam object with the from field given\r\n     * const receipt = await kip37.create(2, '1000000000000000000', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} id The token id to create.\r\n     * @param {BigNumber|string|number} initialSupply The amount of tokens being minted.\r\n     * @param {string} [uri] The token URI of the created token.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async create(id, initialSupply, uri, sendParam = {}) {\r\n        if (uri && _.isObject(uri)) {\r\n            if (uri.gas !== undefined || uri.from !== undefined) {\r\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\r\n                sendParam = uri\r\n                uri = ''\r\n            }\r\n        }\r\n\r\n        const executableObj = this.methods.create(formatParamForUint256(id), formatParamForUint256(initialSupply), uri)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Approves the given operator, or disallow the given operator, to transfer all tokens of the owner.\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.setApprovalForAll('0x{address in hex}', true, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} operator The address of an account to be approved/prohibited to transfer the owner's all tokens.\r\n     * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async setApprovalForAll(operator, approved, sendParam = {}) {\r\n        const executableObj = this.methods.setApprovalForAll(operator, approved)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Safely transfers the given `amount` tokens of specific token type `id` from `from` to the `recipient`.\r\n     *\r\n     * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 2, 10000, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} id The token id to transfer.\r\n     * @param {BigNumber|string|number} amount The amount of token you want to transfer.\r\n     * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async safeTransferFrom(from, to, id, amount, data, sendParam = {}) {\r\n        if (data && _.isObject(data)) {\r\n            if (data.gas !== undefined || data.from !== undefined) {\r\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\r\n                sendParam = data\r\n                data = Buffer.from('')\r\n            }\r\n        }\r\n\r\n        if (data && !_.isBuffer(data)) {\r\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\r\n            data = toBuffer(data)\r\n        }\r\n\r\n        const executableObj = this.methods.safeTransferFrom(from, to, formatParamForUint256(id), formatParamForUint256(amount), data)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Safely batch transfers of multiple token ids and values from `from` to the `recipient`.\r\n     *\r\n     * The address who was approved to send the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * If the `recipient` was a contract address, it should implement `IKIP37Receiver.onKIP37Received`. Otherwise, the transfer is reverted.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.safeBatchTransferFrom('0x{address in hex}', '0x{address in hex}', [1, 2], [10, 1000], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the account that owns the token to be sent with allowance mechanism.\r\n     * @param {string} recipient The address of the account to receive the token.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to transfer.\r\n     * @param {Array.<BigNumber|string|number>} amounts An array of the token amounts you want to transfer.\r\n     * @param {Buffer|string|number} [data] (optional) The data to send along with the call.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async safeBatchTransferFrom(from, recipient, ids, amounts, data, sendParam = {}) {\r\n        if (data && _.isObject(data)) {\r\n            if (data.gas !== undefined || data.from !== undefined) {\r\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\r\n                sendParam = data\r\n                data = Buffer.from('')\r\n            }\r\n        }\r\n\r\n        if (data && !_.isBuffer(data)) {\r\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\r\n            data = toBuffer(data)\r\n        }\r\n\r\n        if (ids.length !== amounts.length) throw new Error(`ids and amounts must have the same length.`)\r\n\r\n        const formattedTokenIds = []\r\n        const formattedTokenAmounts = []\r\n        for (let i = 0; i < ids.length; i++) {\r\n            formattedTokenIds.push(formatParamForUint256(ids[i]))\r\n            formattedTokenAmounts.push(formatParamForUint256(amounts[i]))\r\n        }\r\n\r\n        const executableObj = this.methods.safeBatchTransferFrom(from, recipient, formattedTokenIds, formattedTokenAmounts, data)\r\n\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Mints the token of the specific token type `id` and assigns the tokens according to the variables `to` and `value`.\r\n     * The mint function allows you to mint specific token to multiple accounts at once by passing arrays `to` to and `value` as parameters.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.mint('0x{address in hex}', 2, 1000, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string|Array.<string>} toList An address of the account or an array of addresses to which the minted token will be issued.\r\n     * @param {BigNumber|string|number} id The token id to mint.\r\n     * @param {BigNumber|string|number|Array.<BigNumber|string|number>} values The amount of token to be minted. If an array containing multiple addresses is delivered to `to` parameter, the value must be delivered in the form of an array.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async mint(toList, id, values, sendParam = {}) {\r\n        if (_.isArray(toList) !== _.isArray(values))\r\n            throw new Error(`If you want to minting a specific token to multiple accounts, both toList and values both must be arrays.`)\r\n\r\n        let executableObj\r\n        if (_.isArray(toList)) {\r\n            if (toList.length !== values.length) throw new Error(`toList and values must have the same length.`)\r\n\r\n            const formattedTokenValues = []\r\n            for (const val of values) {\r\n                formattedTokenValues.push(formatParamForUint256(val))\r\n            }\r\n\r\n            executableObj = this.methods.mint(formatParamForUint256(id), toList, formattedTokenValues)\r\n        } else {\r\n            executableObj = this.methods.mint(formatParamForUint256(id), toList, formatParamForUint256(values))\r\n        }\r\n\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Mints the multiple KIP-37 tokens of the specific token types `ids` in a batch and assigns the tokens according to the variables `to` and `values`.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.mintBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to An address of the account to which the minted tokens will be issued.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to mint.\r\n     * @param {Array.<BigNumber|string|number>} values An array of the token amounts to mint.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async mintBatch(to, ids, values, sendParam = {}) {\r\n        if (ids.length !== values.length) throw new Error(`ids and values must have the same length.`)\r\n\r\n        const formattedTokenIds = []\r\n        const formattedTokenValues = []\r\n        for (let i = 0; i < ids.length; i++) {\r\n            formattedTokenIds.push(formatParamForUint256(ids[i]))\r\n            formattedTokenValues.push(formatParamForUint256(values[i]))\r\n        }\r\n\r\n        const executableObj = this.methods.mintBatch(to, formattedTokenIds, formattedTokenValues)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Adds an account as a minter, who are permitted to mint tokens.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account to be added as a minter.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async addMinter(account, sendParam = {}) {\r\n        const executableObj = this.methods.addMinter(account)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.renounceMinter({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async renounceMinter(sendParam = {}) {\r\n        const executableObj = this.methods.renounceMinter()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Burns specific KIP-37 tokens.\r\n     *\r\n     * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.burn('0x{address in hex}', 2, 10, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account that owns the token to be destroyed.\r\n     * @param {BigNumber|string|number} id The id of token to be destroyed.\r\n     * @param {BigNumber|string|number} value The amount of token to be destroyed.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\r\n     */\r\n    async burn(account, id, value, sendParam = {}) {\r\n        const executableObj = this.methods.burn(account, formatParamForUint256(id), formatParamForUint256(value))\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Burns the multiple KIP-37 tokens.\r\n     *\r\n     * The address who was approved to operate the owner's token (the operator) or the token owner itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip37.options.from`.\r\n     * Without `sendParam.from` nor `kip37.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.burnBatch('0x{address in hex}', [1, 2], [100, 200], { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account that owns the token to be destroyed.\r\n     * @param {Array.<BigNumber|string|number>} ids An array of the token ids to burn.\r\n     * @param {Array.<BigNumber|string|number>} values An array of the token amounts to burn.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async burnBatch(account, ids, values, sendParam = {}) {\r\n        if (ids.length !== values.length) throw new Error(`ids and values must have the same length.`)\r\n\r\n        const formattedTokenIds = []\r\n        const formattedTokenValues = []\r\n        for (let i = 0; i < ids.length; i++) {\r\n            formattedTokenIds.push(formatParamForUint256(ids[i]))\r\n            formattedTokenValues.push(formatParamForUint256(values[i]))\r\n        }\r\n\r\n        const executableObj = this.methods.burnBatch(account, formattedTokenIds, formattedTokenValues)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Suspends functions related to token operation.\r\n     * If `id` parameter is defined, pause the specific token. Otherwise pause the token contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.pause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to pause. If this parameter is omitted, the `pause` function pause the token contract.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async pause(id, sendParam = {}) {\r\n        if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\r\n            sendParam = id\r\n            id = undefined\r\n        }\r\n\r\n        const executableObj = id !== undefined ? this.methods.pause(formatParamForUint256(id)) : this.methods.pause()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Resumes the paused contract or specific token.\r\n     * If `id` parameter is defined, unpause the specific token. Otherwise unpause the token contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.unpause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} [id] The token id to unpause. If this parameter is omitted, the `unpause` function unpause the token contract.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async unpause(id, sendParam = {}) {\r\n        if (Object.keys(sendParam).length === 0 && _.isObject(id)) {\r\n            sendParam = id\r\n            id = undefined\r\n        }\r\n\r\n        const executableObj = id !== undefined ? this.methods.unpause(formatParamForUint256(id)) : this.methods.unpause()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Adds an account as a pauser that has the right to suspend the contract.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of the account to be a new pauser.\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async addPauser(account, sendParam = {}) {\r\n        const executableObj = this.methods.addPauser(account)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Renounces the right to pause the contract. Only a pauser address can renounce the pausing right.\r\n     *\r\n     * If `sendParam.from` or `kip37.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip37.renouncePauser({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptios} [sendParam] (optional) An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-37 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-37 abi.\r\n     */\r\n    async renouncePauser(sendParam = {}) {\r\n        const executableObj = this.methods.renouncePauser()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n}\r\n\r\n/**\r\n * The byte code of the KIP-37 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip37.byteCode\r\n *\r\n * @static\r\n * @type {string}\r\n */\r\nKIP37.byteCode = kip37ByteCode\r\n\r\n/**\r\n * The abi of the KIP-37 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip37.abi\r\n *\r\n * @static\r\n * @type {Array.<object>}\r\n */\r\nKIP37.abi = kip37JsonInterface\r\n\r\nmodule.exports = KIP37\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}