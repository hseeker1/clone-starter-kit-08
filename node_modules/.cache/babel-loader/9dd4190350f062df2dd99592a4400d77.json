{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst utils = require('../../../caver-utils');\n/**\r\n * Representing a WeightedPublicKey.\r\n * This class is used to represent each public key with weight in {@link AccountKeyWeightedMultiSig}.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass WeightedPublicKey {\n  /**\r\n   * Create an instance of WeightedPublicKey.\r\n   * @param {number} weight - The weight of the key.\r\n   * @param {string} publicKey - The public key string.\r\n   */\n  constructor(weight, publicKey) {\n    this.weight = weight;\n    this.publicKey = publicKey;\n  }\n  /**\r\n   * @type {number}\r\n   */\n\n\n  get weight() {\n    return this._weight;\n  }\n\n  set weight(w) {\n    this._weight = utils.hexToNumber(w);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  set publicKey(p) {\n    if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`);\n    this._publicKey = utils.addHexPrefix(p);\n  }\n  /**\r\n   * Returns an encoded weighted public key string.\r\n   *\r\n   * @example\r\n   * const bytes = weightedPublicKey.encodeToBytes()\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  encodeToBytes() {\n    if (this.weight === undefined) throw new Error('weight should be specified for a multisig account');\n    if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n    const compressedPublicKey = utils.compressPublicKey(this.publicKey);\n    return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey];\n  }\n\n}\n\nmodule.exports = WeightedPublicKey;","map":{"version":3,"names":["Bytes","require","utils","WeightedPublicKey","constructor","weight","publicKey","_weight","w","hexToNumber","_publicKey","p","isValidPublicKey","Error","addHexPrefix","encodeToBytes","undefined","compressedPublicKey","compressPublicKey","fromNat","numberToHex","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/weightedPublicKey.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst utils = require('../../../caver-utils')\r\n\r\n/**\r\n * Representing a WeightedPublicKey.\r\n * This class is used to represent each public key with weight in {@link AccountKeyWeightedMultiSig}.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass WeightedPublicKey {\r\n    /**\r\n     * Create an instance of WeightedPublicKey.\r\n     * @param {number} weight - The weight of the key.\r\n     * @param {string} publicKey - The public key string.\r\n     */\r\n    constructor(weight, publicKey) {\r\n        this.weight = weight\r\n        this.publicKey = publicKey\r\n    }\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    get weight() {\r\n        return this._weight\r\n    }\r\n\r\n    set weight(w) {\r\n        this._weight = utils.hexToNumber(w)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get publicKey() {\r\n        return this._publicKey\r\n    }\r\n\r\n    set publicKey(p) {\r\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\r\n        this._publicKey = utils.addHexPrefix(p)\r\n    }\r\n\r\n    /**\r\n     * Returns an encoded weighted public key string.\r\n     *\r\n     * @example\r\n     * const bytes = weightedPublicKey.encodeToBytes()\r\n     *\r\n     * @return {string}\r\n     */\r\n    encodeToBytes() {\r\n        if (this.weight === undefined) throw new Error('weight should be specified for a multisig account')\r\n        if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\r\n\r\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\r\n        return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey]\r\n    }\r\n}\r\n\r\nmodule.exports = WeightedPublicKey\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,iBAAN,CAAwB;EACpB;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACH;EAED;AACJ;AACA;;;EACc,IAAND,MAAM,GAAG;IACT,OAAO,KAAKE,OAAZ;EACH;;EAES,IAANF,MAAM,CAACG,CAAD,EAAI;IACV,KAAKD,OAAL,GAAeL,KAAK,CAACO,WAAN,CAAkBD,CAAlB,CAAf;EACH;EAED;AACJ;AACA;;;EACiB,IAATF,SAAS,GAAG;IACZ,OAAO,KAAKI,UAAZ;EACH;;EAEY,IAATJ,SAAS,CAACK,CAAD,EAAI;IACb,IAAI,CAACT,KAAK,CAACU,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIE,KAAJ,CAAW,uBAAsBF,CAAE,EAAnC,CAAN;IAChC,KAAKD,UAAL,GAAkBR,KAAK,CAACY,YAAN,CAAmBH,CAAnB,CAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACII,aAAa,GAAG;IACZ,IAAI,KAAKV,MAAL,KAAgBW,SAApB,EAA+B,MAAM,IAAIH,KAAJ,CAAU,mDAAV,CAAN;IAC/B,IAAI,KAAKP,SAAL,KAAmBU,SAAvB,EAAkC,MAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;IAElC,MAAMI,mBAAmB,GAAGf,KAAK,CAACgB,iBAAN,CAAwB,KAAKZ,SAA7B,CAA5B;IACA,OAAO,CAACN,KAAK,CAACmB,OAAN,CAAcjB,KAAK,CAACkB,WAAN,CAAkB,KAAKf,MAAvB,CAAd,CAAD,EAAgDY,mBAAhD,CAAP;EACH;;AAhDmB;;AAmDxBI,MAAM,CAACC,OAAP,GAAiBnB,iBAAjB"},"metadata":{},"sourceType":"script"}