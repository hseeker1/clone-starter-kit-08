{"ast":null,"code":"var _assertThisInitialized = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/* eslint-disable max-classes-per-file */\nvar _ = require('lodash');\n\nvar BaseKIP7 = require('./kip7');\n\nvar BaseKIP17 = require('./kip17');\n\nvar KIP37 = require('./kip37');\n\nvar KIP13 = require('./kip13');\n\nvar core = require('../../caver-core');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP7 = _require.validateDeployParameterForKIP7,\n    validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n    kip7ByteCode = _require.kip7ByteCode,\n    kip17ByteCode = _require.kip17ByteCode;\n/**\r\n * A class that manages KCT supported by caver.\r\n * @hideconstructor\r\n * @class\r\n */\n\n\nvar KCT = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function KCT() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, KCT);\n\n    var _this = this; // sets _requestmanager\n\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    var setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      _this.kip7._requestManager = _this._requestManager;\n      _this.kip7.currentProvider = _this._provider;\n      _this.kip17._requestManager = _this._requestManager;\n      _this.kip17.currentProvider = _this._provider;\n      _this.kip37._requestManager = _this._requestManager;\n      _this.kip37.currentProvider = _this._provider;\n      return true;\n    }; // overwrite setProvider\n\n\n    var setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      setProvider.apply(_this, arguments);\n\n      _this.setRequestManager(_this._requestManager);\n    };\n    /**\r\n     * The KIP7 wrapping class that helps you to use KIP7 class with common architecture features.\r\n     * This class can be used via `caver.kct.kip7`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\r\n     * @ignore\r\n     * @class\r\n     */\n\n\n    var KIP7 = /*#__PURE__*/function (_BaseKIP) {\n      _inherits(KIP7, _BaseKIP);\n\n      var _super = _createSuper(KIP7);\n\n      /**\r\n       * Wrapping class of the KIP7.\r\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\r\n       *\r\n       * @constructor\r\n       * @param {string} tokenAddress - The KIP-7 token contract address.\r\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\r\n       */\n      function KIP7(tokenAddress, abi) {\n        var _this2;\n\n        _classCallCheck(this, KIP7);\n\n        _this2 = _super.call(this, tokenAddress, abi);\n        core.packageInit(_assertThisInitialized(_this2), [_this]);\n\n        _this2.setWallet(args[0].wallet);\n\n        return _this2;\n      }\n\n      _createClass(KIP7, null, [{\n        key: \"create\",\n        value:\n        /**\r\n         * Creates a new KIP7 instance with its bound methods and events.\r\n         *\r\n         * @example\r\n         * const kip7 = caver.kct.kip7.create('0x{address in hex}')\r\n         *\r\n         * @param {string} tokenAddress - The KIP-7 token contract address.\r\n         * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\r\n         * @return {KIP7}\r\n         */\n        function create(tokenAddress, abi) {\n          return new KIP7(tokenAddress, abi);\n        }\n        /**\r\n         * An object that defines the parameters required to deploy the KIP-7 contract.\r\n         *\r\n         * @typedef {object} KIP7.KIP7DeployParams\r\n         * @property {string} name - The name of the token.\r\n         * @property {string} symbol - The symbol of the token.\r\n         * @property {number} decimals - The number of decimal places the token uses.\r\n         * @property {string|BigNumber|number} initialSupply - The total amount of token to be supplied initially.\r\n         */\n\n        /**\r\n         * Deploys the KIP-7 token contract to the Klaytn blockchain.\r\n         * A contract deployed using `caver.kct.kip7.deploy` is a fungible token that follows the KIP-7 standard.\r\n         * The KIP7 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\r\n         *\r\n         * By default, it returns a KIP7 instance when the deployment is finished.\r\n         * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n         *\r\n         * @example\r\n         * const tokenInfo = {\r\n         *     name: 'Test',\r\n         *     symbol: 'TST',\r\n         *     decimals: 10,\r\n         *     initialSupply: '1000000000000000000',\r\n         * }\r\n         * // Below example will use `caver.wallet`.\r\n         * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\r\n         *\r\n         * // Use sendOptions instead of deployer address.\r\n         * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n         * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\r\n         *\r\n         * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n         * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n         *\r\n         * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\r\n         * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-7 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\r\n         * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n         * @return {Promise<*>}\r\n         */\n\n      }, {\n        key: \"deploy\",\n        value: function deploy(tokenInfo, sendOptions, wallet) {\n          validateDeployParameterForKIP7(tokenInfo);\n          var name = tokenInfo.name,\n              symbol = tokenInfo.symbol,\n              decimals = tokenInfo.decimals,\n              initialSupply = tokenInfo.initialSupply;\n          var kip7 = new KIP7();\n          if (wallet !== undefined) kip7.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n          if (_.isString(sendOptions)) sendOptions = {\n            from: sendOptions,\n            gas: 4000000,\n            value: 0\n          };\n          sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000;\n          return kip7.deploy({\n            data: kip7ByteCode,\n            arguments: [name, symbol, decimals, initialSupply]\n          }).send(sendOptions);\n        }\n      }]);\n\n      return KIP7;\n    }(BaseKIP7);\n    /** @type {typeof KIP7} */\n\n\n    this.kip7 = KIP7;\n    /**\r\n     * The KIP17 wrapping class that helps you to use KIP17 class with common architecture features.\r\n     * This class can be used via `caver.kct.kip17`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\r\n     * @ignore\r\n     * @class\r\n     */\n\n    var KIP17 = /*#__PURE__*/function (_BaseKIP2) {\n      _inherits(KIP17, _BaseKIP2);\n\n      var _super2 = _createSuper(KIP17);\n\n      /**\r\n       * Wrapping class of the KIP17.\r\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\r\n       *\r\n       * @constructor\r\n       * @param {string} tokenAddress - The KIP-17 token contract address.\r\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n       */\n      function KIP17(tokenAddress, abi) {\n        var _this3;\n\n        _classCallCheck(this, KIP17);\n\n        _this3 = _super2.call(this, tokenAddress, abi);\n        core.packageInit(_assertThisInitialized(_this3), [_this]);\n\n        _this3.setWallet(args[0].wallet);\n\n        return _this3;\n      }\n\n      _createClass(KIP17, null, [{\n        key: \"create\",\n        value:\n        /**\r\n         * Creates an instance of KIP17.\r\n         *\r\n         * @example\r\n         * const kip17 = caver.kct.kip17.create('0x{address in hex}')\r\n         *\r\n         * @param {string} tokenAddress - The KIP-17 token contract address.\r\n         * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n         * @return {KIP17}\r\n         */\n        function create(tokenAddress, abi) {\n          return new KIP17(tokenAddress, abi);\n        }\n        /**\r\n         * An object that defines the parameters required to deploy the KIP-17 contract.\r\n         *\r\n         * @typedef {object} KIP17.KIP17DeployParams\r\n         * @property {string} name - The name of the token.\r\n         * @property {string} symbol - The symbol of the token.\r\n         */\n\n        /**\r\n         * Deploys the KIP-17 token contract to the Klaytn blockchain.\r\n         * A contract deployed using `caver.kct.kip17.deploy` is a non-fungible token that follows the KIP-17 standard.\r\n         * The KIP17 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\r\n         *\r\n         * By default, it returns a KIP17 instance when the deployment is finished.\r\n         * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n         *\r\n         * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\r\n         * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-17 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\r\n         * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n         * @return {Promise<*>}\r\n         */\n\n      }, {\n        key: \"deploy\",\n        value: function deploy(tokenInfo, sendOptions, wallet) {\n          validateDeployParameterForKIP17(tokenInfo);\n          var name = tokenInfo.name,\n              symbol = tokenInfo.symbol;\n          var kip17 = new KIP17();\n          if (wallet !== undefined) kip17.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n          if (_.isString(sendOptions)) sendOptions = {\n            from: sendOptions,\n            gas: 6600000,\n            value: 0\n          };\n          sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n          return kip17.deploy({\n            data: kip17ByteCode,\n            arguments: [name, symbol]\n          }).send(sendOptions);\n        }\n      }]);\n\n      return KIP17;\n    }(BaseKIP17);\n    /** @type {typeof KIP17} */\n\n\n    this.kip17 = KIP17;\n    /** @type {typeof KIP37} */\n\n    this.kip37 = KIP37;\n    this.kip37.wallet = args[0].wallet;\n    this.kip37._requestManager = this._requestManager;\n    this.kip37.currentProvider = this._requestManager.provider;\n    /** @type {typeof KIP13} */\n\n    this.kip13 = KIP13;\n    this.kip13._requestManager = this._requestManager;\n    this.kip13.currentProvider = this._requestManager.provider;\n  }\n\n  return _createClass(KCT);\n}();\n\nmodule.exports = KCT;","map":{"version":3,"names":["_","require","BaseKIP7","BaseKIP17","KIP37","KIP13","core","validateDeployParameterForKIP7","validateDeployParameterForKIP17","kip7ByteCode","kip17ByteCode","KCT","args","_this","packageInit","setRequestManager","manager","kip7","_requestManager","currentProvider","_provider","kip17","kip37","setProvider","apply","arguments","KIP7","tokenAddress","abi","setWallet","wallet","tokenInfo","sendOptions","name","symbol","decimals","initialSupply","undefined","isString","from","gas","value","deploy","data","send","KIP17","provider","kip13","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-kct/src/index.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nconst _ = require('lodash')\r\nconst BaseKIP7 = require('./kip7')\r\nconst BaseKIP17 = require('./kip17')\r\nconst KIP37 = require('./kip37')\r\nconst KIP13 = require('./kip13')\r\nconst core = require('../../caver-core')\r\nconst { validateDeployParameterForKIP7, validateDeployParameterForKIP17, kip7ByteCode, kip17ByteCode } = require('./kctHelper')\r\n\r\n/**\r\n * A class that manages KCT supported by caver.\r\n * @hideconstructor\r\n * @class\r\n */\r\nclass KCT {\r\n    constructor(...args) {\r\n        const _this = this\r\n\r\n        // sets _requestmanager\r\n        core.packageInit(this, args)\r\n\r\n        // overwrite package setRequestManager\r\n        const setRequestManager = this.setRequestManager\r\n        this.setRequestManager = function(manager) {\r\n            setRequestManager(manager)\r\n\r\n            _this.kip7._requestManager = _this._requestManager\r\n            _this.kip7.currentProvider = _this._provider\r\n            _this.kip17._requestManager = _this._requestManager\r\n            _this.kip17.currentProvider = _this._provider\r\n            _this.kip37._requestManager = _this._requestManager\r\n            _this.kip37.currentProvider = _this._provider\r\n\r\n            return true\r\n        }\r\n\r\n        // overwrite setProvider\r\n        const setProvider = this.setProvider\r\n        this.setProvider = function() {\r\n            setProvider.apply(_this, arguments)\r\n            _this.setRequestManager(_this._requestManager)\r\n        }\r\n\r\n        /**\r\n         * The KIP7 wrapping class that helps you to use KIP7 class with common architecture features.\r\n         * This class can be used via `caver.kct.kip7`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\r\n         * @ignore\r\n         * @class\r\n         */\r\n        class KIP7 extends BaseKIP7 {\r\n            /**\r\n             * Creates a new KIP7 instance with its bound methods and events.\r\n             *\r\n             * @example\r\n             * const kip7 = caver.kct.kip7.create('0x{address in hex}')\r\n             *\r\n             * @param {string} tokenAddress - The KIP-7 token contract address.\r\n             * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\r\n             * @return {KIP7}\r\n             */\r\n            static create(tokenAddress, abi) {\r\n                return new KIP7(tokenAddress, abi)\r\n            }\r\n\r\n            /**\r\n             * An object that defines the parameters required to deploy the KIP-7 contract.\r\n             *\r\n             * @typedef {object} KIP7.KIP7DeployParams\r\n             * @property {string} name - The name of the token.\r\n             * @property {string} symbol - The symbol of the token.\r\n             * @property {number} decimals - The number of decimal places the token uses.\r\n             * @property {string|BigNumber|number} initialSupply - The total amount of token to be supplied initially.\r\n             */\r\n            /**\r\n             * Deploys the KIP-7 token contract to the Klaytn blockchain.\r\n             * A contract deployed using `caver.kct.kip7.deploy` is a fungible token that follows the KIP-7 standard.\r\n             * The KIP7 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\r\n             *\r\n             * By default, it returns a KIP7 instance when the deployment is finished.\r\n             * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n             *\r\n             * @example\r\n             * const tokenInfo = {\r\n             *     name: 'Test',\r\n             *     symbol: 'TST',\r\n             *     decimals: 10,\r\n             *     initialSupply: '1000000000000000000',\r\n             * }\r\n             * // Below example will use `caver.wallet`.\r\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\r\n             *\r\n             * // Use sendOptions instead of deployer address.\r\n             * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\r\n             *\r\n             * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n             *\r\n             * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\r\n             * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-7 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\r\n             * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n             * @return {Promise<*>}\r\n             */\r\n            static deploy(tokenInfo, sendOptions, wallet) {\r\n                validateDeployParameterForKIP7(tokenInfo)\r\n\r\n                const { name, symbol, decimals, initialSupply } = tokenInfo\r\n                const kip7 = new KIP7()\r\n                if (wallet !== undefined) kip7.setWallet(wallet)\r\n\r\n                // If sendOptions is string type, sendOptions means deployer's address\r\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 4000000, value: 0 }\r\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000\r\n\r\n                return kip7\r\n                    .deploy({\r\n                        data: kip7ByteCode,\r\n                        arguments: [name, symbol, decimals, initialSupply],\r\n                    })\r\n                    .send(sendOptions)\r\n            }\r\n\r\n            /**\r\n             * Wrapping class of the KIP7.\r\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\r\n             *\r\n             * @constructor\r\n             * @param {string} tokenAddress - The KIP-7 token contract address.\r\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\r\n             */\r\n            constructor(tokenAddress, abi) {\r\n                super(tokenAddress, abi)\r\n                core.packageInit(this, [_this])\r\n                this.setWallet(args[0].wallet)\r\n            }\r\n        }\r\n        /** @type {typeof KIP7} */\r\n        this.kip7 = KIP7\r\n\r\n        /**\r\n         * The KIP17 wrapping class that helps you to use KIP17 class with common architecture features.\r\n         * This class can be used via `caver.kct.kip17`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\r\n         * @ignore\r\n         * @class\r\n         */\r\n        class KIP17 extends BaseKIP17 {\r\n            /**\r\n             * Creates an instance of KIP17.\r\n             *\r\n             * @example\r\n             * const kip17 = caver.kct.kip17.create('0x{address in hex}')\r\n             *\r\n             * @param {string} tokenAddress - The KIP-17 token contract address.\r\n             * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n             * @return {KIP17}\r\n             */\r\n            static create(tokenAddress, abi) {\r\n                return new KIP17(tokenAddress, abi)\r\n            }\r\n\r\n            /**\r\n             * An object that defines the parameters required to deploy the KIP-17 contract.\r\n             *\r\n             * @typedef {object} KIP17.KIP17DeployParams\r\n             * @property {string} name - The name of the token.\r\n             * @property {string} symbol - The symbol of the token.\r\n             */\r\n            /**\r\n             * Deploys the KIP-17 token contract to the Klaytn blockchain.\r\n             * A contract deployed using `caver.kct.kip17.deploy` is a non-fungible token that follows the KIP-17 standard.\r\n             * The KIP17 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\r\n             *\r\n             * By default, it returns a KIP17 instance when the deployment is finished.\r\n             * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n             *\r\n             * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\r\n             * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-17 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\r\n             * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\r\n             * @return {Promise<*>}\r\n             */\r\n            static deploy(tokenInfo, sendOptions, wallet) {\r\n                validateDeployParameterForKIP17(tokenInfo)\r\n\r\n                const { name, symbol } = tokenInfo\r\n                const kip17 = new KIP17()\r\n                if (wallet !== undefined) kip17.setWallet(wallet)\r\n\r\n                // If sendOptions is string type, sendOptions means deployer's address\r\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 6600000, value: 0 }\r\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000\r\n\r\n                return kip17\r\n                    .deploy({\r\n                        data: kip17ByteCode,\r\n                        arguments: [name, symbol],\r\n                    })\r\n                    .send(sendOptions)\r\n            }\r\n\r\n            /**\r\n             * Wrapping class of the KIP17.\r\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\r\n             *\r\n             * @constructor\r\n             * @param {string} tokenAddress - The KIP-17 token contract address.\r\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n             */\r\n            constructor(tokenAddress, abi) {\r\n                super(tokenAddress, abi)\r\n                core.packageInit(this, [_this])\r\n                this.setWallet(args[0].wallet)\r\n            }\r\n        }\r\n        /** @type {typeof KIP17} */\r\n        this.kip17 = KIP17\r\n\r\n        /** @type {typeof KIP37} */\r\n        this.kip37 = KIP37\r\n        this.kip37.wallet = args[0].wallet\r\n        this.kip37._requestManager = this._requestManager\r\n        this.kip37.currentProvider = this._requestManager.provider\r\n\r\n        /** @type {typeof KIP13} */\r\n        this.kip13 = KIP13\r\n        this.kip13._requestManager = this._requestManager\r\n        this.kip13.currentProvider = this._requestManager.provider\r\n    }\r\n}\r\n\r\nmodule.exports = KCT\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}