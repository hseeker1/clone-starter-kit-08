{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar scrypt = require('scrypt-js');\n\nvar uuid = require('uuid');\n\nvar cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto');\n\nvar utils = require('../../../caver-utils');\n\nvar PrivateKey = require('./privateKey');\n/**\r\n * The key role string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\r\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\r\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\r\n *\r\n * @alias KeyringFactory.role\r\n * @type {Map<string|number:string>}\r\n */\n\n\nvar KEY_ROLE = {\n  roleTransactionKey: 0,\n  0: 'roleTransactionKey',\n  roleAccountUpdateKey: 1,\n  1: 'roleAccountUpdateKey',\n  roleFeePayerKey: 2,\n  2: 'roleFeePayerKey',\n  roleLast: 3\n};\nvar MAXIMUM_KEY_NUM = 10;\n\nvar isMultipleKeysFormat = function isMultipleKeysFormat(keys) {\n  if (!_.isArray(keys)) return false;\n  return keys.every(function (key) {\n    return _.isString(key);\n  });\n};\n\nvar isRoleBasedKeysFormat = function isRoleBasedKeysFormat(roledBasedKeyArray) {\n  if (!_.isArray(roledBasedKeyArray)) return false;\n  if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false;\n  return roledBasedKeyArray.every(function (arr) {\n    return _.isArray(arr);\n  });\n};\n\nvar validateForSigning = function validateForSigning(hash, chainId) {\n  if (!utils.isValidHashStrict(hash)) throw new Error(\"Invalid transaction hash: \".concat(hash));\n\n  if (chainId === undefined) {\n    throw new Error(\"chainId should be defined to sign.\");\n  }\n};\n\nvar validateIndexWithKeys = function validateIndexWithKeys(index, keyLength) {\n  if (!_.isNumber(index)) throw new Error(\"Invalid type of index(\".concat(index, \"): index should be number type.\"));\n  if (index < 0) throw new Error(\"Invalid index(\".concat(index, \"): index cannot be negative.\"));\n  if (index >= keyLength) throw new Error(\"Invalid index(\".concat(index, \"): index must be less than the length of keys(\").concat(keyLength, \").\"));\n};\n\nvar decryptKey = function decryptKey(encryptedArray, password) {\n  if (!encryptedArray || encryptedArray.length === 0) return undefined;\n  var decryptedArray = [];\n\n  var _iterator = _createForOfIteratorHelper(encryptedArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var encrypted = _step.value;\n      var derivedKey = void 0;\n      var kdfparams = void 0;\n      /**\r\n       * Supported kdf modules are the following:\r\n       * 1) pbkdf2\r\n       * 2) scrypt\r\n       */\n\n      if (encrypted.kdf === 'scrypt') {\n        kdfparams = encrypted.kdfparams; // FIXME: support progress reporting callback\n\n        derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n      } else if (encrypted.kdf === 'pbkdf2') {\n        kdfparams = encrypted.kdfparams;\n\n        if (kdfparams.prf !== 'hmac-sha256') {\n          throw new Error('Unsupported parameters to PBKDF2');\n        }\n\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n      } else {\n        throw new Error('Unsupported key derivation scheme');\n      }\n\n      var ciphertext = Buffer.from(encrypted.ciphertext, 'hex');\n      var mac = utils.sha3(Buffer.from([].concat(_toConsumableArray(derivedKey.slice(16, 32)), _toConsumableArray(ciphertext)))).replace('0x', '');\n\n      if (mac !== encrypted.mac) {\n        throw new Error('Key derivation failed - possibly wrong password');\n      }\n\n      var decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'));\n      decryptedArray.push(\"0x\".concat(Buffer.from([].concat(_toConsumableArray(decipher.update(ciphertext)), _toConsumableArray(decipher.final()))).toString('hex')));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return decryptedArray;\n};\n\nvar encryptKey = function encryptKey(privateKey, password, options) {\n  var encryptedArray = [];\n  if (!privateKey) return encryptedArray;\n  var privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey];\n\n  for (var i = 0; i < privateKeyArray.length; i++) {\n    var salt = options.salt || cryp.randomBytes(32);\n    var iv = options.iv || cryp.randomBytes(16);\n    var derivedKey = void 0;\n    var kdf = options.kdf || 'scrypt';\n    var kdfparams = {\n      dklen: options.dklen || 32,\n      salt: salt.toString('hex')\n    };\n    /**\r\n     * Supported kdf modules are the following:\r\n     * 1) pbkdf2\r\n     * 2) scrypt - default\r\n     */\n\n    if (kdf === 'pbkdf2') {\n      kdfparams.c = options.c || 262144;\n      kdfparams.prf = 'hmac-sha256';\n      derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n      // FIXME: support progress reporting callback\n      kdfparams.n = options.n || 4096; // 2048 4096 8192 16384\n\n      kdfparams.r = options.r || 8;\n      kdfparams.p = options.p || 1;\n      derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n      throw new Error('Unsupported kdf');\n    }\n\n    var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n\n    if (!cipher) {\n      throw new Error('Unsupported cipher');\n    }\n\n    var prv = privateKeyArray[i];\n    if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey;\n    var ciphertext = Buffer.from([].concat(_toConsumableArray(cipher.update(Buffer.from(prv.replace('0x', ''), 'hex'))), _toConsumableArray(cipher.final())));\n    var mac = utils.sha3(Buffer.from([].concat(_toConsumableArray(derivedKey.slice(16, 32)), _toConsumableArray(ciphertext)))).replace('0x', '');\n    encryptedArray.push({\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: options.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    });\n  }\n\n  return encryptedArray;\n};\n\nvar formatEncrypted = function formatEncrypted(version, address, keyringOrCrypto, options) {\n  var keystore = {\n    version: version,\n    id: uuid.v4({\n      random: options.uuid || cryp.randomBytes(16)\n    }),\n    address: address.toLowerCase()\n  };\n\n  if (version === 3) {\n    keystore.crypto = keyringOrCrypto;\n  } else if (version === 4) {\n    keystore.keyring = keyringOrCrypto;\n  } else {\n    throw new Error(\"Unsupported version of keystore\");\n  }\n\n  return keystore;\n};\n\nmodule.exports = {\n  KEY_ROLE: KEY_ROLE,\n  MAXIMUM_KEY_NUM: MAXIMUM_KEY_NUM,\n  isMultipleKeysFormat: isMultipleKeysFormat,\n  isRoleBasedKeysFormat: isRoleBasedKeysFormat,\n  validateForSigning: validateForSigning,\n  validateIndexWithKeys: validateIndexWithKeys,\n  decryptKey: decryptKey,\n  encryptKey: encryptKey,\n  formatEncrypted: formatEncrypted\n};","map":{"version":3,"names":["_","require","scrypt","uuid","cryp","global","utils","PrivateKey","KEY_ROLE","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleLast","MAXIMUM_KEY_NUM","isMultipleKeysFormat","keys","isArray","every","key","isString","isRoleBasedKeysFormat","roledBasedKeyArray","length","arr","validateForSigning","hash","chainId","isValidHashStrict","Error","undefined","validateIndexWithKeys","index","keyLength","isNumber","decryptKey","encryptedArray","password","decryptedArray","encrypted","derivedKey","kdfparams","kdf","syncScrypt","Buffer","from","salt","n","r","p","dklen","prf","pbkdf2Sync","c","ciphertext","mac","sha3","slice","replace","decipher","createDecipheriv","cipher","cipherparams","iv","push","update","final","toString","encryptKey","privateKey","options","privateKeyArray","i","randomBytes","createCipheriv","prv","formatEncrypted","version","address","keyringOrCrypto","keystore","id","v4","random","toLowerCase","crypto","keyring","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringHelper.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst scrypt = require('scrypt-js')\r\nconst uuid = require('uuid')\r\nconst cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto')\r\nconst utils = require('../../../caver-utils')\r\nconst PrivateKey = require('./privateKey')\r\n\r\n/**\r\n * The key role string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\r\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\r\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\r\n *\r\n * @alias KeyringFactory.role\r\n * @type {Map<string|number:string>}\r\n */\r\nconst KEY_ROLE = {\r\n    roleTransactionKey: 0,\r\n    0: 'roleTransactionKey',\r\n    roleAccountUpdateKey: 1,\r\n    1: 'roleAccountUpdateKey',\r\n    roleFeePayerKey: 2,\r\n    2: 'roleFeePayerKey',\r\n    roleLast: 3,\r\n}\r\n\r\nconst MAXIMUM_KEY_NUM = 10\r\n\r\nconst isMultipleKeysFormat = keys => {\r\n    if (!_.isArray(keys)) return false\r\n    return keys.every(key => {\r\n        return _.isString(key)\r\n    })\r\n}\r\n\r\nconst isRoleBasedKeysFormat = roledBasedKeyArray => {\r\n    if (!_.isArray(roledBasedKeyArray)) return false\r\n    if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false\r\n\r\n    return roledBasedKeyArray.every(arr => {\r\n        return _.isArray(arr)\r\n    })\r\n}\r\n\r\nconst validateForSigning = (hash, chainId) => {\r\n    if (!utils.isValidHashStrict(hash)) throw new Error(`Invalid transaction hash: ${hash}`)\r\n\r\n    if (chainId === undefined) {\r\n        throw new Error(`chainId should be defined to sign.`)\r\n    }\r\n}\r\n\r\nconst validateIndexWithKeys = (index, keyLength) => {\r\n    if (!_.isNumber(index)) throw new Error(`Invalid type of index(${index}): index should be number type.`)\r\n    if (index < 0) throw new Error(`Invalid index(${index}): index cannot be negative.`)\r\n    if (index >= keyLength) throw new Error(`Invalid index(${index}): index must be less than the length of keys(${keyLength}).`)\r\n}\r\n\r\nconst decryptKey = (encryptedArray, password) => {\r\n    if (!encryptedArray || encryptedArray.length === 0) return undefined\r\n\r\n    const decryptedArray = []\r\n    for (const encrypted of encryptedArray) {\r\n        let derivedKey\r\n        let kdfparams\r\n        /**\r\n         * Supported kdf modules are the following:\r\n         * 1) pbkdf2\r\n         * 2) scrypt\r\n         */\r\n        if (encrypted.kdf === 'scrypt') {\r\n            kdfparams = encrypted.kdfparams\r\n\r\n            // FIXME: support progress reporting callback\r\n            derivedKey = scrypt.syncScrypt(\r\n                Buffer.from(password),\r\n                Buffer.from(kdfparams.salt, 'hex'),\r\n                kdfparams.n,\r\n                kdfparams.r,\r\n                kdfparams.p,\r\n                kdfparams.dklen\r\n            )\r\n        } else if (encrypted.kdf === 'pbkdf2') {\r\n            kdfparams = encrypted.kdfparams\r\n\r\n            if (kdfparams.prf !== 'hmac-sha256') {\r\n                throw new Error('Unsupported parameters to PBKDF2')\r\n            }\r\n\r\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\r\n        } else {\r\n            throw new Error('Unsupported key derivation scheme')\r\n        }\r\n\r\n        const ciphertext = Buffer.from(encrypted.ciphertext, 'hex')\r\n\r\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\r\n        if (mac !== encrypted.mac) {\r\n            throw new Error('Key derivation failed - possibly wrong password')\r\n        }\r\n\r\n        const decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'))\r\n        decryptedArray.push(`0x${Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex')}`)\r\n    }\r\n    return decryptedArray\r\n}\r\n\r\nconst encryptKey = (privateKey, password, options) => {\r\n    const encryptedArray = []\r\n\r\n    if (!privateKey) return encryptedArray\r\n\r\n    const privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey]\r\n\r\n    for (let i = 0; i < privateKeyArray.length; i++) {\r\n        const salt = options.salt || cryp.randomBytes(32)\r\n        const iv = options.iv || cryp.randomBytes(16)\r\n\r\n        let derivedKey\r\n        const kdf = options.kdf || 'scrypt'\r\n        const kdfparams = {\r\n            dklen: options.dklen || 32,\r\n            salt: salt.toString('hex'),\r\n        }\r\n\r\n        /**\r\n         * Supported kdf modules are the following:\r\n         * 1) pbkdf2\r\n         * 2) scrypt - default\r\n         */\r\n        if (kdf === 'pbkdf2') {\r\n            kdfparams.c = options.c || 262144\r\n            kdfparams.prf = 'hmac-sha256'\r\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\r\n        } else if (kdf === 'scrypt') {\r\n            // FIXME: support progress reporting callback\r\n            kdfparams.n = options.n || 4096 // 2048 4096 8192 16384\r\n            kdfparams.r = options.r || 8\r\n            kdfparams.p = options.p || 1\r\n            derivedKey = scrypt.syncScrypt(\r\n                Buffer.from(password),\r\n                Buffer.from(kdfparams.salt, 'hex'),\r\n                kdfparams.n,\r\n                kdfparams.r,\r\n                kdfparams.p,\r\n                kdfparams.dklen\r\n            )\r\n        } else {\r\n            throw new Error('Unsupported kdf')\r\n        }\r\n\r\n        const cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv)\r\n        if (!cipher) {\r\n            throw new Error('Unsupported cipher')\r\n        }\r\n\r\n        let prv = privateKeyArray[i]\r\n        if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey\r\n        const ciphertext = Buffer.from([...cipher.update(Buffer.from(prv.replace('0x', ''), 'hex')), ...cipher.final()])\r\n\r\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\r\n\r\n        encryptedArray.push({\r\n            ciphertext: ciphertext.toString('hex'),\r\n            cipherparams: {\r\n                iv: iv.toString('hex'),\r\n            },\r\n            cipher: options.cipher || 'aes-128-ctr',\r\n            kdf,\r\n            kdfparams,\r\n            mac: mac.toString('hex'),\r\n        })\r\n    }\r\n\r\n    return encryptedArray\r\n}\r\n\r\nconst formatEncrypted = (version, address, keyringOrCrypto, options) => {\r\n    const keystore = {\r\n        version,\r\n        id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),\r\n        address: address.toLowerCase(),\r\n    }\r\n\r\n    if (version === 3) {\r\n        keystore.crypto = keyringOrCrypto\r\n    } else if (version === 4) {\r\n        keystore.keyring = keyringOrCrypto\r\n    } else {\r\n        throw new Error(`Unsupported version of keystore`)\r\n    }\r\n\r\n    return keystore\r\n}\r\n\r\nmodule.exports = {\r\n    KEY_ROLE,\r\n    MAXIMUM_KEY_NUM,\r\n    isMultipleKeysFormat,\r\n    isRoleBasedKeysFormat,\r\n    validateForSigning,\r\n    validateIndexWithKeys,\r\n    decryptKey,\r\n    encryptKey,\r\n    formatEncrypted,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}