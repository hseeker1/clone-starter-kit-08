{"ast":null,"code":"'use strict';\n\nvar varint = require('varint');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = {\n  numberToUint8Array: numberToUint8Array,\n  uint8ArrayToNumber: uint8ArrayToNumber,\n  varintUint8ArrayEncode: varintUint8ArrayEncode,\n  varintEncode: varintEncode\n};\n\nfunction uint8ArrayToNumber(buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16);\n}\n\nfunction numberToUint8Array(num) {\n  var hexString = num.toString(16);\n\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString;\n  }\n\n  return uint8ArrayFromString(hexString, 'base16');\n}\n\nfunction varintUint8ArrayEncode(input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)));\n}\n\nfunction varintEncode(num) {\n  return Uint8Array.from(varint.encode(num));\n}","map":{"version":3,"names":["varint","require","uint8ArrayToString","uint8ArrayFromString","module","exports","numberToUint8Array","uint8ArrayToNumber","varintUint8ArrayEncode","varintEncode","buf","parseInt","num","hexString","toString","length","input","Uint8Array","from","encode"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-raw/node_modules/multicodec/src/util.js"],"sourcesContent":["'use strict'\r\n\r\nconst varint = require('varint')\r\nconst uint8ArrayToString = require('uint8arrays/to-string')\r\nconst uint8ArrayFromString = require('uint8arrays/from-string')\r\n\r\nmodule.exports = {\r\n  numberToUint8Array,\r\n  uint8ArrayToNumber,\r\n  varintUint8ArrayEncode,\r\n  varintEncode\r\n}\r\n\r\nfunction uint8ArrayToNumber (buf) {\r\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\r\n}\r\n\r\nfunction numberToUint8Array (num) {\r\n  let hexString = num.toString(16)\r\n  if (hexString.length % 2 === 1) {\r\n    hexString = '0' + hexString\r\n  }\r\n  return uint8ArrayFromString(hexString, 'base16')\r\n}\r\n\r\nfunction varintUint8ArrayEncode (input) {\r\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\r\n}\r\n\r\nfunction varintEncode (num) {\r\n  return Uint8Array.from(varint.encode(num))\r\n}\r\n"],"mappings":"AAAA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAME,oBAAoB,GAAGF,OAAO,CAAC,yBAAD,CAApC;;AAEAG,MAAM,CAACC,OAAP,GAAiB;EACfC,kBAAkB,EAAlBA,kBADe;EAEfC,kBAAkB,EAAlBA,kBAFe;EAGfC,sBAAsB,EAAtBA,sBAHe;EAIfC,YAAY,EAAZA;AAJe,CAAjB;;AAOA,SAASF,kBAAT,CAA6BG,GAA7B,EAAkC;EAChC,OAAOC,QAAQ,CAACT,kBAAkB,CAACQ,GAAD,EAAM,QAAN,CAAnB,EAAoC,EAApC,CAAf;AACD;;AAED,SAASJ,kBAAT,CAA6BM,GAA7B,EAAkC;EAChC,IAAIC,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAAhB;;EACA,IAAID,SAAS,CAACE,MAAV,GAAmB,CAAnB,KAAyB,CAA7B,EAAgC;IAC9BF,SAAS,GAAG,MAAMA,SAAlB;EACD;;EACD,OAAOV,oBAAoB,CAACU,SAAD,EAAY,QAAZ,CAA3B;AACD;;AAED,SAASL,sBAAT,CAAiCQ,KAAjC,EAAwC;EACtC,OAAOC,UAAU,CAACC,IAAX,CAAgBlB,MAAM,CAACmB,MAAP,CAAcZ,kBAAkB,CAACS,KAAD,CAAhC,CAAhB,CAAP;AACD;;AAED,SAASP,YAAT,CAAuBG,GAAvB,EAA4B;EAC1B,OAAOK,UAAU,CAACC,IAAX,CAAgBlB,MAAM,CAACmB,MAAP,CAAcP,GAAd,CAAhB,CAAP;AACD"},"metadata":{},"sourceType":"script"}