{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar utils = require('../../../caver-utils/src/utils');\n\nvar emptySigArray = ['0x01', '0x', '0x'];\n/**\r\n * Representing a SignatureData class that includes ECDSA signature data string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n *\r\n * @class\r\n */\n\nvar SignatureData = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * creates a SignatureData.\r\n   *\r\n   * @example\r\n   * const signature = new caver.wallet.keyring.signatureData([\r\n   *     '0x0fea',\r\n   *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\r\n   *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\r\n   * ])\r\n   *\r\n   * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\r\n   */\n  function SignatureData(signature) {\n    _classCallCheck(this, SignatureData);\n\n    if (!signature) signature = emptySigArray;\n\n    if (signature instanceof SignatureData) {\n      this.v = signature.v;\n      this.r = signature.r;\n      this.s = signature.s;\n    }\n\n    if (!_.isArray(signature)) signature = utils.resolveSignature(signature);\n\n    var _signature = signature,\n        _signature2 = _slicedToArray(_signature, 3),\n        v = _signature2[0],\n        r = _signature2[1],\n        s = _signature2[2];\n\n    this.v = v;\n    this.r = r;\n    this.s = s;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(SignatureData, [{\n    key: \"v\",\n    get: function get() {\n      return this._v;\n    },\n    set: function set(v) {\n      v = v.slice(0, 2) === '0x' ? v : \"0x\".concat(v); // If v of Signature is 0, '0x' is returned when RLP decoded.\n      // However, the Bytes.toNumber function used for recover public key cannot convert '0x' to 0,\n      // so to handle this case, v is converted to '0x0' in case of '0x' (makeEven converts '0x0' to '0x00').\n\n      v = v === '0x' ? '0x0' : v;\n      this._v = utils.makeEven(v);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"V\",\n    get: function get() {\n      return this.v;\n    },\n    set: function set(v) {\n      this.v = utils.makeEven(v);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"r\",\n    get: function get() {\n      return this._r;\n    },\n    set: function set(r) {\n      r = r.slice(0, 2) === '0x' ? r : \"0x\".concat(r);\n      this._r = utils.makeEven(r);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"R\",\n    get: function get() {\n      return this.r;\n    },\n    set: function set(r) {\n      this.r = r;\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"s\",\n    get: function get() {\n      return this._s;\n    },\n    set: function set(s) {\n      s = s.slice(0, 2) === '0x' ? s : \"0x\".concat(s);\n      this._s = utils.makeEven(s);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"S\",\n    get: function get() {\n      return this.s;\n    },\n    set: function set(s) {\n      this.s = s;\n    }\n    /**\r\n     * Returns `true` if signature is same with emptySig.\r\n     *\r\n     * @example\r\n     * const isEmpty = signatureData.isEmpty()\r\n     *\r\n     * @return {boolean} `ture` means the signatureData is empty.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true;\n      return false;\n    }\n    /**\r\n     * Convert to array and return.\r\n     *\r\n     * @example\r\n     * const arrayFormat = signatureData.encode()\r\n     *\r\n     * @return {Array.<string>} An array format of signature.\r\n     */\n\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      return [utils.makeEven(utils.trimLeadingZero(this.v)), this.r, this.s];\n    }\n    /**\r\n     * Converts to combined string.\r\n     *\r\n     * @example\r\n     * const sig = signatureData.toString()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.v + this.r + this.s;\n    }\n    /**\r\n     * Checks that the signature data is the same.\r\n     *\r\n     * @example\r\n     * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\r\n     *\r\n     * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(sig) {\n      sig = new SignatureData(sig);\n      return this.toString() === sig.toString();\n    }\n  }]);\n\n  return SignatureData;\n}();\n/**\r\n * @type {SignatureData}\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData.emtpySig\r\n */\n\n\nSignatureData.emtpySig = new SignatureData(emptySigArray);\nmodule.exports = SignatureData;","map":{"version":3,"names":["_","require","utils","emptySigArray","SignatureData","signature","v","r","s","isArray","resolveSignature","_v","slice","makeEven","_r","_s","trimLeadingZero","sig","toString","emtpySig","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-wallet/src/keyring/signatureData.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../../caver-utils/src/utils')\r\n\r\nconst emptySigArray = ['0x01', '0x', '0x']\r\n\r\n/**\r\n * Representing a SignatureData class that includes ECDSA signature data string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n *\r\n * @class\r\n */\r\nclass SignatureData {\r\n    /**\r\n     * creates a SignatureData.\r\n     *\r\n     * @example\r\n     * const signature = new caver.wallet.keyring.signatureData([\r\n     *     '0x0fea',\r\n     *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\r\n     *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\r\n     * ])\r\n     *\r\n     * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\r\n     */\r\n    constructor(signature) {\r\n        if (!signature) signature = emptySigArray\r\n        if (signature instanceof SignatureData) {\r\n            this.v = signature.v\r\n            this.r = signature.r\r\n            this.s = signature.s\r\n        }\r\n        if (!_.isArray(signature)) signature = utils.resolveSignature(signature)\r\n\r\n        const [v, r, s] = signature\r\n        this.v = v\r\n        this.r = r\r\n        this.s = s\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get v() {\r\n        return this._v\r\n    }\r\n\r\n    set v(v) {\r\n        v = v.slice(0, 2) === '0x' ? v : `0x${v}`\r\n        // If v of Signature is 0, '0x' is returned when RLP decoded.\r\n        // However, the Bytes.toNumber function used for recover public key cannot convert '0x' to 0,\r\n        // so to handle this case, v is converted to '0x0' in case of '0x' (makeEven converts '0x0' to '0x00').\r\n        v = v === '0x' ? '0x0' : v\r\n        this._v = utils.makeEven(v)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get V() {\r\n        return this.v\r\n    }\r\n\r\n    set V(v) {\r\n        this.v = utils.makeEven(v)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get r() {\r\n        return this._r\r\n    }\r\n\r\n    set r(r) {\r\n        r = r.slice(0, 2) === '0x' ? r : `0x${r}`\r\n        this._r = utils.makeEven(r)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get R() {\r\n        return this.r\r\n    }\r\n\r\n    set R(r) {\r\n        this.r = r\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get s() {\r\n        return this._s\r\n    }\r\n\r\n    set s(s) {\r\n        s = s.slice(0, 2) === '0x' ? s : `0x${s}`\r\n        this._s = utils.makeEven(s)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get S() {\r\n        return this.s\r\n    }\r\n\r\n    set S(s) {\r\n        this.s = s\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if signature is same with emptySig.\r\n     *\r\n     * @example\r\n     * const isEmpty = signatureData.isEmpty()\r\n     *\r\n     * @return {boolean} `ture` means the signatureData is empty.\r\n     */\r\n    isEmpty() {\r\n        if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Convert to array and return.\r\n     *\r\n     * @example\r\n     * const arrayFormat = signatureData.encode()\r\n     *\r\n     * @return {Array.<string>} An array format of signature.\r\n     */\r\n    encode() {\r\n        return [utils.makeEven(utils.trimLeadingZero(this.v)), this.r, this.s]\r\n    }\r\n\r\n    /**\r\n     * Converts to combined string.\r\n     *\r\n     * @example\r\n     * const sig = signatureData.toString()\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.v + this.r + this.s\r\n    }\r\n\r\n    /**\r\n     * Checks that the signature data is the same.\r\n     *\r\n     * @example\r\n     * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\r\n     *\r\n     * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\r\n     * @return {boolean}\r\n     */\r\n    isEqual(sig) {\r\n        sig = new SignatureData(sig)\r\n        return this.toString() === sig.toString()\r\n    }\r\n}\r\n\r\n/**\r\n * @type {SignatureData}\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData.emtpySig\r\n */\r\nSignatureData.emtpySig = new SignatureData(emptySigArray)\r\n\r\nmodule.exports = SignatureData\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}