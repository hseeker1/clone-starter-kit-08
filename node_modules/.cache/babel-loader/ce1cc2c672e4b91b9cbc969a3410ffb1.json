{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n/**\r\n * Representing an options for AccountKeyWeightedMultiSig.\r\n * This class will define threshold and weights.\r\n * @class\r\n */\n\n\nvar WeightedMultiSigOptions = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Creates an instance of WeightedMultiSigOptions.\r\n   *\r\n   * @example\r\n   * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n   *\r\n   * @param {number} threshold - a threshold\r\n   * @param {Array.<number>} weights - an array of weight of key\r\n   */\n  function WeightedMultiSigOptions(threshold, weights) {\n    _classCallCheck(this, WeightedMultiSigOptions);\n\n    if (threshold !== undefined && weights === undefined || threshold === undefined && weights !== undefined) {\n      throw new Error(\"For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.\");\n    }\n\n    if (threshold !== undefined) this.threshold = threshold;\n    if (weights !== undefined) this.weights = weights;\n  }\n  /**\r\n   * @type {number}\r\n   */\n\n\n  _createClass(WeightedMultiSigOptions, [{\n    key: \"threshold\",\n    get: function get() {\n      return this._threshold;\n    },\n    set: function set(th) {\n      if (!_.isNumber(th)) throw new Error(\"The threshold must be number type.\");\n      if (!validateWeightedSum(th, this.weights)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._threshold = th;\n    }\n    /**\r\n     * @type {Array.<number>}\r\n     */\n\n  }, {\n    key: \"weights\",\n    get: function get() {\n      return this._weights;\n    },\n    set: function set(weightArr) {\n      if (!_.isArray(weightArr)) throw new Error(\"weight should be an array that stores the weight of each public key.\");\n\n      var _iterator = _createForOfIteratorHelper(weightArr),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var w = _step.value;\n          if (!_.isNumber(w)) throw new Error(\"The weight of each key must be number type.\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!validateWeightedSum(this.threshold, weightArr)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._weights = weightArr;\n    }\n    /**\r\n     * Returns 'true' if WeightedMultiSigOptions is empty.\r\n     *\r\n     * @example\r\n     * const isEmpty = options.isEmpty()\r\n     *\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.threshold === undefined && this.weights === undefined;\n    }\n  }], [{\n    key: \"fromObject\",\n    value:\n    /**\r\n     * Creates an instance of WeightedMultiSigOptions.\r\n     *\r\n     * @example\r\n     * const options = caver.account.weightedMultiSigOptions.fromObject({ threshold: 2, weights: [1, 1] })\r\n     *\r\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\r\n     * @return {WeightedMultiSigOptions}\r\n     */\n    function fromObject(options) {\n      // To support the previous options format(threshold and weight)\n      if (options.weight && !options.weights) {\n        options.weights = options.weight;\n        delete options.weight;\n      } // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n\n\n      if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions();\n      if (options.threshold === undefined || options.weights === undefined) throw new Error(\"Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.\");\n      return new WeightedMultiSigOptions(options.threshold, options.weights);\n    }\n  }]);\n\n  return WeightedMultiSigOptions;\n}();\n/**\r\n * validates threshold and sum of weights.\r\n * @ignore\r\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n * @param {Array.<number>} weights - An array of weights.\r\n * @return {Boolean}\r\n */\n\n\nfunction validateWeightedSum(threshold, weights) {\n  if (threshold === undefined || weights === undefined) return true;\n  var weightSum = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(weights),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var w = _step2.value;\n      weightSum += w;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (threshold > weightSum) return false;\n  return true;\n}\n\nmodule.exports = WeightedMultiSigOptions;","map":{"version":3,"names":["_","require","WeightedMultiSigOptions","threshold","weights","undefined","Error","_threshold","th","isNumber","validateWeightedSum","_weights","weightArr","isArray","w","options","weight","weightSum","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/weightedMultiSigOptions.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\n\r\n/**\r\n * Representing an options for AccountKeyWeightedMultiSig.\r\n * This class will define threshold and weights.\r\n * @class\r\n */\r\nclass WeightedMultiSigOptions {\r\n    /**\r\n     * Creates an instance of WeightedMultiSigOptions.\r\n     *\r\n     * @example\r\n     * const options = caver.account.weightedMultiSigOptions.fromObject({ threshold: 2, weights: [1, 1] })\r\n     *\r\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\r\n     * @return {WeightedMultiSigOptions}\r\n     */\r\n    static fromObject(options) {\r\n        // To support the previous options format(threshold and weight)\r\n        if (options.weight && !options.weights) {\r\n            options.weights = options.weight\r\n            delete options.weight\r\n        }\r\n\r\n        // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\r\n        if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions()\r\n\r\n        if (options.threshold === undefined || options.weights === undefined)\r\n            throw new Error(`Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.`)\r\n\r\n        return new WeightedMultiSigOptions(options.threshold, options.weights)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of WeightedMultiSigOptions.\r\n     *\r\n     * @example\r\n     * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n     *\r\n     * @param {number} threshold - a threshold\r\n     * @param {Array.<number>} weights - an array of weight of key\r\n     */\r\n    constructor(threshold, weights) {\r\n        if ((threshold !== undefined && weights === undefined) || (threshold === undefined && weights !== undefined)) {\r\n            throw new Error(`For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.`)\r\n        }\r\n        if (threshold !== undefined) this.threshold = threshold\r\n        if (weights !== undefined) this.weights = weights\r\n    }\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    get threshold() {\r\n        return this._threshold\r\n    }\r\n\r\n    set threshold(th) {\r\n        if (!_.isNumber(th)) throw new Error(`The threshold must be number type.`)\r\n\r\n        if (!validateWeightedSum(th, this.weights))\r\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\r\n\r\n        this._threshold = th\r\n    }\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     */\r\n    get weights() {\r\n        return this._weights\r\n    }\r\n\r\n    set weights(weightArr) {\r\n        if (!_.isArray(weightArr)) throw new Error(`weight should be an array that stores the weight of each public key.`)\r\n        for (const w of weightArr) {\r\n            if (!_.isNumber(w)) throw new Error(`The weight of each key must be number type.`)\r\n        }\r\n\r\n        if (!validateWeightedSum(this.threshold, weightArr))\r\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\r\n\r\n        this._weights = weightArr\r\n    }\r\n\r\n    /**\r\n     * Returns 'true' if WeightedMultiSigOptions is empty.\r\n     *\r\n     * @example\r\n     * const isEmpty = options.isEmpty()\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.threshold === undefined && this.weights === undefined\r\n    }\r\n}\r\n\r\n/**\r\n * validates threshold and sum of weights.\r\n * @ignore\r\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n * @param {Array.<number>} weights - An array of weights.\r\n * @return {Boolean}\r\n */\r\nfunction validateWeightedSum(threshold, weights) {\r\n    if (threshold === undefined || weights === undefined) return true\r\n\r\n    let weightSum = 0\r\n\r\n    for (const w of weights) weightSum += w\r\n\r\n    if (threshold > weightSum) return false\r\n\r\n    return true\r\n}\r\n\r\nmodule.exports = WeightedMultiSigOptions\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;;;IACMC,uB;;;EA0BF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,iCAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;IAAA;;IAC5B,IAAKD,SAAS,KAAKE,SAAd,IAA2BD,OAAO,KAAKC,SAAxC,IAAuDF,SAAS,KAAKE,SAAd,IAA2BD,OAAO,KAAKC,SAAlG,EAA8G;MAC1G,MAAM,IAAIC,KAAJ,yFAAN;IACH;;IACD,IAAIH,SAAS,KAAKE,SAAlB,EAA6B,KAAKF,SAAL,GAAiBA,SAAjB;IAC7B,IAAIC,OAAO,KAAKC,SAAhB,EAA2B,KAAKD,OAAL,GAAeA,OAAf;EAC9B;EAED;AACJ;AACA;;;;;SACI,eAAgB;MACZ,OAAO,KAAKG,UAAZ;IACH,C;SAED,aAAcC,EAAd,EAAkB;MACd,IAAI,CAACR,CAAC,CAACS,QAAF,CAAWD,EAAX,CAAL,EAAqB,MAAM,IAAIF,KAAJ,sCAAN;MAErB,IAAI,CAACI,mBAAmB,CAACF,EAAD,EAAK,KAAKJ,OAAV,CAAxB,EACI,MAAM,IAAIE,KAAJ,CAAU,gGAAV,CAAN;MAEJ,KAAKC,UAAL,GAAkBC,EAAlB;IACH;IAED;AACJ;AACA;;;;SACI,eAAc;MACV,OAAO,KAAKG,QAAZ;IACH,C;SAED,aAAYC,SAAZ,EAAuB;MACnB,IAAI,CAACZ,CAAC,CAACa,OAAF,CAAUD,SAAV,CAAL,EAA2B,MAAM,IAAIN,KAAJ,wEAAN;;MADR,2CAEHM,SAFG;MAAA;;MAAA;QAEnB,oDAA2B;UAAA,IAAhBE,CAAgB;UACvB,IAAI,CAACd,CAAC,CAACS,QAAF,CAAWK,CAAX,CAAL,EAAoB,MAAM,IAAIR,KAAJ,+CAAN;QACvB;MAJkB;QAAA;MAAA;QAAA;MAAA;;MAMnB,IAAI,CAACI,mBAAmB,CAAC,KAAKP,SAAN,EAAiBS,SAAjB,CAAxB,EACI,MAAM,IAAIN,KAAJ,CAAU,gGAAV,CAAN;MAEJ,KAAKK,QAAL,GAAgBC,SAAhB;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAU;MACN,OAAO,KAAKT,SAAL,KAAmBE,SAAnB,IAAgC,KAAKD,OAAL,KAAiBC,SAAxD;IACH;;;;IAvFD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,oBAAkBU,OAAlB,EAA2B;MACvB;MACA,IAAIA,OAAO,CAACC,MAAR,IAAkB,CAACD,OAAO,CAACX,OAA/B,EAAwC;QACpCW,OAAO,CAACX,OAAR,GAAkBW,OAAO,CAACC,MAA1B;QACA,OAAOD,OAAO,CAACC,MAAf;MACH,CALsB,CAOvB;;;MACA,IAAID,OAAO,CAACZ,SAAR,KAAsBE,SAAtB,IAAmCU,OAAO,CAACX,OAAR,KAAoBC,SAA3D,EAAsE,OAAO,IAAIH,uBAAJ,EAAP;MAEtE,IAAIa,OAAO,CAACZ,SAAR,KAAsBE,SAAtB,IAAmCU,OAAO,CAACX,OAAR,KAAoBC,SAA3D,EACI,MAAM,IAAIC,KAAJ,qGAAN;MAEJ,OAAO,IAAIJ,uBAAJ,CAA4Ba,OAAO,CAACZ,SAApC,EAA+CY,OAAO,CAACX,OAAvD,CAAP;IACH;;;;;AAmEL;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,mBAAT,CAA6BP,SAA7B,EAAwCC,OAAxC,EAAiD;EAC7C,IAAID,SAAS,KAAKE,SAAd,IAA2BD,OAAO,KAAKC,SAA3C,EAAsD,OAAO,IAAP;EAEtD,IAAIY,SAAS,GAAG,CAAhB;;EAH6C,4CAK7Bb,OAL6B;EAAA;;EAAA;IAK7C,uDAAyB;MAAA,IAAdU,CAAc;MAAAG,SAAS,IAAIH,CAAb;IAAc;EALM;IAAA;EAAA;IAAA;EAAA;;EAO7C,IAAIX,SAAS,GAAGc,SAAhB,EAA2B,OAAO,KAAP;EAE3B,OAAO,IAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBjB,uBAAjB"},"metadata":{},"sourceType":"script"}