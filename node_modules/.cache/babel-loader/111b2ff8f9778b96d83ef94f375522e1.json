{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar utils = require('../../caver-utils');\n\nvar AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nvar AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKey/accountKeyFail');\n\nvar AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nvar AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nvar WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nvar WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nvar _require = require('../../caver-wallet/src/keyring/keyringHelper'),\n    isMultipleKeysFormat = _require.isMultipleKeysFormat,\n    isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\r\n * Representing an Account which includes information for account update.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The account key types which are used in the `caver.account` package.\r\n   *\r\n   * @typedef {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} Account.AccountKey\r\n   */\n\n  /**\r\n   * Creates an account. It is recommended to use [caver.account.create]{@link Account#create} rather than using the constructor directly.\r\n   *\r\n   * @example\r\n   * const accountKey = new caver.account.accountKey.accountKeyLegacy()\r\n   * const account = new caver.account('0x{address in hex}', accountKey)\r\n   *\r\n   * @constructor\r\n   * @hideconstructor\r\n   * @param {string} address - The address of account.\r\n   * @param {Account.AccountKey} accountKey - The accountKey of account.\r\n   */\n  function Account(address, accountKey) {\n    _classCallCheck(this, Account);\n\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(Account, [{\n    key: \"address\",\n    get: function get() {\n      return this._address;\n    },\n    set: function set(addressInput) {\n      if (!utils.isAddress(addressInput)) throw new Error(\"Invalid address : \".concat(addressInput));\n      this._address = utils.addHexPrefix(addressInput);\n    }\n    /**\r\n     * @type {Account.AccountKey}\r\n     */\n\n  }, {\n    key: \"accountKey\",\n    get: function get() {\n      return this._accountKey;\n    },\n    set: function set(accountKey) {\n      if (!isAccountKeyInstance(accountKey)) throw new Error(\"Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased\");\n      this._accountKey = accountKey;\n    }\n    /**\r\n     * returns RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const encodedAccountKey = account.getRLPEncodingAccountKey()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getRLPEncodingAccountKey\",\n    value: function getRLPEncodingAccountKey() {\n      return this._accountKey.getRLPEncoding();\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\r\n     * Creates an Account instance with an address and an accountKey.\r\n     *\r\n     * If `accountKey` is a public key string, an `Account` instance with `AccountKeyPublic` as accountKey is created.\r\n     *\r\n     * If `accountKey` is an array containing public key strings, an `Account` instance with `AccountKeyWeightedMultiSig` as accountKey is created.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * If `accountKey` is an array containing accountKeys that are used for each role, an `Account` instance with `AccountKeyRoleBased` is created.\r\n     * Options must be defined for each role with WeightedMultiSigOptions (or object).\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // Create an account instance with AccountKeyPublic\r\n     * caver.account.create('0x{address in hex}', '0x{public key}')\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1, 1] })\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(1, [1, 1])\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], options)\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1, 1] }, {}])\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *      {},\r\n     *      new caver.account.weightedMultiSigOptions(1, [1, 1]),\r\n     *      {}\r\n     * ]\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\r\n     * @param {object|Array.<object>|WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\r\n     * @return {Account}\r\n     */\n    function create(address, accountKey, options) {\n      if (_.isString(accountKey)) {\n        if (utils.isValidPublicKey(accountKey)) {\n          return Account.createWithAccountKeyPublic(address, accountKey);\n        }\n\n        return Account.createFromRLPEncoding(address, accountKey);\n      }\n\n      if (isMultipleKeysFormat(accountKey)) {\n        if (accountKey.length === 0) throw new Error(\"Empty accountKey array.\");\n        return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n      }\n\n      if (isRoleBasedKeysFormat(accountKey)) {\n        return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n      }\n\n      throw new Error(\"Unsupported accountKey type: \".concat(typeof accountKey));\n    }\n    /**\r\n     * Creates an Account instance from RLP-encoded account key.\r\n     *\r\n     * @example\r\n     * caver.account.createFromRLPEncoding('0x{address in hex}', '0x04f84...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createFromRLPEncoding\",\n    value: function createFromRLPEncoding(address, rlpEncodedKey) {\n      var accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n      return new Account(address, accountKey);\n    }\n    /**\r\n     * Creates an Account instance which has AccountKeyLegacy as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyLegacy('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createWithAccountKeyLegacy\",\n    value: function createWithAccountKeyLegacy(address) {\n      return new Account(address, new AccountKeyLegacy());\n    }\n    /**\r\n     * Creates an Account instance which has AccountKeyPublic as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyPublic('0x{address in hex}', '0xb5a9a...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} publicKey The public key string.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createWithAccountKeyPublic\",\n    value: function createWithAccountKeyPublic(address, publicKey) {\n      return new Account(address, new AccountKeyPublic(publicKey));\n    }\n    /**\r\n     * Creates an Account instance which has AccountKeyFail as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyFail('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createWithAccountKeyFail\",\n    value: function createWithAccountKeyFail(address) {\n      return new Account(address, new AccountKeyFail());\n    }\n    /**\r\n     * Creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'])\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = { threshold: 2, weight: [1,1] }\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<string>} publicKeyArray The array that includes multiple public key strings.\r\n     * @param {object|WeightedMultiSigOptions} [options] The object that includes threshold and weight array.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createWithAccountKeyWeightedMultiSig\",\n    value: function createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n      if (!utils.isAddress(address)) throw new Error(\"Invalid address: \".concat(address));\n      if (!_.isArray(publicKeyArray)) throw new Error(\"Invalid public key array: \".concat(publicKeyArray));\n      return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n    }\n    /**\r\n     * Creates an Account instance which has AccountKeyRoleBased as an accountKey.\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * const publicKeys = [\r\n     *     ['0x034f1...', '0xfe4b8...'],\r\n     *     ['0xb5a9a...'],\r\n     *     ['0x034f1...', '0xb5a9a...']\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys)\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = [\r\n     *     { threshold: 2, weight: [1, 1] },\r\n     *     {},\r\n     *     { threshold: 3, weight: [1, 2] }\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *     new caver.account.weightedMultiSigOptions(2, [1, 1]),\r\n     *     new caver.account.weightedMultiSigOptions(),\r\n     *     new caver.account.weightedMultiSigOptions(3, [1, 2])\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<Array.<string>>} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\r\n     * @param {Array.<object|WeightedMultiSigOptions>} [options] An array that contains objects with threshold and weight array defined for each role.\r\n     * @return {Account}\r\n     */\n\n  }, {\n    key: \"createWithAccountKeyRoleBased\",\n    value: function createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n      return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n    }\n  }]);\n\n  return Account;\n}();\n/**\r\n * @example\r\n * caver.account.weightedMultiSigOptions\r\n *\r\n * @type {typeof WeightedMultiSigOptions}\r\n * */\n\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\n/**\r\n * A module that provides functions for accountKey.\r\n *\r\n * @typedef {object} AccountKeyModule\r\n * @property {function} decode - A function to decode the accountKey. Please refer to {@link AccountKeyDecoder.decode|caver.account.accountKey.decode}.\r\n * @property {typeof AccountKeyLegacy} accountKeyLegacy - Class representing accountKeyLegacy.\r\n * @property {typeof AccountKeyPublic} accountKeyPublic - Class representing AccountKeyPublic.\r\n * @property {typeof AccountKeyFail} accountKeyFail - Class representing AccountKeyFail.\r\n * @property {typeof AccountKeyWeightedMultiSig} accountKeyWeightedMultiSig - Class representing AccountKeyWeightedMultiSig.\r\n * @property {typeof AccountKeyRoleBased} accountKeyRoleBased - Class representing AccountKeyRoleBased.\r\n * @property {typeof WeightedPublicKey} weightedPublicKey - Class representing WeightedPublicKey.\r\n */\n\n/**\r\n * @example\r\n * caver.account.accountKey\r\n * caver.account.accountKey.decode('0x{encoded account key}')\r\n * caver.account.accountKey.accountKeyLegacy\r\n * caver.account.accountKey.accountKeyPublic\r\n * caver.account.accountKey.accountKeyFail\r\n * caver.account.accountKey.accountKeyWeightedMultiSig\r\n * caver.account.accountKey.accountKeyRoleBased\r\n * caver.account.accountKey.weightedPublicKey\r\n *\r\n * @type {AccountKeyModule}\r\n * */\n\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":{"version":3,"names":["_","require","utils","AccountKeyDecoder","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","WeightedMultiSigOptions","WeightedPublicKey","isMultipleKeysFormat","isRoleBasedKeysFormat","isAccountKeyInstance","accountKey","Account","address","_address","addressInput","isAddress","Error","addHexPrefix","_accountKey","getRLPEncoding","options","isString","isValidPublicKey","createWithAccountKeyPublic","createFromRLPEncoding","length","createWithAccountKeyWeightedMultiSig","createWithAccountKeyRoleBased","rlpEncodedKey","decode","publicKey","publicKeyArray","isArray","fromPublicKeysAndOptions","roledBasedPublicKeyArray","fromRoleBasedPublicKeysAndOptions","weightedMultiSigOptions","accountKeyLegacy","accountKeyPublic","accountKeyFail","accountKeyWeightedMultiSig","accountKeyRoleBased","weightedPublicKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/index.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../caver-utils')\r\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder')\r\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy')\r\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic')\r\nconst AccountKeyFail = require('./accountKey/accountKeyFail')\r\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig')\r\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased')\r\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions')\r\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey')\r\nconst { isMultipleKeysFormat, isRoleBasedKeysFormat } = require('../../caver-wallet/src/keyring/keyringHelper')\r\n\r\nfunction isAccountKeyInstance(accountKey) {\r\n    if (\r\n        !(accountKey instanceof AccountKeyLegacy) &&\r\n        !(accountKey instanceof AccountKeyPublic) &&\r\n        !(accountKey instanceof AccountKeyFail) &&\r\n        !(accountKey instanceof AccountKeyWeightedMultiSig) &&\r\n        !(accountKey instanceof AccountKeyRoleBased)\r\n    )\r\n        return false\r\n\r\n    return true\r\n}\r\n/**\r\n * Representing an Account which includes information for account update.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass Account {\r\n    /**\r\n     * Creates an Account instance with an address and an accountKey.\r\n     *\r\n     * If `accountKey` is a public key string, an `Account` instance with `AccountKeyPublic` as accountKey is created.\r\n     *\r\n     * If `accountKey` is an array containing public key strings, an `Account` instance with `AccountKeyWeightedMultiSig` as accountKey is created.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * If `accountKey` is an array containing accountKeys that are used for each role, an `Account` instance with `AccountKeyRoleBased` is created.\r\n     * Options must be defined for each role with WeightedMultiSigOptions (or object).\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // Create an account instance with AccountKeyPublic\r\n     * caver.account.create('0x{address in hex}', '0x{public key}')\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1, 1] })\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(1, [1, 1])\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], options)\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1, 1] }, {}])\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *      {},\r\n     *      new caver.account.weightedMultiSigOptions(1, [1, 1]),\r\n     *      {}\r\n     * ]\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\r\n     * @param {object|Array.<object>|WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\r\n     * @return {Account}\r\n     */\r\n    static create(address, accountKey, options) {\r\n        if (_.isString(accountKey)) {\r\n            if (utils.isValidPublicKey(accountKey)) {\r\n                return Account.createWithAccountKeyPublic(address, accountKey)\r\n            }\r\n            return Account.createFromRLPEncoding(address, accountKey)\r\n        }\r\n\r\n        if (isMultipleKeysFormat(accountKey)) {\r\n            if (accountKey.length === 0) throw new Error(`Empty accountKey array.`)\r\n            return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options)\r\n        }\r\n        if (isRoleBasedKeysFormat(accountKey)) {\r\n            return Account.createWithAccountKeyRoleBased(address, accountKey, options)\r\n        }\r\n\r\n        throw new Error(`Unsupported accountKey type: ${typeof accountKey}`)\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance from RLP-encoded account key.\r\n     *\r\n     * @example\r\n     * caver.account.createFromRLPEncoding('0x{address in hex}', '0x04f84...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\r\n     * @return {Account}\r\n     */\r\n    static createFromRLPEncoding(address, rlpEncodedKey) {\r\n        const accountKey = AccountKeyDecoder.decode(rlpEncodedKey)\r\n        return new Account(address, accountKey)\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyLegacy as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyLegacy('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyLegacy(address) {\r\n        return new Account(address, new AccountKeyLegacy())\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyPublic as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyPublic('0x{address in hex}', '0xb5a9a...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} publicKey The public key string.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyPublic(address, publicKey) {\r\n        return new Account(address, new AccountKeyPublic(publicKey))\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyFail as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyFail('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyFail(address) {\r\n        return new Account(address, new AccountKeyFail())\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'])\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = { threshold: 2, weight: [1,1] }\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<string>} publicKeyArray The array that includes multiple public key strings.\r\n     * @param {object|WeightedMultiSigOptions} [options] The object that includes threshold and weight array.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\r\n        if (!utils.isAddress(address)) throw new Error(`Invalid address: ${address}`)\r\n        if (!_.isArray(publicKeyArray)) throw new Error(`Invalid public key array: ${publicKeyArray}`)\r\n        return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options))\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyRoleBased as an accountKey.\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * const publicKeys = [\r\n     *     ['0x034f1...', '0xfe4b8...'],\r\n     *     ['0xb5a9a...'],\r\n     *     ['0x034f1...', '0xb5a9a...']\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys)\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = [\r\n     *     { threshold: 2, weight: [1, 1] },\r\n     *     {},\r\n     *     { threshold: 3, weight: [1, 2] }\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *     new caver.account.weightedMultiSigOptions(2, [1, 1]),\r\n     *     new caver.account.weightedMultiSigOptions(),\r\n     *     new caver.account.weightedMultiSigOptions(3, [1, 2])\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<Array.<string>>} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\r\n     * @param {Array.<object|WeightedMultiSigOptions>} [options] An array that contains objects with threshold and weight array defined for each role.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\r\n        return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options))\r\n    }\r\n\r\n    /**\r\n     * The account key types which are used in the `caver.account` package.\r\n     *\r\n     * @typedef {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} Account.AccountKey\r\n     */\r\n    /**\r\n     * Creates an account. It is recommended to use [caver.account.create]{@link Account#create} rather than using the constructor directly.\r\n     *\r\n     * @example\r\n     * const accountKey = new caver.account.accountKey.accountKeyLegacy()\r\n     * const account = new caver.account('0x{address in hex}', accountKey)\r\n     *\r\n     * @constructor\r\n     * @hideconstructor\r\n     * @param {string} address - The address of account.\r\n     * @param {Account.AccountKey} accountKey - The accountKey of account.\r\n     */\r\n    constructor(address, accountKey) {\r\n        this.address = address\r\n        this.accountKey = accountKey\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get address() {\r\n        return this._address\r\n    }\r\n\r\n    set address(addressInput) {\r\n        if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\r\n\r\n        this._address = utils.addHexPrefix(addressInput)\r\n    }\r\n\r\n    /**\r\n     * @type {Account.AccountKey}\r\n     */\r\n    get accountKey() {\r\n        return this._accountKey\r\n    }\r\n\r\n    set accountKey(accountKey) {\r\n        if (!isAccountKeyInstance(accountKey))\r\n            throw new Error(\r\n                `Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`\r\n            )\r\n\r\n        this._accountKey = accountKey\r\n    }\r\n\r\n    /**\r\n     * returns RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const encodedAccountKey = account.getRLPEncodingAccountKey()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncodingAccountKey() {\r\n        return this._accountKey.getRLPEncoding()\r\n    }\r\n}\r\n\r\n/**\r\n * @example\r\n * caver.account.weightedMultiSigOptions\r\n *\r\n * @type {typeof WeightedMultiSigOptions}\r\n * */\r\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions\r\n\r\n/**\r\n * A module that provides functions for accountKey.\r\n *\r\n * @typedef {object} AccountKeyModule\r\n * @property {function} decode - A function to decode the accountKey. Please refer to {@link AccountKeyDecoder.decode|caver.account.accountKey.decode}.\r\n * @property {typeof AccountKeyLegacy} accountKeyLegacy - Class representing accountKeyLegacy.\r\n * @property {typeof AccountKeyPublic} accountKeyPublic - Class representing AccountKeyPublic.\r\n * @property {typeof AccountKeyFail} accountKeyFail - Class representing AccountKeyFail.\r\n * @property {typeof AccountKeyWeightedMultiSig} accountKeyWeightedMultiSig - Class representing AccountKeyWeightedMultiSig.\r\n * @property {typeof AccountKeyRoleBased} accountKeyRoleBased - Class representing AccountKeyRoleBased.\r\n * @property {typeof WeightedPublicKey} weightedPublicKey - Class representing WeightedPublicKey.\r\n */\r\n/**\r\n * @example\r\n * caver.account.accountKey\r\n * caver.account.accountKey.decode('0x{encoded account key}')\r\n * caver.account.accountKey.accountKeyLegacy\r\n * caver.account.accountKey.accountKeyPublic\r\n * caver.account.accountKey.accountKeyFail\r\n * caver.account.accountKey.accountKeyWeightedMultiSig\r\n * caver.account.accountKey.accountKeyRoleBased\r\n * caver.account.accountKey.weightedPublicKey\r\n *\r\n * @type {AccountKeyModule}\r\n * */\r\nAccount.accountKey = {\r\n    decode: AccountKeyDecoder.decode,\r\n    accountKeyLegacy: AccountKeyLegacy,\r\n    accountKeyPublic: AccountKeyPublic,\r\n    accountKeyFail: AccountKeyFail,\r\n    accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\r\n    accountKeyRoleBased: AccountKeyRoleBased,\r\n    weightedPublicKey: WeightedPublicKey,\r\n}\r\n\r\nmodule.exports = Account\r\n"],"mappings":"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;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,uCAAqCR,OAArC,EAA8CsB,wBAA9C,EAAwEd,OAAxE,EAAiF;MAC7E,OAAO,IAAIT,OAAJ,CAAYC,OAAZ,EAAqBR,mBAAmB,CAAC+B,iCAApB,CAAsDD,wBAAtD,EAAgFd,OAAhF,CAArB,CAAP;IACH;;;;;AAkEL;AACA;AACA;AACA;AACA;AACA;;;AACAT,OAAO,CAACyB,uBAAR,GAAkC/B,uBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAM,OAAO,CAACD,UAAR,GAAqB;EACjBmB,MAAM,EAAE9B,iBAAiB,CAAC8B,MADT;EAEjBQ,gBAAgB,EAAErC,gBAFD;EAGjBsC,gBAAgB,EAAErC,gBAHD;EAIjBsC,cAAc,EAAErC,cAJC;EAKjBsC,0BAA0B,EAAErC,0BALX;EAMjBsC,mBAAmB,EAAErC,mBANJ;EAOjBsC,iBAAiB,EAAEpC;AAPF,CAArB;AAUAqC,MAAM,CAACC,OAAP,GAAiBjC,OAAjB"},"metadata":{},"sourceType":"script"}