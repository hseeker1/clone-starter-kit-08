{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n\nconst AccountKeyLegacy = require('./accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('./accountKeyRoleBased');\n/**\r\n * Representing an AccountKeyDecoder which can decode RLP-encoded accountKey string.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass AccountKeyDecoder {\n  /**\r\n   * decodes an RLP-encoded account key string.\r\n   *\r\n   * @example\r\n   * const accountKey = caver.account.accountKey.decode('0x{encoded account key}')\r\n   *\r\n   * @param {string} rlpEncodedKey An RLP-encoded account key string.\r\n   * @return {IAccountKey}\r\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n\n    if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n      return AccountKeyLegacy.decode(rlpEncodedKey);\n    }\n\n    if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n      return AccountKeyPublic.decode(rlpEncodedKey);\n    }\n\n    if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n      return AccountKeyFail.decode(rlpEncodedKey);\n    }\n\n    if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n      return AccountKeyWeightedMultiSig.decode(rlpEncodedKey);\n    }\n\n    if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) {\n      return AccountKeyRoleBased.decode(rlpEncodedKey);\n    }\n\n    throw new Error(`Invalid RLP-encoded account key string: ${rlpEncodedKey}`);\n  }\n\n}\n\nmodule.exports = AccountKeyDecoder;","map":{"version":3,"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","AccountKeyDecoder","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","Error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyDecoder.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\nconst AccountKeyLegacy = require('./accountKeyLegacy')\r\nconst AccountKeyPublic = require('./accountKeyPublic')\r\nconst AccountKeyFail = require('./accountKeyFail')\r\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig')\r\nconst AccountKeyRoleBased = require('./accountKeyRoleBased')\r\n\r\n/**\r\n * Representing an AccountKeyDecoder which can decode RLP-encoded accountKey string.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyDecoder {\r\n    /**\r\n     * decodes an RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey An RLP-encoded account key string.\r\n     * @return {IAccountKey}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\r\n            return AccountKeyLegacy.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\r\n            return AccountKeyPublic.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\r\n            return AccountKeyFail.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\r\n            return AccountKeyWeightedMultiSig.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) {\r\n            return AccountKeyRoleBased.decode(rlpEncodedKey)\r\n        }\r\n\r\n        throw new Error(`Invalid RLP-encoded account key string: ${rlpEncodedKey}`)\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyDecoder\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAsBD,OAAO,CAAC,oBAAD,CAAnC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMK,0BAA0B,GAAGL,OAAO,CAAC,8BAAD,CAA1C;;AACA,MAAMM,mBAAmB,GAAGN,OAAO,CAAC,uBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,iBAAN,CAAwB;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACiB,OAANC,MAAM,CAACC,aAAD,EAAgB;IACzBA,aAAa,GAAGV,KAAK,CAACW,YAAN,CAAmBD,aAAnB,CAAhB;;IAEA,IAAIA,aAAa,CAACE,UAAd,CAAyBV,eAAe,CAACW,sBAAzC,CAAJ,EAAsE;MAClE,OAAOV,gBAAgB,CAACM,MAAjB,CAAwBC,aAAxB,CAAP;IACH;;IACD,IAAIA,aAAa,CAACE,UAAd,CAAyBV,eAAe,CAACY,sBAAzC,CAAJ,EAAsE;MAClE,OAAOV,gBAAgB,CAACK,MAAjB,CAAwBC,aAAxB,CAAP;IACH;;IACD,IAAIA,aAAa,CAACE,UAAd,CAAyBV,eAAe,CAACa,oBAAzC,CAAJ,EAAoE;MAChE,OAAOV,cAAc,CAACI,MAAf,CAAsBC,aAAtB,CAAP;IACH;;IACD,IAAIA,aAAa,CAACE,UAAd,CAAyBV,eAAe,CAACc,iCAAzC,CAAJ,EAAiF;MAC7E,OAAOV,0BAA0B,CAACG,MAA3B,CAAkCC,aAAlC,CAAP;IACH;;IACD,IAAIA,aAAa,CAACE,UAAd,CAAyBV,eAAe,CAACe,0BAAzC,CAAJ,EAA0E;MACtE,OAAOV,mBAAmB,CAACE,MAApB,CAA2BC,aAA3B,CAAP;IACH;;IAED,MAAM,IAAIQ,KAAJ,CAAW,2CAA0CR,aAAc,EAAnE,CAAN;EACH;;AA9BmB;;AAiCxBS,MAAM,CAACC,OAAP,GAAiBZ,iBAAjB"},"metadata":{},"sourceType":"script"}