{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar AccountLib = require('eth-lib/lib/account');\n\nvar utils = require('../../../caver-utils/src');\n\nvar PrivateKey = require('./privateKey');\n\nvar _require = require('./keyringHelper'),\n    KEY_ROLE = _require.KEY_ROLE,\n    isMultipleKeysFormat = _require.isMultipleKeysFormat,\n    isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nvar _require2 = require('./keyringHelper'),\n    decryptKey = _require2.decryptKey;\n\nvar SingleKeyring = require('./singleKeyring');\n\nvar MultipleKeyring = require('./multipleKeyring');\n\nvar RoleBasedKeyring = require('./roleBasedKeyring');\n\nvar SignatureData = require('./signatureData');\n/**\r\n * representing a KeyringFactory which supports create functions for Keyring({@link SingleKeyring}/{@link MultipleKeyring}/{@link RoleBasedKeyring}).\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar KeyringFactory = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function KeyringFactory() {\n    _classCallCheck(this, KeyringFactory);\n  }\n\n  _createClass(KeyringFactory, null, [{\n    key: \"generate\",\n    value:\n    /**\r\n     * Generates a {@link SingleKeyring} instance with a randomly generated private key.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.generate()\r\n     *\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {SingleKeyring} A randomly generated single keyring instance is returned.\r\n     */\n    function generate(entropy) {\n      var random = AccountLib.create(entropy || utils.randomHex(32));\n      return KeyringFactory.createWithSingleKey(random.address, random.privateKey);\n    }\n    /**\r\n     * generates a single private key string\r\n     *\r\n     * @example\r\n     * const privateKey = caver.wallet.keyring.generateSingleKey()\r\n     *\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {string} The private key string is returned.\r\n     */\n\n  }, {\n    key: \"generateSingleKey\",\n    value: function generateSingleKey(entropy) {\n      return AccountLib.create(entropy || utils.randomHex(32)).privateKey;\n    }\n    /**\r\n     * Generates an array of private key strings.\r\n     *\r\n     * @example\r\n     * const privateKeys = caver.wallet.keyring.generateMultipleKeys()\r\n     *\r\n     * @param {number} num The number of private key strings.\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {Array.<string>} An array that includes private key strings is returned.\r\n     */\n\n  }, {\n    key: \"generateMultipleKeys\",\n    value: function generateMultipleKeys(num, entropy) {\n      if (num === undefined || !_.isNumber(num) || _.isString(num)) {\n        throw new Error(\"To generate random multiple private keys, the number of keys should be defined.\");\n      }\n\n      var randomKeys = [];\n\n      for (var i = 0; i < num; i++) {\n        randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n      }\n\n      return randomKeys;\n    }\n    /**\r\n     * Generates a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     *\r\n     * @example\r\n     * const privateKeysByRoles = caver.wallet.keyring.generateRoleBasedKeys([2, 1, 3])\r\n     *\r\n     * @param {Array.<number>} numArr An array containing the number of keys for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {Array.<Array.<string>>} A 2D array of which each array element contains keys defined for each role is returned.\r\n     */\n\n  }, {\n    key: \"generateRoleBasedKeys\",\n    value: function generateRoleBasedKeys(numArr, entropy) {\n      if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\n        throw new Error(\"To generate random role-based private keys, an array containing the number of keys for each role should be defined.\");\n      }\n\n      if (numArr.length > KEY_ROLE.roleLast) {\n        throw new Error(\"Unsupported role. The length of array should be less than \".concat(KEY_ROLE.roleLast, \".\"));\n      }\n\n      var randomKeys = [[], [], []];\n\n      for (var i = 0; i < numArr.length; i++) {\n        for (var j = 0; j < numArr[i]; j++) {\n          randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n        }\n      }\n\n      return randomKeys;\n    }\n    /**\r\n     * Creates a Keyring instance with parameters.\r\n     *\r\n     * If key is a private key string, a {@link SingleKeyring} instance that uses a single private key is created.\r\n     * If key is an array containing private key strings, a {@link MultipleKeyring} instance that use multiple private keys is created.\r\n     * If key is a 2D array of which each element contains the private key(s) to be used for each role, a {@link RoleBasedKeyring} instance is created.\r\n     *\r\n     * @example\r\n     * const singleKeyring = caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')\r\n     * const multipleKeyring = caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])\r\n     * const roleBasedKeyring = caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {string|Array.<string>|Array.<Array.<string>>} key The private key string, an array of private keys, or a 2D array of which each element contains key(s) to be used for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     * @return {KeyringContainer.Keyring} The keyring instance is returned. Depending on the key parameter, it can be {@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(address, key) {\n      if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key);\n      if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key);\n      if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key);\n      throw new Error(\"Unsupported key type: \".concat(typeof key));\n    }\n    /**\r\n     * Creates a SingleKeyring instance from a private key string or a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey}.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createFromPrivateKey('0x{private key}')\r\n     *\r\n     * @param {string} privateKey This parameter can be either a private key or KlaytnWalletKey.\r\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\r\n     */\n\n  }, {\n    key: \"createFromPrivateKey\",\n    value: function createFromPrivateKey(privateKey) {\n      if (!_.isString(privateKey)) throw new Error(\"Invalid format of parameter. 'privateKey' should be in format of string\");\n      if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey);\n      var acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey));\n      return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey);\n    }\n    /**\r\n     * Creates a SingleKeyring instance from a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} string.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createFromKlaytnWalletKey('0x{private key}0x{type}0x{address in hex}')\r\n     *\r\n     * @param {string} klaytnWalletKey The KlaytnWalletKey string.\r\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\r\n     */\n\n  }, {\n    key: \"createFromKlaytnWalletKey\",\n    value: function createFromKlaytnWalletKey(klaytnWalletKey) {\n      if (!_.isString(klaytnWalletKey)) throw new Error(\"Invalid format of parameter. 'klaytnWalletKey' should be in format of string\");\n\n      if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\n        throw new Error(\"Invalid KlaytnWalletKey: \".concat(klaytnWalletKey));\n      }\n\n      var parsed = utils.parsePrivateKey(klaytnWalletKey);\n      return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey);\n    }\n    /**\r\n     * Creates a {@link SingleKeyring} instance from an address and a private key string.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createWithSingleKey('0x{address in hex}', '0x{private key}')\r\n     *\r\n     * @param {string} address An address to be used for creating a keyring.\r\n     * @param {string} key A private key string.\r\n     * @return {SingleKeyring} The {@link SingleKeyring} instance is returned.\r\n     */\n\n  }, {\n    key: \"createWithSingleKey\",\n    value: function createWithSingleKey(address, key) {\n      if (!_.isString(key)) throw new Error(\"Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.\");\n      if (utils.isKlaytnWalletKey(key)) throw new Error(\"Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.\");\n      return new SingleKeyring(address, key);\n    }\n    /**\r\n     * Creates a {@link MultipleKeyring} instance from an address and private key strings.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createWithMultipleKey('0x{address in hex}', ['0x{private key1}', '0x{private key2}' ])\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {Array.<string>} keyArray An array of private key strings.\r\n     * @return {MultipleKeyring} The {@link MultipleKeyring} instance is returned.\r\n     */\n\n  }, {\n    key: \"createWithMultipleKey\",\n    value: function createWithMultipleKey(address, keyArray) {\n      if (!isMultipleKeysFormat(keyArray)) throw new Error(\"Invalid format of parameter. 'keyArray' should be an array of private key strings.\");\n      return new MultipleKeyring(address, keyArray);\n    }\n    /**\r\n     * Creates a {@link RoleBasedKeyring} instance from an address and a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\r\n     * @return {RoleBasedKeyring} The {@link RoleBasedKeyring} instance is returned.\r\n     */\n\n  }, {\n    key: \"createWithRoleBasedKey\",\n    value: function createWithRoleBasedKey(address, roledBasedKeyArray) {\n      if (!isRoleBasedKeysFormat(roledBasedKeyArray)) throw new Error(\"Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.\");\n      return new RoleBasedKeyring(address, roledBasedKeyArray);\n    }\n    /**\r\n     * An object that defines encrypted keystore.\r\n     *\r\n     * @typedef {object} KeyringFactory.Keystore\r\n     * @property {number} version - The version number of the keystore.\r\n     * @property {string} id - The id in the keystore.\r\n     * @property {string} address - The address in the encrypted keyring.\r\n     * @property {object} [crypto] - The encrypted private key for v3.\r\n     * @property {Array.<object>|Array.<Array.<object>>} [keyring] - The encrypted private key(s) for v4.\r\n     */\n\n    /**\r\n     * Decrypts a keystore v3 or v4 JSON and returns the decrypted Keyring instance.\r\n     *\r\n     * @example\r\n     * // Decrypt keystroe v4 (encrypted single keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '9c12de05-0153-41c7-a8b7-849472eb5de7',\r\n     *     address: '0xc02cec4d0346bf4124deeb55c5216a4138a40a8c',\r\n     *     keyring: [\r\n     *         {\r\n     *             ciphertext: 'eacf496cea5e80eca291251b3743bf93cdbcf7072efc3a74efeaf518e2796b15',\r\n     *             cipherparams: { iv: 'd688a4319342e872cefcf51aef3ec2da' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: 'c3cee502c7157e0faa42386c6d666116ffcdf093c345166c502e23bc34e6ba40',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1\r\n     *             },\r\n     *             mac: '4b49574f3d3356fa0d04f73e07d5a2a6bbfdd185bedfa31f37f347bc98f2ef26'\r\n     *         }\r\n     *     ]\r\n     * }, 'password')\r\n     *\r\n     * // Decrypt keystroe v4 (encrypted multiple keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\r\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\r\n     *     keyring: [\r\n     *         {\r\n     *             ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\r\n     *             cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1,\r\n     *             },\r\n     *             mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\r\n     *         },\r\n     *         {\r\n     *             ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\r\n     *             cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1,\r\n     *             },\r\n     *             mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\r\n     *         },\r\n     *     ],\r\n     * }, 'password')\r\n     *\r\n     * // Decrypt keystroe v4 (encrypted role-based keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\r\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\r\n     *     keyring: [\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\r\n     *                 cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\r\n     *             },\r\n     *             {\r\n     *                 ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\r\n     *                 cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\r\n     *             },\r\n     *         ],\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: 'f16def98a70bb2dae053f791882f3254c66d63416633b8d91c2848893e7876ce',\r\n     *                 cipherparams: { iv: 'f5006128a4c53bc02cada64d095c15cf' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '0d8a2f71f79c4880e43ff0795f6841a24cb18838b3ca8ecaeb0cda72da9a72ce',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '38b79276c3805b9d2ff5fbabf1b9d4ead295151b95401c1e54aed782502fc90a',\r\n     *             },\r\n     *         ],\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: '544dbcc327942a6a52ad6a7d537e4459506afc700a6da4e8edebd62fb3dd55ee',\r\n     *                 cipherparams: { iv: '05dd5d25ad6426e026818b6fa9b25818' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '3a9003c1527f65c772c54c6056a38b0048c2e2d58dc0e584a1d867f2039a25aa',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '19a698b51409cc9ac22d63d329b1201af3c89a04a1faea3111eec4ca97f2e00f',\r\n     *             },\r\n     *             {\r\n     *                 ciphertext: 'dd6b920f02cbcf5998ed205f8867ddbd9b6b088add8dfe1774a9fda29ff3920b',\r\n     *                 cipherparams: { iv: 'ac04c0f4559dad80dc86c975d1ef7067' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '22279c6dbcc706d7daa120022a236cfe149496dca8232b0f8159d1df999569d6',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '1c54f7378fa279a49a2f790a0adb683defad8535a21bdf2f3dadc48a7bddf517',\r\n     *             },\r\n     *         ],\r\n     *     ],\r\n     * }, 'password')\r\n     *\r\n     * @param {KeyringFactory.KeystoreV4} keystore The keystore v3 or v4 to decrypt.\r\n     * @param {string} password The password used for encryption.\r\n     * @return {KeyringContainer.Keyring} The  decrypted keyring ({@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}) instance is returned.\r\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(keystore, password) {\n      // To deep copy an object, using JSON.parse and JSON.stringify (object -> string -> object)\n      var json = _.isObject(keystore) ? _.cloneDeep(keystore) : JSON.parse(keystore);\n      if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.');\n\n      if (json.version === 3 && !json.crypto) {\n        throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\");\n      } else if (json.version === 4 && !json.keyring) {\n        throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\");\n      }\n\n      if (json.crypto) {\n        if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\");\n        json.keyring = [json.crypto];\n        delete json.crypto;\n      } // AccountKeyRoleBased format\n\n\n      if (_.isArray(json.keyring[0])) {\n        var keys = [];\n        var transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password);\n        transactionKey ? keys.push(transactionKey) : keys.push([]);\n        var updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password);\n        updateKey ? keys.push(updateKey) : keys.push([]);\n        var feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password);\n        feePayerKey ? keys.push(feePayerKey) : keys.push([]);\n        return KeyringFactory.createWithRoleBasedKey(json.address, keys);\n      }\n\n      var decrypted = decryptKey(json.keyring, password);\n      decrypted = _.isArray(decrypted) ? decrypted : [decrypted];\n      if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0]);\n      return KeyringFactory.createWithMultipleKey(json.address, decrypted);\n    }\n  }]);\n\n  return KeyringFactory;\n}();\n/**\r\n * @type {typeof PrivateKey}\r\n * @example\r\n * caver.wallet.keyring.privateKey\r\n * */\n\n\nKeyringFactory.privateKey = PrivateKey;\n/**\r\n * @type {typeof SingleKeyring}\r\n * @example\r\n * caver.wallet.keyring.singleKeyring\r\n * */\n\nKeyringFactory.singleKeyring = SingleKeyring;\n/**\r\n * @type {typeof MultipleKeyring}\r\n * @example\r\n * caver.wallet.keyring.multipleKeyring\r\n * */\n\nKeyringFactory.multipleKeyring = MultipleKeyring;\n/**\r\n * @type {typeof RoleBasedKeyring}\r\n * @example\r\n * caver.wallet.keyring.roleBasedKeyring\r\n * */\n\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring;\n/**\r\n * @type {typeof SignatureData}\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n */\n\nKeyringFactory.signatureData = SignatureData;\nKeyringFactory.role = KEY_ROLE;\nmodule.exports = KeyringFactory;","map":{"version":3,"names":["_","require","AccountLib","utils","PrivateKey","KEY_ROLE","isMultipleKeysFormat","isRoleBasedKeysFormat","decryptKey","SingleKeyring","MultipleKeyring","RoleBasedKeyring","SignatureData","KeyringFactory","entropy","random","create","randomHex","createWithSingleKey","address","privateKey","num","undefined","isNumber","isString","Error","randomKeys","i","push","numArr","isArray","length","roleLast","j","key","createWithMultipleKey","createWithRoleBasedKey","isKlaytnWalletKey","createFromKlaytnWalletKey","acct","fromPrivate","addHexPrefix","klaytnWalletKey","parsed","parsePrivateKey","keyArray","roledBasedKeyArray","keystore","password","json","isObject","cloneDeep","JSON","parse","version","console","warn","crypto","keyring","keys","transactionKey","roleTransactionKey","updateKey","roleAccountUpdateKey","feePayerKey","roleFeePayerKey","decrypted","singleKeyring","multipleKeyring","roleBasedKeyring","signatureData","role","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringFactory.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst AccountLib = require('eth-lib/lib/account')\r\n\r\nconst utils = require('../../../caver-utils/src')\r\nconst PrivateKey = require('./privateKey')\r\nconst { KEY_ROLE, isMultipleKeysFormat, isRoleBasedKeysFormat } = require('./keyringHelper')\r\nconst { decryptKey } = require('./keyringHelper')\r\nconst SingleKeyring = require('./singleKeyring')\r\nconst MultipleKeyring = require('./multipleKeyring')\r\nconst RoleBasedKeyring = require('./roleBasedKeyring')\r\nconst SignatureData = require('./signatureData')\r\n\r\n/**\r\n * representing a KeyringFactory which supports create functions for Keyring({@link SingleKeyring}/{@link MultipleKeyring}/{@link RoleBasedKeyring}).\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass KeyringFactory {\r\n    /**\r\n     * Generates a {@link SingleKeyring} instance with a randomly generated private key.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.generate()\r\n     *\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {SingleKeyring} A randomly generated single keyring instance is returned.\r\n     */\r\n    static generate(entropy) {\r\n        const random = AccountLib.create(entropy || utils.randomHex(32))\r\n        return KeyringFactory.createWithSingleKey(random.address, random.privateKey)\r\n    }\r\n\r\n    /**\r\n     * generates a single private key string\r\n     *\r\n     * @example\r\n     * const privateKey = caver.wallet.keyring.generateSingleKey()\r\n     *\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {string} The private key string is returned.\r\n     */\r\n    static generateSingleKey(entropy) {\r\n        return AccountLib.create(entropy || utils.randomHex(32)).privateKey\r\n    }\r\n\r\n    /**\r\n     * Generates an array of private key strings.\r\n     *\r\n     * @example\r\n     * const privateKeys = caver.wallet.keyring.generateMultipleKeys()\r\n     *\r\n     * @param {number} num The number of private key strings.\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {Array.<string>} An array that includes private key strings is returned.\r\n     */\r\n    static generateMultipleKeys(num, entropy) {\r\n        if (num === undefined || !_.isNumber(num) || _.isString(num)) {\r\n            throw new Error(`To generate random multiple private keys, the number of keys should be defined.`)\r\n        }\r\n\r\n        const randomKeys = []\r\n        for (let i = 0; i < num; i++) {\r\n            randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\r\n        }\r\n        return randomKeys\r\n    }\r\n\r\n    /**\r\n     * Generates a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     *\r\n     * @example\r\n     * const privateKeysByRoles = caver.wallet.keyring.generateRoleBasedKeys([2, 1, 3])\r\n     *\r\n     * @param {Array.<number>} numArr An array containing the number of keys for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     * @param {string} [entropy] A random string to increase entropy.\r\n     * @return {Array.<Array.<string>>} A 2D array of which each array element contains keys defined for each role is returned.\r\n     */\r\n    static generateRoleBasedKeys(numArr, entropy) {\r\n        if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\r\n            throw new Error(\r\n                `To generate random role-based private keys, an array containing the number of keys for each role should be defined.`\r\n            )\r\n        }\r\n        if (numArr.length > KEY_ROLE.roleLast) {\r\n            throw new Error(`Unsupported role. The length of array should be less than ${KEY_ROLE.roleLast}.`)\r\n        }\r\n\r\n        const randomKeys = [[], [], []]\r\n        for (let i = 0; i < numArr.length; i++) {\r\n            for (let j = 0; j < numArr[i]; j++) {\r\n                randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\r\n            }\r\n        }\r\n        return randomKeys\r\n    }\r\n\r\n    /**\r\n     * Creates a Keyring instance with parameters.\r\n     *\r\n     * If key is a private key string, a {@link SingleKeyring} instance that uses a single private key is created.\r\n     * If key is an array containing private key strings, a {@link MultipleKeyring} instance that use multiple private keys is created.\r\n     * If key is a 2D array of which each element contains the private key(s) to be used for each role, a {@link RoleBasedKeyring} instance is created.\r\n     *\r\n     * @example\r\n     * const singleKeyring = caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')\r\n     * const multipleKeyring = caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])\r\n     * const roleBasedKeyring = caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {string|Array.<string>|Array.<Array.<string>>} key The private key string, an array of private keys, or a 2D array of which each element contains key(s) to be used for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     * @return {KeyringContainer.Keyring} The keyring instance is returned. Depending on the key parameter, it can be {@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}.\r\n     */\r\n    static create(address, key) {\r\n        if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key)\r\n        if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key)\r\n        if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key)\r\n\r\n        throw new Error(`Unsupported key type: ${typeof key}`)\r\n    }\r\n\r\n    /**\r\n     * Creates a SingleKeyring instance from a private key string or a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey}.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createFromPrivateKey('0x{private key}')\r\n     *\r\n     * @param {string} privateKey This parameter can be either a private key or KlaytnWalletKey.\r\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\r\n     */\r\n    static createFromPrivateKey(privateKey) {\r\n        if (!_.isString(privateKey)) throw new Error(`Invalid format of parameter. 'privateKey' should be in format of string`)\r\n        if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey)\r\n\r\n        const acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey))\r\n        return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey)\r\n    }\r\n\r\n    /**\r\n     * Creates a SingleKeyring instance from a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} string.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createFromKlaytnWalletKey('0x{private key}0x{type}0x{address in hex}')\r\n     *\r\n     * @param {string} klaytnWalletKey The KlaytnWalletKey string.\r\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\r\n     */\r\n    static createFromKlaytnWalletKey(klaytnWalletKey) {\r\n        if (!_.isString(klaytnWalletKey)) throw new Error(`Invalid format of parameter. 'klaytnWalletKey' should be in format of string`)\r\n        if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\r\n            throw new Error(`Invalid KlaytnWalletKey: ${klaytnWalletKey}`)\r\n        }\r\n        const parsed = utils.parsePrivateKey(klaytnWalletKey)\r\n        return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey)\r\n    }\r\n\r\n    /**\r\n     * Creates a {@link SingleKeyring} instance from an address and a private key string.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createWithSingleKey('0x{address in hex}', '0x{private key}')\r\n     *\r\n     * @param {string} address An address to be used for creating a keyring.\r\n     * @param {string} key A private key string.\r\n     * @return {SingleKeyring} The {@link SingleKeyring} instance is returned.\r\n     */\r\n    static createWithSingleKey(address, key) {\r\n        if (!_.isString(key))\r\n            throw new Error(`Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.`)\r\n        if (utils.isKlaytnWalletKey(key))\r\n            throw new Error(`Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.`)\r\n\r\n        return new SingleKeyring(address, key)\r\n    }\r\n\r\n    /**\r\n     * Creates a {@link MultipleKeyring} instance from an address and private key strings.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.createWithMultipleKey('0x{address in hex}', ['0x{private key1}', '0x{private key2}' ])\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {Array.<string>} keyArray An array of private key strings.\r\n     * @return {MultipleKeyring} The {@link MultipleKeyring} instance is returned.\r\n     */\r\n    static createWithMultipleKey(address, keyArray) {\r\n        if (!isMultipleKeysFormat(keyArray))\r\n            throw new Error(`Invalid format of parameter. 'keyArray' should be an array of private key strings.`)\r\n\r\n        return new MultipleKeyring(address, keyArray)\r\n    }\r\n\r\n    /**\r\n     * Creates a {@link RoleBasedKeyring} instance from an address and a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\r\n     *\r\n     * @param {string} address An address of keyring.\r\n     * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\r\n     * @return {RoleBasedKeyring} The {@link RoleBasedKeyring} instance is returned.\r\n     */\r\n    static createWithRoleBasedKey(address, roledBasedKeyArray) {\r\n        if (!isRoleBasedKeysFormat(roledBasedKeyArray))\r\n            throw new Error(\r\n                `Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.`\r\n            )\r\n\r\n        return new RoleBasedKeyring(address, roledBasedKeyArray)\r\n    }\r\n\r\n    /**\r\n     * An object that defines encrypted keystore.\r\n     *\r\n     * @typedef {object} KeyringFactory.Keystore\r\n     * @property {number} version - The version number of the keystore.\r\n     * @property {string} id - The id in the keystore.\r\n     * @property {string} address - The address in the encrypted keyring.\r\n     * @property {object} [crypto] - The encrypted private key for v3.\r\n     * @property {Array.<object>|Array.<Array.<object>>} [keyring] - The encrypted private key(s) for v4.\r\n     */\r\n    /**\r\n     * Decrypts a keystore v3 or v4 JSON and returns the decrypted Keyring instance.\r\n     *\r\n     * @example\r\n     * // Decrypt keystroe v4 (encrypted single keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '9c12de05-0153-41c7-a8b7-849472eb5de7',\r\n     *     address: '0xc02cec4d0346bf4124deeb55c5216a4138a40a8c',\r\n     *     keyring: [\r\n     *         {\r\n     *             ciphertext: 'eacf496cea5e80eca291251b3743bf93cdbcf7072efc3a74efeaf518e2796b15',\r\n     *             cipherparams: { iv: 'd688a4319342e872cefcf51aef3ec2da' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: 'c3cee502c7157e0faa42386c6d666116ffcdf093c345166c502e23bc34e6ba40',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1\r\n     *             },\r\n     *             mac: '4b49574f3d3356fa0d04f73e07d5a2a6bbfdd185bedfa31f37f347bc98f2ef26'\r\n     *         }\r\n     *     ]\r\n     * }, 'password')\r\n     *\r\n     * // Decrypt keystroe v4 (encrypted multiple keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\r\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\r\n     *     keyring: [\r\n     *         {\r\n     *             ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\r\n     *             cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1,\r\n     *             },\r\n     *             mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\r\n     *         },\r\n     *         {\r\n     *             ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\r\n     *             cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\r\n     *             cipher: 'aes-128-ctr',\r\n     *             kdf: 'scrypt',\r\n     *             kdfparams: {\r\n     *                 dklen: 32,\r\n     *                 salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\r\n     *                 n: 4096,\r\n     *                 r: 8,\r\n     *                 p: 1,\r\n     *             },\r\n     *             mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\r\n     *         },\r\n     *     ],\r\n     * }, 'password')\r\n     *\r\n     * // Decrypt keystroe v4 (encrypted role-based keyring)\r\n     * const decrypted = caver.wallet.keyring.decrypt({\r\n     *     version: 4,\r\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\r\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\r\n     *     keyring: [\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\r\n     *                 cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\r\n     *             },\r\n     *             {\r\n     *                 ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\r\n     *                 cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\r\n     *             },\r\n     *         ],\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: 'f16def98a70bb2dae053f791882f3254c66d63416633b8d91c2848893e7876ce',\r\n     *                 cipherparams: { iv: 'f5006128a4c53bc02cada64d095c15cf' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '0d8a2f71f79c4880e43ff0795f6841a24cb18838b3ca8ecaeb0cda72da9a72ce',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '38b79276c3805b9d2ff5fbabf1b9d4ead295151b95401c1e54aed782502fc90a',\r\n     *             },\r\n     *         ],\r\n     *         [\r\n     *             {\r\n     *                 ciphertext: '544dbcc327942a6a52ad6a7d537e4459506afc700a6da4e8edebd62fb3dd55ee',\r\n     *                 cipherparams: { iv: '05dd5d25ad6426e026818b6fa9b25818' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '3a9003c1527f65c772c54c6056a38b0048c2e2d58dc0e584a1d867f2039a25aa',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '19a698b51409cc9ac22d63d329b1201af3c89a04a1faea3111eec4ca97f2e00f',\r\n     *             },\r\n     *             {\r\n     *                 ciphertext: 'dd6b920f02cbcf5998ed205f8867ddbd9b6b088add8dfe1774a9fda29ff3920b',\r\n     *                 cipherparams: { iv: 'ac04c0f4559dad80dc86c975d1ef7067' },\r\n     *                 cipher: 'aes-128-ctr',\r\n     *                 kdf: 'scrypt',\r\n     *                 kdfparams: {\r\n     *                     dklen: 32,\r\n     *                     salt: '22279c6dbcc706d7daa120022a236cfe149496dca8232b0f8159d1df999569d6',\r\n     *                     n: 4096,\r\n     *                     r: 8,\r\n     *                     p: 1,\r\n     *                 },\r\n     *                 mac: '1c54f7378fa279a49a2f790a0adb683defad8535a21bdf2f3dadc48a7bddf517',\r\n     *             },\r\n     *         ],\r\n     *     ],\r\n     * }, 'password')\r\n     *\r\n     * @param {KeyringFactory.KeystoreV4} keystore The keystore v3 or v4 to decrypt.\r\n     * @param {string} password The password used for encryption.\r\n     * @return {KeyringContainer.Keyring} The  decrypted keyring ({@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}) instance is returned.\r\n     */\r\n    static decrypt(keystore, password) {\r\n        // To deep copy an object, using JSON.parse and JSON.stringify (object -> string -> object)\r\n        const json = _.isObject(keystore) ? _.cloneDeep(keystore) : JSON.parse(keystore)\r\n\r\n        if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.')\r\n\r\n        if (json.version === 3 && !json.crypto) {\r\n            throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\")\r\n        } else if (json.version === 4 && !json.keyring) {\r\n            throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\")\r\n        }\r\n\r\n        if (json.crypto) {\r\n            if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\")\r\n\r\n            json.keyring = [json.crypto]\r\n            delete json.crypto\r\n        }\r\n\r\n        // AccountKeyRoleBased format\r\n        if (_.isArray(json.keyring[0])) {\r\n            const keys = []\r\n            const transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password)\r\n            transactionKey ? keys.push(transactionKey) : keys.push([])\r\n\r\n            const updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password)\r\n            updateKey ? keys.push(updateKey) : keys.push([])\r\n\r\n            const feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password)\r\n            feePayerKey ? keys.push(feePayerKey) : keys.push([])\r\n\r\n            return KeyringFactory.createWithRoleBasedKey(json.address, keys)\r\n        }\r\n\r\n        let decrypted = decryptKey(json.keyring, password)\r\n        decrypted = _.isArray(decrypted) ? decrypted : [decrypted]\r\n        if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0])\r\n\r\n        return KeyringFactory.createWithMultipleKey(json.address, decrypted)\r\n    }\r\n}\r\n\r\n/**\r\n * @type {typeof PrivateKey}\r\n * @example\r\n * caver.wallet.keyring.privateKey\r\n * */\r\nKeyringFactory.privateKey = PrivateKey\r\n/**\r\n * @type {typeof SingleKeyring}\r\n * @example\r\n * caver.wallet.keyring.singleKeyring\r\n * */\r\nKeyringFactory.singleKeyring = SingleKeyring\r\n/**\r\n * @type {typeof MultipleKeyring}\r\n * @example\r\n * caver.wallet.keyring.multipleKeyring\r\n * */\r\nKeyringFactory.multipleKeyring = MultipleKeyring\r\n/**\r\n * @type {typeof RoleBasedKeyring}\r\n * @example\r\n * caver.wallet.keyring.roleBasedKeyring\r\n * */\r\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring\r\n/**\r\n * @type {typeof SignatureData}\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n */\r\nKeyringFactory.signatureData = SignatureData\r\n\r\nKeyringFactory.role = KEY_ROLE\r\n\r\nmodule.exports = KeyringFactory\r\n"],"mappings":"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,CAAf;MACA,OAAO7B,cAAc,CAACK,mBAAf,CAAmCyB,MAAM,CAACxB,OAA1C,EAAmDwB,MAAM,CAACvB,UAA1D,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,6BAA2BD,OAA3B,EAAoCe,GAApC,EAAyC;MACrC,IAAI,CAAClC,CAAC,CAACwB,QAAF,CAAWU,GAAX,CAAL,EACI,MAAM,IAAIT,KAAJ,kGAAN;MACJ,IAAItB,KAAK,CAACkC,iBAAN,CAAwBH,GAAxB,CAAJ,EACI,MAAM,IAAIT,KAAJ,kGAAN;MAEJ,OAAO,IAAIhB,aAAJ,CAAkBU,OAAlB,EAA2Be,GAA3B,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,+BAA6Bf,OAA7B,EAAsC0B,QAAtC,EAAgD;MAC5C,IAAI,CAACvC,oBAAoB,CAACuC,QAAD,CAAzB,EACI,MAAM,IAAIpB,KAAJ,sFAAN;MAEJ,OAAO,IAAIf,eAAJ,CAAoBS,OAApB,EAA6B0B,QAA7B,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,gCAA8B1B,OAA9B,EAAuC2B,kBAAvC,EAA2D;MACvD,IAAI,CAACvC,qBAAqB,CAACuC,kBAAD,CAA1B,EACI,MAAM,IAAIrB,KAAJ,kJAAN;MAIJ,OAAO,IAAId,gBAAJ,CAAqBQ,OAArB,EAA8B2B,kBAA9B,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"script"}