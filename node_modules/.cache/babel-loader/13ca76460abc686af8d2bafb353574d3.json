{"ast":null,"code":"'use strict';\n\nvar mh = require('multihashes');\n\nvar CIDUtil = {\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Returns an error message if it is not.\r\n   * Returns undefined if it is a valid CID.\r\n   *\r\n   * @param {any} other\r\n   * @returns {string|undefined}\r\n   */\n  checkCIDComponents: function checkCIDComponents(other) {\n    if (other == null) {\n      return 'null values are not valid CIDs';\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0';\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string';\n    }\n\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\";\n      }\n\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\";\n      }\n    }\n\n    if (!(other.multihash instanceof Uint8Array)) {\n      return 'multihash must be a Uint8Array';\n    }\n\n    try {\n      mh.validate(other.multihash);\n    } catch (err) {\n      var errorMsg = err.message;\n\n      if (!errorMsg) {\n        // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed';\n      }\n\n      return errorMsg;\n    }\n  }\n};\nmodule.exports = CIDUtil;","map":{"version":3,"names":["mh","require","CIDUtil","checkCIDComponents","other","version","codec","multibaseName","multihash","Uint8Array","validate","err","errorMsg","message","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/cids/src/cid-util.js"],"sourcesContent":["'use strict'\r\n\r\nconst mh = require('multihashes')\r\n\r\nconst CIDUtil = {\r\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Returns an error message if it is not.\r\n   * Returns undefined if it is a valid CID.\r\n   *\r\n   * @param {any} other\r\n   * @returns {string|undefined}\r\n   */\r\n  checkCIDComponents: function (other) {\r\n    if (other == null) {\r\n      return 'null values are not valid CIDs'\r\n    }\r\n\r\n    if (!(other.version === 0 || other.version === 1)) {\r\n      return 'Invalid version, must be a number equal to 1 or 0'\r\n    }\r\n\r\n    if (typeof other.codec !== 'string') {\r\n      return 'codec must be string'\r\n    }\r\n\r\n    if (other.version === 0) {\r\n      if (other.codec !== 'dag-pb') {\r\n        return \"codec must be 'dag-pb' for CIDv0\"\r\n      }\r\n      if (other.multibaseName !== 'base58btc') {\r\n        return \"multibaseName must be 'base58btc' for CIDv0\"\r\n      }\r\n    }\r\n\r\n    if (!(other.multihash instanceof Uint8Array)) {\r\n      return 'multihash must be a Uint8Array'\r\n    }\r\n\r\n    try {\r\n      mh.validate(other.multihash)\r\n    } catch (err) {\r\n      let errorMsg = err.message\r\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\r\n        errorMsg = 'Multihash validation failed'\r\n      }\r\n      return errorMsg\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CIDUtil\r\n"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AAEA,IAAMC,OAAO,GAAG;EACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,4BAAUC,KAAV,EAAiB;IACnC,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjB,OAAO,gCAAP;IACD;;IAED,IAAI,EAAEA,KAAK,CAACC,OAAN,KAAkB,CAAlB,IAAuBD,KAAK,CAACC,OAAN,KAAkB,CAA3C,CAAJ,EAAmD;MACjD,OAAO,mDAAP;IACD;;IAED,IAAI,OAAOD,KAAK,CAACE,KAAb,KAAuB,QAA3B,EAAqC;MACnC,OAAO,sBAAP;IACD;;IAED,IAAIF,KAAK,CAACC,OAAN,KAAkB,CAAtB,EAAyB;MACvB,IAAID,KAAK,CAACE,KAAN,KAAgB,QAApB,EAA8B;QAC5B,OAAO,kCAAP;MACD;;MACD,IAAIF,KAAK,CAACG,aAAN,KAAwB,WAA5B,EAAyC;QACvC,OAAO,6CAAP;MACD;IACF;;IAED,IAAI,EAAEH,KAAK,CAACI,SAAN,YAA2BC,UAA7B,CAAJ,EAA8C;MAC5C,OAAO,gCAAP;IACD;;IAED,IAAI;MACFT,EAAE,CAACU,QAAH,CAAYN,KAAK,CAACI,SAAlB;IACD,CAFD,CAEE,OAAOG,GAAP,EAAY;MACZ,IAAIC,QAAQ,GAAGD,GAAG,CAACE,OAAnB;;MACA,IAAI,CAACD,QAAL,EAAe;QAAE;QACfA,QAAQ,GAAG,6BAAX;MACD;;MACD,OAAOA,QAAP;IACD;EACF;AA5Ca,CAAhB;AA+CAE,MAAM,CAACC,OAAP,GAAiBb,OAAjB"},"metadata":{},"sourceType":"script"}