{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar AccountLib = require('eth-lib/lib/account');\n\nvar Nat = require('eth-lib/lib/nat');\n\nvar elliptic = require('elliptic');\n\nvar secp256k1 = new elliptic.ec('secp256k1');\n\nvar utils = require('../../../caver-utils');\n\nvar SignatureData = require('./signatureData');\n/**\r\n * Representing a PrivateKey class that includes private key string.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar PrivateKey = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * creates a privateKey.\r\n   * @param {string} key - The private key string.\r\n   */\n  function PrivateKey(key) {\n    _classCallCheck(this, PrivateKey);\n\n    this.privateKey = key;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(PrivateKey, [{\n    key: \"privateKey\",\n    get: function get() {\n      return this._privateKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPrivateKey(p)) throw new Error(\"Invalid private key: \".concat(p));\n      this._privateKey = utils.addHexPrefix(p);\n    }\n    /**\r\n     * Signs with transactionHash with key and returns signature.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.sign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550', '0x2810')\r\n     *\r\n     * @param {string} transactionHash The hash of transaction.\r\n     * @param {string|number} chainId The chainId or the network.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(transactionHash, chainId) {\n      var addToV;\n\n      if (chainId === undefined) {\n        throw new Error(\"Insufficient parameters: chainId is undefined.\");\n      } else {\n        chainId = utils.toHex(chainId);\n        addToV = Nat.toNumber(chainId) * 2 + 35;\n      }\n\n      var signature = AccountLib.makeSigner(addToV)(transactionHash, this.privateKey);\n\n      var _AccountLib$decodeSig = AccountLib.decodeSignature(signature).map(function (sig) {\n        return utils.makeEven(utils.trimLeadingZero(sig));\n      }),\n          _AccountLib$decodeSig2 = _slicedToArray(_AccountLib$decodeSig, 3),\n          v = _AccountLib$decodeSig2[0],\n          r = _AccountLib$decodeSig2[1],\n          s = _AccountLib$decodeSig2[2];\n\n      return new SignatureData([v, r, s]);\n    }\n    /**\r\n     * Signs with hashed data and returns signature data.\r\n     * ecsign returns a signature which has v as a parity (0 for even, 1 for odd) of the y-value of a secp256k1 signature.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.ecsign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\r\n     *\r\n     * @param {string} hash The hash to sign.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\n\n  }, {\n    key: \"ecsign\",\n    value: function ecsign(hash) {\n      // ecsign returns recovery id `v` as y-parity (0 or 1).\n      // `AccountLib.makeSigner` makes a sign function that adds addToV to `v`, so use 0.\n      var addToV = 0;\n      var signature = AccountLib.makeSigner(addToV)(hash, this.privateKey);\n\n      var _AccountLib$decodeSig3 = AccountLib.decodeSignature(signature).map(function (sig) {\n        return utils.makeEven(utils.trimLeadingZero(sig));\n      }),\n          _AccountLib$decodeSig4 = _slicedToArray(_AccountLib$decodeSig3, 3),\n          v = _AccountLib$decodeSig4[0],\n          r = _AccountLib$decodeSig4[1],\n          s = _AccountLib$decodeSig4[2]; // This is for converting '0x' to '0x0'\n\n\n      v = utils.toHex(utils.hexToNumber(v));\n      return new SignatureData([v, r, s]);\n    }\n    /**\r\n     * Signs with hashed data and returns `signature`.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.signMessage('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\r\n     *\r\n     * @param {string} messageHash The hash of data to sign.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\n\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(messageHash) {\n      var signature = AccountLib.sign(messageHash, this.privateKey);\n\n      var _AccountLib$decodeSig5 = AccountLib.decodeSignature(signature),\n          _AccountLib$decodeSig6 = _slicedToArray(_AccountLib$decodeSig5, 3),\n          v = _AccountLib$decodeSig6[0],\n          r = _AccountLib$decodeSig6[1],\n          s = _AccountLib$decodeSig6[2];\n\n      return new SignatureData([v, r, s]);\n    }\n    /**\r\n     * Returns public key string.\r\n     *\r\n     * @example\r\n     * const publicKey = privateKey.getPublicKey()\r\n     *\r\n     * @param {boolean} [compressed] Whether in compressed format or not.\r\n     * @return {string} A public key string which is derived from private key string.\r\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey() {\n      var compressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var strippedPrivateKey = utils.stripHexPrefix(this.privateKey);\n      var ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'));\n      if (!compressed) return \"0x\".concat(ecKey.getPublic(false, 'hex').slice(2));\n      return \"0x\".concat(ecKey.getPublic(true, 'hex'));\n    }\n    /**\r\n     * Returns derived address from private key string.\r\n     *\r\n     * @example\r\n     * const address = privateKey.getDerivedAddress()\r\n     *\r\n     * @return {string} A address which is derived from private key string.\r\n     */\n\n  }, {\n    key: \"getDerivedAddress\",\n    value: function getDerivedAddress() {\n      return AccountLib.fromPrivate(this.privateKey).address.toLowerCase();\n    }\n  }]);\n\n  return PrivateKey;\n}();\n\nmodule.exports = PrivateKey;","map":{"version":3,"names":["AccountLib","require","Nat","elliptic","secp256k1","ec","utils","SignatureData","PrivateKey","key","privateKey","_privateKey","p","isValidPrivateKey","Error","addHexPrefix","transactionHash","chainId","addToV","undefined","toHex","toNumber","signature","makeSigner","decodeSignature","map","sig","makeEven","trimLeadingZero","v","r","s","hash","hexToNumber","messageHash","sign","compressed","strippedPrivateKey","stripHexPrefix","ecKey","keyFromPrivate","Buffer","from","getPublic","slice","fromPrivate","address","toLowerCase","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-wallet/src/keyring/privateKey.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst AccountLib = require('eth-lib/lib/account')\r\nconst Nat = require('eth-lib/lib/nat')\r\n\r\nconst elliptic = require('elliptic')\r\n\r\nconst secp256k1 = new elliptic.ec('secp256k1')\r\n\r\nconst utils = require('../../../caver-utils')\r\nconst SignatureData = require('./signatureData')\r\n\r\n/**\r\n * Representing a PrivateKey class that includes private key string.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass PrivateKey {\r\n    /**\r\n     * creates a privateKey.\r\n     * @param {string} key - The private key string.\r\n     */\r\n    constructor(key) {\r\n        this.privateKey = key\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get privateKey() {\r\n        return this._privateKey\r\n    }\r\n\r\n    set privateKey(p) {\r\n        if (!utils.isValidPrivateKey(p)) throw new Error(`Invalid private key: ${p}`)\r\n        this._privateKey = utils.addHexPrefix(p)\r\n    }\r\n\r\n    /**\r\n     * Signs with transactionHash with key and returns signature.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.sign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550', '0x2810')\r\n     *\r\n     * @param {string} transactionHash The hash of transaction.\r\n     * @param {string|number} chainId The chainId or the network.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\r\n    sign(transactionHash, chainId) {\r\n        let addToV\r\n        if (chainId === undefined) {\r\n            throw new Error(`Insufficient parameters: chainId is undefined.`)\r\n        } else {\r\n            chainId = utils.toHex(chainId)\r\n            addToV = Nat.toNumber(chainId) * 2 + 35\r\n        }\r\n        const signature = AccountLib.makeSigner(addToV)(transactionHash, this.privateKey)\r\n        const [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\r\n        return new SignatureData([v, r, s])\r\n    }\r\n\r\n    /**\r\n     * Signs with hashed data and returns signature data.\r\n     * ecsign returns a signature which has v as a parity (0 for even, 1 for odd) of the y-value of a secp256k1 signature.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.ecsign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\r\n     *\r\n     * @param {string} hash The hash to sign.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\r\n    ecsign(hash) {\r\n        // ecsign returns recovery id `v` as y-parity (0 or 1).\r\n        // `AccountLib.makeSigner` makes a sign function that adds addToV to `v`, so use 0.\r\n        const addToV = 0\r\n        const signature = AccountLib.makeSigner(addToV)(hash, this.privateKey)\r\n        let [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\r\n        // This is for converting '0x' to '0x0'\r\n        v = utils.toHex(utils.hexToNumber(v))\r\n\r\n        return new SignatureData([v, r, s])\r\n    }\r\n\r\n    /**\r\n     * Signs with hashed data and returns `signature`.\r\n     *\r\n     * @example\r\n     * const signature = privateKey.signMessage('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\r\n     *\r\n     * @param {string} messageHash The hash of data to sign.\r\n     * @return {SignatureData} A {@link SignatureData}.\r\n     */\r\n    signMessage(messageHash) {\r\n        const signature = AccountLib.sign(messageHash, this.privateKey)\r\n        const [v, r, s] = AccountLib.decodeSignature(signature)\r\n        return new SignatureData([v, r, s])\r\n    }\r\n\r\n    /**\r\n     * Returns public key string.\r\n     *\r\n     * @example\r\n     * const publicKey = privateKey.getPublicKey()\r\n     *\r\n     * @param {boolean} [compressed] Whether in compressed format or not.\r\n     * @return {string} A public key string which is derived from private key string.\r\n     */\r\n    getPublicKey(compressed = false) {\r\n        const strippedPrivateKey = utils.stripHexPrefix(this.privateKey)\r\n\r\n        const ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'))\r\n\r\n        if (!compressed) return `0x${ecKey.getPublic(false, 'hex').slice(2)}`\r\n        return `0x${ecKey.getPublic(true, 'hex')}`\r\n    }\r\n\r\n    /**\r\n     * Returns derived address from private key string.\r\n     *\r\n     * @example\r\n     * const address = privateKey.getDerivedAddress()\r\n     *\r\n     * @return {string} A address which is derived from private key string.\r\n     */\r\n    getDerivedAddress() {\r\n        return AccountLib.fromPrivate(this.privateKey).address.toLowerCase()\r\n    }\r\n}\r\n\r\nmodule.exports = PrivateKey\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}