{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar utils = require('../../caver-utils');\n\nvar _require = require('../../caver-wallet/src/keyring/keyringHelper'),\n    KEY_ROLE = _require.KEY_ROLE;\n\nvar _require2 = require('../../caver-transaction/src/transactionHelper/transactionHelper'),\n    refineSignatures = _require2.refineSignatures;\n\nvar AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction');\n\nvar AbstractFeeDelegatedTransaction = require('../../caver-transaction/src/transactionTypes/abstractFeeDelegatedTransaction');\n/**\r\n * Representing a class to support validation functions.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar Validator = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Creates a Validator.\r\n   *\r\n   * @constructor\r\n   * @param {object} klaytnCall - An object includes klay rpc calls.\r\n   */\n  function Validator(klaytnCall) {\n    _classCallCheck(this, Validator);\n\n    this.klaytnCall = klaytnCall;\n  }\n  /**\r\n   * Validates a signed message by comparing the public key recovered from the signature with the account key of the Klaytn account.\r\n   *\r\n   * @example\r\n   * const address = '0x...'\r\n   * const message = 'Some data'\r\n   * const signature = { v: '0x1c', r: '0xd0b8d...', s: '0x5472e...' } // You can get a signature via `keyring.signMessage(...).signatures[0]`.\r\n   * const isValid = caver.validator.validateSignedMessage(message, signature, address)\r\n   *\r\n   * @memberof Validator\r\n   * @inner\r\n   *\r\n   * @param {string} message The raw message string. If this message is hased with Klaytn specific prefix, the third parameter should be passed as `true`.\r\n   * @param {SignatureData|Array.<SignatureData>} signatures An instance of `SignatureData` or an array of `SignatureData`.\r\n   * @param {string} address The address of the account that signed the message.\r\n   * @param {boolean} [isHashed] (optional, default: `false`) If the `isHashed` is true, the given message will NOT automatically be prefixed with \"\\x19Klaytn Signed Message:\\n\" + message.length + message, and be assumed as already prefixed.\r\n   * @return {Promise<boolean>} The promise will be resolved with a boolean value of whether the signature on the message is valid or not.\r\n   */\n\n\n  _createClass(Validator, [{\n    key: \"validateSignedMessage\",\n    value: function () {\n      var _validateSignedMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message, signatures, address) {\n        var isHashed,\n            getAccountKeyResult,\n            publicKeys,\n            _iterator,\n            _step,\n            sig,\n            recovered,\n            pub,\n            _args = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                isHashed = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n                _context.next = 3;\n                return this.klaytnCall.getAccountKey(address);\n\n              case 3:\n                getAccountKeyResult = _context.sent;\n                // Remove duplicate and format to `Array.<SignatureData>` type.\n                signatures = refineSignatures(signatures);\n                publicKeys = [];\n                _iterator = _createForOfIteratorHelper(signatures);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    sig = _step.value;\n                    recovered = utils.recoverPublicKey(message, sig, isHashed);\n                    pub = recovered.toString();\n                    publicKeys.push(pub);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context.abrupt(\"return\", validateWithAccountKeyAndRole(address, getAccountKeyResult, publicKeys, KEY_ROLE.roleTransactionKey));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validateSignedMessage(_x, _x2, _x3) {\n        return _validateSignedMessage.apply(this, arguments);\n      }\n\n      return validateSignedMessage;\n    }()\n    /**\r\n     * Validates a transaction.\r\n     * This function compares the public keys from the account key of the Klaytn account with the public keys recovered from `signatures`.\r\n     * If the transaction is fee-delegated with the `feePayerSignatures` variable inside, this function compares the public keys recovered from `feePayerSignatures` with the public keys of the fee payer.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({...})\r\n     * const isValid = caver.validator.validateTransaction(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.Transaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"validateTransaction\",\n    value: function () {\n      var _validateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tx) {\n        var isValid;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.validateSender(tx);\n\n              case 2:\n                isValid = _context2.sent;\n\n                if (isValid === true && tx instanceof AbstractFeeDelegatedTransaction) {\n                  isValid = this.validateFeePayer(tx);\n                }\n\n                return _context2.abrupt(\"return\", isValid);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validateTransaction(_x4) {\n        return _validateTransaction.apply(this, arguments);\n      }\n\n      return validateTransaction;\n    }()\n    /**\r\n     * Validates the sender of the transaction.\r\n     * This function compares the public keys of the account key of the Klaytn account with the public keys recovered from `signatures`.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({...})\r\n     * const isValid = caver.validator.validateSender(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.Transaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"validateSender\",\n    value: function () {\n      var _validateSender = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tx) {\n        var fromAccountKey, publicKeys, role;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (tx instanceof AbstractTransaction) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid parameter type: To validate `signatures` field in the transaction, you need to pass the transaction instance.');\n\n              case 2:\n                _context3.next = 4;\n                return this.klaytnCall.getAccountKey(tx.from);\n\n              case 4:\n                fromAccountKey = _context3.sent;\n                publicKeys = tx.recoverPublicKeys();\n                role = tx.type.includes('AccountUpdate') ? KEY_ROLE.roleAccountUpdateKey : KEY_ROLE.roleTransactionKey;\n                return _context3.abrupt(\"return\", validateWithAccountKeyAndRole(tx.from, fromAccountKey, publicKeys, role));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function validateSender(_x5) {\n        return _validateSender.apply(this, arguments);\n      }\n\n      return validateSender;\n    }()\n    /**\r\n     * Validates a fee payer in the transaction.\r\n     * This function compares the public keys of the account key of the fee payer with the public keys recovered from `feePayerSignatures`.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.feeDelegatedValueTransfer.create({...})\r\n     * const isValid = caver.validator.validateFeePayer(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.FeeDelegatedTransaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"validateFeePayer\",\n    value: function () {\n      var _validateFeePayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tx) {\n        var feePayerAccountKey, publicKeys, role;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (tx instanceof AbstractFeeDelegatedTransaction) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid parameter type: To validate `feePayerSignatures` field in the transaction, you need to pass the fee-delegated transaction instance.');\n\n              case 2:\n                _context4.next = 4;\n                return this.klaytnCall.getAccountKey(tx.feePayer);\n\n              case 4:\n                feePayerAccountKey = _context4.sent;\n                publicKeys = tx.recoverFeePayerPublicKeys();\n                role = KEY_ROLE.roleFeePayerKey;\n                return _context4.abrupt(\"return\", validateWithAccountKeyAndRole(tx.feePayer, feePayerAccountKey, publicKeys, role));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function validateFeePayer(_x6) {\n        return _validateFeePayer.apply(this, arguments);\n      }\n\n      return validateFeePayer;\n    }()\n  }]);\n\n  return Validator;\n}();\n\nfunction validateWithAccountKeyAndRole(address, accountKey, publicKeys, role) {\n  var isValid = false; // For accounts that have not yet been applied in Klaytn's state, the return value of `caver.rpc.klay.getAccountKey` is null.\n  // In this case, the account's key has never been updated, so the logic is the same as in AccountKeyLegacy.\n\n  if (accountKey === null) accountKey = {\n    keyType: 1,\n    key: {}\n  };\n\n  switch (accountKey.keyType) {\n    case 1:\n      // TODO: If an invalid signature is included, it should be changed to return false.\n      // if (signatures.length > 1) return isValid\n      var _iterator2 = _createForOfIteratorHelper(publicKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var pub = _step2.value;\n          var recoveredAddress = utils.publicKeyToAddress(pub);\n\n          if (recoveredAddress.toLowerCase() === address.toLowerCase()) {\n            isValid = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      break;\n\n    case 2:\n      // TODO: If an invalid signature is included, it should be changed to return false.\n      // if (signatures.length > 1) return isValid\n      var _iterator3 = _createForOfIteratorHelper(publicKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _pub = _step3.value;\n          var xyPoints = utils.xyPointFromPublicKey(_pub);\n\n          if (xyPoints[0].toLowerCase() === accountKey.key.x.toLowerCase() && xyPoints[1].toLowerCase() === accountKey.key.y.toLowerCase()) {\n            isValid = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      break;\n\n    case 3:\n      break;\n\n    case 4:\n      // TODO: If an invalid signature is included, it should be changed to return false.\n      // if (signatures.length > accountKey.key.keys.length) return isValid\n      var weightSum = 0;\n      var threshold = accountKey.key.threshold;\n\n      var _iterator4 = _createForOfIteratorHelper(publicKeys),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _pub2 = _step4.value;\n\n          var _iterator5 = _createForOfIteratorHelper(accountKey.key.keys),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var pubKey = _step5.value;\n\n              var _xyPoints = utils.xyPointFromPublicKey(_pub2);\n\n              if (_xyPoints[0].toLowerCase() === pubKey.key.x.toLowerCase() && _xyPoints[1].toLowerCase() === pubKey.key.y.toLowerCase()) {\n                weightSum += pubKey.weight;\n                break;\n              }\n            } // If sum of weight is satisfied threshold, signatures are valid.\n\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          if (weightSum >= threshold) {\n            isValid = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      break;\n\n    case 5:\n      // If the AccountKey of the account is AccountKeyRoleBased,\n      // it is judged as valid only if the signature is signed using valid role key.\n      var roleKey = accountKey.key[role];\n      if (accountKey.key[role].keyType === 5) throw new Error(\"Invalid account key type: nested composite type\");\n      isValid = validateWithAccountKeyAndRole(address, roleKey, publicKeys);\n      break;\n\n    default:\n      throw new Error(\"Invalid account key type\");\n  }\n\n  return isValid;\n}\n\nmodule.exports = Validator;","map":{"version":3,"names":["utils","require","KEY_ROLE","refineSignatures","AbstractTransaction","AbstractFeeDelegatedTransaction","Validator","klaytnCall","message","signatures","address","isHashed","getAccountKey","getAccountKeyResult","publicKeys","sig","recovered","recoverPublicKey","pub","toString","push","validateWithAccountKeyAndRole","roleTransactionKey","tx","validateSender","isValid","validateFeePayer","Error","from","fromAccountKey","recoverPublicKeys","role","type","includes","roleAccountUpdateKey","feePayer","feePayerAccountKey","recoverFeePayerPublicKeys","roleFeePayerKey","accountKey","keyType","key","recoveredAddress","publicKeyToAddress","toLowerCase","xyPoints","xyPointFromPublicKey","x","y","weightSum","threshold","keys","pubKey","weight","roleKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-validator/src/index.js"],"sourcesContent":["/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst utils = require('../../caver-utils')\r\nconst { KEY_ROLE } = require('../../caver-wallet/src/keyring/keyringHelper')\r\nconst { refineSignatures } = require('../../caver-transaction/src/transactionHelper/transactionHelper')\r\nconst AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction')\r\nconst AbstractFeeDelegatedTransaction = require('../../caver-transaction/src/transactionTypes/abstractFeeDelegatedTransaction')\r\n\r\n/**\r\n * Representing a class to support validation functions.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass Validator {\r\n    /**\r\n     * Creates a Validator.\r\n     *\r\n     * @constructor\r\n     * @param {object} klaytnCall - An object includes klay rpc calls.\r\n     */\r\n    constructor(klaytnCall) {\r\n        this.klaytnCall = klaytnCall\r\n    }\r\n\r\n    /**\r\n     * Validates a signed message by comparing the public key recovered from the signature with the account key of the Klaytn account.\r\n     *\r\n     * @example\r\n     * const address = '0x...'\r\n     * const message = 'Some data'\r\n     * const signature = { v: '0x1c', r: '0xd0b8d...', s: '0x5472e...' } // You can get a signature via `keyring.signMessage(...).signatures[0]`.\r\n     * const isValid = caver.validator.validateSignedMessage(message, signature, address)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {string} message The raw message string. If this message is hased with Klaytn specific prefix, the third parameter should be passed as `true`.\r\n     * @param {SignatureData|Array.<SignatureData>} signatures An instance of `SignatureData` or an array of `SignatureData`.\r\n     * @param {string} address The address of the account that signed the message.\r\n     * @param {boolean} [isHashed] (optional, default: `false`) If the `isHashed` is true, the given message will NOT automatically be prefixed with \"\\x19Klaytn Signed Message:\\n\" + message.length + message, and be assumed as already prefixed.\r\n     * @return {Promise<boolean>} The promise will be resolved with a boolean value of whether the signature on the message is valid or not.\r\n     */\r\n    async validateSignedMessage(message, signatures, address, isHashed = false) {\r\n        const getAccountKeyResult = await this.klaytnCall.getAccountKey(address)\r\n\r\n        // Remove duplicate and format to `Array.<SignatureData>` type.\r\n        signatures = refineSignatures(signatures)\r\n\r\n        const publicKeys = []\r\n        for (const sig of signatures) {\r\n            const recovered = utils.recoverPublicKey(message, sig, isHashed)\r\n            const pub = recovered.toString()\r\n            publicKeys.push(pub)\r\n        }\r\n\r\n        return validateWithAccountKeyAndRole(address, getAccountKeyResult, publicKeys, KEY_ROLE.roleTransactionKey)\r\n    }\r\n\r\n    /**\r\n     * Validates a transaction.\r\n     * This function compares the public keys from the account key of the Klaytn account with the public keys recovered from `signatures`.\r\n     * If the transaction is fee-delegated with the `feePayerSignatures` variable inside, this function compares the public keys recovered from `feePayerSignatures` with the public keys of the fee payer.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({...})\r\n     * const isValid = caver.validator.validateTransaction(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.Transaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\r\n    async validateTransaction(tx) {\r\n        let isValid = await this.validateSender(tx)\r\n\r\n        if (isValid === true && tx instanceof AbstractFeeDelegatedTransaction) {\r\n            isValid = this.validateFeePayer(tx)\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    /**\r\n     * Validates the sender of the transaction.\r\n     * This function compares the public keys of the account key of the Klaytn account with the public keys recovered from `signatures`.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({...})\r\n     * const isValid = caver.validator.validateSender(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.Transaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\r\n    async validateSender(tx) {\r\n        if (!(tx instanceof AbstractTransaction))\r\n            throw new Error(\r\n                'Invalid parameter type: To validate `signatures` field in the transaction, you need to pass the transaction instance.'\r\n            )\r\n        const fromAccountKey = await this.klaytnCall.getAccountKey(tx.from)\r\n        const publicKeys = tx.recoverPublicKeys()\r\n\r\n        const role = tx.type.includes('AccountUpdate') ? KEY_ROLE.roleAccountUpdateKey : KEY_ROLE.roleTransactionKey\r\n\r\n        return validateWithAccountKeyAndRole(tx.from, fromAccountKey, publicKeys, role)\r\n    }\r\n\r\n    /**\r\n     * Validates a fee payer in the transaction.\r\n     * This function compares the public keys of the account key of the fee payer with the public keys recovered from `feePayerSignatures`.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.feeDelegatedValueTransfer.create({...})\r\n     * const isValid = caver.validator.validateFeePayer(tx)\r\n     *\r\n     * @memberof Validator\r\n     * @inner\r\n     *\r\n     * @param {module:Transaction.FeeDelegatedTransaction} tx An instance of transaction to validate.\r\n     * @return {boolean}\r\n     */\r\n    async validateFeePayer(tx) {\r\n        if (!(tx instanceof AbstractFeeDelegatedTransaction))\r\n            throw new Error(\r\n                'Invalid parameter type: To validate `feePayerSignatures` field in the transaction, you need to pass the fee-delegated transaction instance.'\r\n            )\r\n        const feePayerAccountKey = await this.klaytnCall.getAccountKey(tx.feePayer)\r\n        const publicKeys = tx.recoverFeePayerPublicKeys()\r\n\r\n        const role = KEY_ROLE.roleFeePayerKey\r\n\r\n        return validateWithAccountKeyAndRole(tx.feePayer, feePayerAccountKey, publicKeys, role)\r\n    }\r\n}\r\n\r\nfunction validateWithAccountKeyAndRole(address, accountKey, publicKeys, role) {\r\n    let isValid = false\r\n\r\n    // For accounts that have not yet been applied in Klaytn's state, the return value of `caver.rpc.klay.getAccountKey` is null.\r\n    // In this case, the account's key has never been updated, so the logic is the same as in AccountKeyLegacy.\r\n    if (accountKey === null) accountKey = { keyType: 1, key: {} }\r\n\r\n    switch (accountKey.keyType) {\r\n        case 1:\r\n            // TODO: If an invalid signature is included, it should be changed to return false.\r\n            // if (signatures.length > 1) return isValid\r\n            for (const pub of publicKeys) {\r\n                const recoveredAddress = utils.publicKeyToAddress(pub)\r\n\r\n                if (recoveredAddress.toLowerCase() === address.toLowerCase()) {\r\n                    isValid = true\r\n                    break\r\n                }\r\n            }\r\n            break\r\n        case 2:\r\n            // TODO: If an invalid signature is included, it should be changed to return false.\r\n            // if (signatures.length > 1) return isValid\r\n            for (const pub of publicKeys) {\r\n                const xyPoints = utils.xyPointFromPublicKey(pub)\r\n                if (\r\n                    xyPoints[0].toLowerCase() === accountKey.key.x.toLowerCase() &&\r\n                    xyPoints[1].toLowerCase() === accountKey.key.y.toLowerCase()\r\n                ) {\r\n                    isValid = true\r\n                    break\r\n                }\r\n            }\r\n            break\r\n        case 3:\r\n            break\r\n        case 4:\r\n            // TODO: If an invalid signature is included, it should be changed to return false.\r\n            // if (signatures.length > accountKey.key.keys.length) return isValid\r\n            let weightSum = 0\r\n            const threshold = accountKey.key.threshold\r\n\r\n            for (const pub of publicKeys) {\r\n                for (const pubKey of accountKey.key.keys) {\r\n                    const xyPoints = utils.xyPointFromPublicKey(pub)\r\n                    if (\r\n                        xyPoints[0].toLowerCase() === pubKey.key.x.toLowerCase() &&\r\n                        xyPoints[1].toLowerCase() === pubKey.key.y.toLowerCase()\r\n                    ) {\r\n                        weightSum += pubKey.weight\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // If sum of weight is satisfied threshold, signatures are valid.\r\n                if (weightSum >= threshold) {\r\n                    isValid = true\r\n                    break\r\n                }\r\n            }\r\n            break\r\n        case 5:\r\n            // If the AccountKey of the account is AccountKeyRoleBased,\r\n            // it is judged as valid only if the signature is signed using valid role key.\r\n            const roleKey = accountKey.key[role]\r\n            if (accountKey.key[role].keyType === 5) throw new Error(`Invalid account key type: nested composite type`)\r\n            isValid = validateWithAccountKeyAndRole(address, roleKey, publicKeys)\r\n            break\r\n        default:\r\n            throw new Error(`Invalid account key type`)\r\n    }\r\n\r\n    return isValid\r\n}\r\n\r\nmodule.exports = Validator\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}