{"ast":null,"code":"'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nvar _require = require('./base-table'),\n    baseTable = _require.baseTable;\n/**\r\n * @type {Map<CodecNumber,CodecName>}\r\n */\n\n\nvar nameTable = new Map();\n\nfor (var encodingName in baseTable) {\n  var code = baseTable[encodingName];\n  nameTable.set(code,\n  /** @type {CodecName} */\n  encodingName);\n}\n\nmodule.exports = Object.freeze(nameTable);","map":{"version":3,"names":["require","baseTable","nameTable","Map","encodingName","code","set","module","exports","Object","freeze"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/node_modules/multicodec/src/int-table.js"],"sourcesContent":["'use strict'\r\n\r\n/** @typedef {import('./generated-types').CodecName} CodecName */\r\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\r\n\r\nconst { baseTable } = require('./base-table')\r\n\r\n/**\r\n * @type {Map<CodecNumber,CodecName>}\r\n */\r\nconst nameTable = new Map()\r\n\r\nfor (const encodingName in baseTable) {\r\n  const code = baseTable[encodingName]\r\n  nameTable.set(code, /** @type {CodecName} */(encodingName))\r\n}\r\n\r\nmodule.exports = Object.freeze(nameTable)\r\n"],"mappings":"AAAA;AAEA;;AACA;;AAEA,eAAsBA,OAAO,CAAC,cAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;AAEA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AAEA,KAAK,IAAMC,YAAX,IAA2BH,SAA3B,EAAsC;EACpC,IAAMI,IAAI,GAAGJ,SAAS,CAACG,YAAD,CAAtB;EACAF,SAAS,CAACI,GAAV,CAAcD,IAAd;EAAoB;EAAyBD,YAA7C;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAcR,SAAd,CAAjB"},"metadata":{},"sourceType":"script"}