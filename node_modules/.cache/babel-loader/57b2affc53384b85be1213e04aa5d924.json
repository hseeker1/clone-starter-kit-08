{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../../caver-contract');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n    kip17JsonInterface = _require.kip17JsonInterface,\n    kip17ByteCode = _require.kip17ByteCode,\n    determineSendParams = _require.determineSendParams,\n    formatParamForUint256 = _require.formatParamForUint256,\n    interfaceIds = _require.interfaceIds;\n\nvar _require2 = require('../../caver-utils/src'),\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex;\n\nvar _require3 = require('../../caver-utils/src'),\n    isAddress = _require3.isAddress;\n\nvar KIP13 = require('./kip13');\n/**\r\n * The KIP17 class that helps you easily handle a smart contract that implements KIP-17 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\r\n * @hideconstructor\r\n * @class\r\n */\n\n\nvar KIP17 = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(KIP17, _Contract);\n\n  var _super = _createSuper(KIP17);\n\n  /**\r\n   * KIP17 class represents the KIP-17 token contract.\r\n   *\r\n   * @constructor\r\n   * @param {string} tokenAddress - The KIP-17 token contract address.\r\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n   */\n  function KIP17(tokenAddress) {\n    var abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip17JsonInterface;\n\n    _classCallCheck(this, KIP17);\n\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    return _super.call(this, abi, tokenAddress);\n  }\n  /**\r\n   * Clones the current KIP17 instance.\r\n   *\r\n   * @example\r\n   * const cloned = kip17.clone()\r\n   * const cloned = kip17.clone('0x{new kip17 address}')\r\n   *\r\n   * @param {string} [tokenAddress] The address of the token contract.\r\n   * @return {KIP17}\r\n   */\n\n\n  _createClass(KIP17, [{\n    key: \"clone\",\n    value: function clone() {\n      var tokenAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.address;\n      var cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n      cloned.setWallet(this._wallet);\n      return cloned;\n    }\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await kip17.detectInterface()\r\n     *\r\n     * @return {Promise<KIP17.KIP17DetectedObject>}\r\n     */\n\n  }, {\n    key: \"detectInterface\",\n    value: function () {\n      var _detectInterface = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n\n        var detected, notSupportedMsg, contractAddress, isSupported;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                detected = {\n                  IKIP17: false,\n                  IKIP17Metadata: false,\n                  IKIP17Enumerable: false,\n                  IKIP17Mintable: false,\n                  IKIP17MetadataMintable: false,\n                  IKIP17Burnable: false,\n                  IKIP17Pausable: false\n                };\n                notSupportedMsg = \"This contract does not support KIP-13.\";\n                contractAddress = this._address;\n                _context2.prev = 3;\n                _context2.next = 6;\n                return KIP13.isImplementedKIP13Interface(contractAddress);\n\n              case 6:\n                isSupported = _context2.sent;\n\n                if (!(isSupported !== true)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(notSupportedMsg);\n\n              case 9:\n                _context2.next = 11;\n                return this.supportsInterface(interfaceIds.kip17.IKIP17);\n\n              case 11:\n                detected.IKIP17 = _context2.sent;\n\n                if (!(detected.IKIP17 === false)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", detected);\n\n              case 14:\n                _context2.next = 16;\n                return Promise.all(Object.keys(interfaceIds.kip17).map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(interfaceName) {\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(interfaceIds.kip17[interfaceName] !== interfaceIds.kip17.IKIP17)) {\n                              _context.next = 4;\n                              break;\n                            }\n\n                            _context.next = 3;\n                            return _this.supportsInterface(interfaceIds.kip17[interfaceName]);\n\n                          case 3:\n                            detected[interfaceName] = _context.sent;\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 16:\n                return _context2.abrupt(\"return\", detected);\n\n              case 19:\n                _context2.prev = 19;\n                _context2.t0 = _context2[\"catch\"](3);\n                throw new Error(notSupportedMsg);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 19]]);\n      }));\n\n      function detectInterface() {\n        return _detectInterface.apply(this, arguments);\n      }\n\n      return detectInterface;\n    }()\n    /**\r\n     * Returns `true` if this contract implements the interface defined by `interfaceId`.\r\n     *\r\n     * @example\r\n     * const supported = await kip17.supportsInterface('0x80ac58cd')\r\n     *\r\n     * @param {string} interfaceId The interface id to check.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"supportsInterface\",\n    value: function () {\n      var _supportsInterface = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(interfaceId) {\n        var isSupported;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.methods.supportsInterface(interfaceId).call();\n\n              case 2:\n                isSupported = _context3.sent;\n                return _context3.abrupt(\"return\", isSupported);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function supportsInterface(_x2) {\n        return _supportsInterface.apply(this, arguments);\n      }\n\n      return supportsInterface;\n    }()\n    /**\r\n     * Returns the name of the token.\r\n     *\r\n     * @example\r\n     * const name = await kip17.name()\r\n     *\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"name\",\n    value: function () {\n      var _name = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var name;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.methods.name().call();\n\n              case 2:\n                name = _context4.sent;\n                return _context4.abrupt(\"return\", name);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function name() {\n        return _name.apply(this, arguments);\n      }\n\n      return name;\n    }()\n    /**\r\n     * Returns the symbol of the token.\r\n     *\r\n     * @example\r\n     * const symbol = await kip17.symbol()\r\n     *\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"symbol\",\n    value: function () {\n      var _symbol = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var symbol;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.methods.symbol().call();\n\n              case 2:\n                symbol = _context5.sent;\n                return _context5.abrupt(\"return\", symbol);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function symbol() {\n        return _symbol.apply(this, arguments);\n      }\n\n      return symbol;\n    }()\n    /**\r\n     * Returns the URI for a given token id.\r\n     *\r\n     * @example\r\n     * const tokenURI = await kip17.tokenURI(0)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"tokenURI\",\n    value: function () {\n      var _tokenURI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(tokenId) {\n        var tokenURI;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.methods.tokenURI(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                tokenURI = _context6.sent;\n                return _context6.abrupt(\"return\", tokenURI);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function tokenURI(_x3) {\n        return _tokenURI.apply(this, arguments);\n      }\n\n      return tokenURI;\n    }()\n    /**\r\n     * Returns the total number of tokens minted by the contract.\r\n     *\r\n     * @example\r\n     * const totalSupply = await kip17.totalSupply()\r\n     *\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"totalSupply\",\n    value: function () {\n      var _totalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var totalSupply;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.methods.totalSupply().call();\n\n              case 2:\n                totalSupply = _context7.sent;\n                return _context7.abrupt(\"return\", new BigNumber(totalSupply));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function totalSupply() {\n        return _totalSupply.apply(this, arguments);\n      }\n\n      return totalSupply;\n    }()\n    /**\r\n     * Searches the `owner`'s token list for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\r\n     *\r\n     * @example\r\n     * const token = await kip17.tokenOfOwnerByIndex('0x{address in hex}', 5)\r\n     *\r\n     * @param {string} owner The address of the account who owns tokens.\r\n     * @param {BigNumber|string|number} index The index of a token in owner's token list.\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"tokenOfOwnerByIndex\",\n    value: function () {\n      var _tokenOfOwnerByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(owner, index) {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n\n              case 2:\n                token = _context8.sent;\n                return _context8.abrupt(\"return\", new BigNumber(token));\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function tokenOfOwnerByIndex(_x4, _x5) {\n        return _tokenOfOwnerByIndex.apply(this, arguments);\n      }\n\n      return tokenOfOwnerByIndex;\n    }()\n    /**\r\n     * Searches the list of all tokens in this contract for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\r\n     * It reverts if the index is greater or equal to the total number of tokens.\r\n     *\r\n     * @example\r\n     * const token = await kip17.tokenByIndex(1)\r\n     *\r\n     * @param {BigNumber|string|number} index The index of the token to query.\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"tokenByIndex\",\n    value: function () {\n      var _tokenByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(index) {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.methods.tokenByIndex(formatParamForUint256(index)).call();\n\n              case 2:\n                token = _context9.sent;\n                return _context9.abrupt(\"return\", new BigNumber(token));\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function tokenByIndex(_x6) {\n        return _tokenByIndex.apply(this, arguments);\n      }\n\n      return tokenByIndex;\n    }()\n    /**\r\n     * Returns the balance of the given account address.\r\n     * The balance of an account in KIP-17 is the total number of NFTs (Non-Fungible Tokens) owned by the account.\r\n     *\r\n     * @example\r\n     * const balance = await kip17.balanceOf('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for its balance.\r\n     * @return {Promise<BigNumber>}\r\n     */\n\n  }, {\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(account) {\n        var balance;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.methods.balanceOf(account).call();\n\n              case 2:\n                balance = _context10.sent;\n                return _context10.abrupt(\"return\", new BigNumber(balance));\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function balanceOf(_x7) {\n        return _balanceOf.apply(this, arguments);\n      }\n\n      return balanceOf;\n    }()\n    /**\r\n     * Returns the address of the owner of the specified token id.\r\n     *\r\n     * @example\r\n     * const owner = await kip17.ownerOf(8)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"ownerOf\",\n    value: function () {\n      var _ownerOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(tokenId) {\n        var owner;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.methods.ownerOf(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                owner = _context11.sent;\n                return _context11.abrupt(\"return\", owner);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function ownerOf(_x8) {\n        return _ownerOf.apply(this, arguments);\n      }\n\n      return ownerOf;\n    }()\n    /**\r\n     * Returns the address who was permitted to transfer this token, or 'zero' address, if no address was approved.\r\n     * It reverts if the given token id does not exist.\r\n     *\r\n     * @example\r\n     * const approvedAddress = await kip17.getApproved(10)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"getApproved\",\n    value: function () {\n      var _getApproved = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(tokenId) {\n        var isApproved;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.methods.getApproved(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                isApproved = _context12.sent;\n                return _context12.abrupt(\"return\", isApproved);\n\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getApproved(_x9) {\n        return _getApproved.apply(this, arguments);\n      }\n\n      return getApproved;\n    }()\n    /**\r\n     * Returns `true` if an `operator` is approved to transfer all tokens that belong to the `owner`.\r\n     *\r\n     * @example\r\n     * const isApprovedForAll = await kip17.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\r\n     *\r\n     * @param {string} owner The id of the token.\r\n     * @param {string} operator The id of the token.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isApprovedForAll\",\n    value: function () {\n      var _isApprovedForAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(owner, operator) {\n        var isApprovedForAll;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.methods.isApprovedForAll(owner, operator).call();\n\n              case 2:\n                isApprovedForAll = _context13.sent;\n                return _context13.abrupt(\"return\", isApprovedForAll);\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function isApprovedForAll(_x10, _x11) {\n        return _isApprovedForAll.apply(this, arguments);\n      }\n\n      return isApprovedForAll;\n    }()\n    /**\r\n     * Returns true if the given account is a minter who can issue new tokens in the current contract conforming to KIP-17.\r\n     *\r\n     * @example\r\n     * const isMinter = await kip17.isMinter('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the minting right.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isMinter\",\n    value: function () {\n      var _isMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(account) {\n        var isMinter;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.methods.isMinter(account).call();\n\n              case 2:\n                isMinter = _context14.sent;\n                return _context14.abrupt(\"return\", isMinter);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function isMinter(_x12) {\n        return _isMinter.apply(this, arguments);\n      }\n\n      return isMinter;\n    }()\n    /**\r\n     * Returns true if the contract is paused, and false otherwise.\r\n     *\r\n     * @example\r\n     * const isPaused = await kip17.paused()\r\n     *\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"paused\",\n    value: function () {\n      var _paused = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var isPaused;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.methods.paused().call();\n\n              case 2:\n                isPaused = _context15.sent;\n                return _context15.abrupt(\"return\", isPaused);\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function paused() {\n        return _paused.apply(this, arguments);\n      }\n\n      return paused;\n    }()\n    /**\r\n     * Returns `true` if the given account is a pauser who can suspend transferring tokens.\r\n     *\r\n     * @example\r\n     * const isPauser = await kip17.isPauser('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account you want to check pauser or not.\r\n     * @return {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"isPauser\",\n    value: function () {\n      var _isPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(account) {\n        var isPauser;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.methods.isPauser(account).call();\n\n              case 2:\n                isPauser = _context16.sent;\n                return _context16.abrupt(\"return\", isPauser);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function isPauser(_x13) {\n        return _isPauser.apply(this, arguments);\n      }\n\n      return isPauser;\n    }()\n    /**\r\n     * Approves another address to transfer a token of the given token id.\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token.\r\n     * This method is allowed to call only by the token owner or an approved operator.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.approve('0x{address in hex}', 10, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account who spends tokens in place of the owner.\r\n     * @param {BigNumber|string|number} tokenId The id of the token the spender is allowed to use.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"approve\",\n    value: function () {\n      var _approve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                sendParam = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                executableObj = this.methods.approve(to, formatParamForUint256(tokenId));\n                _context17.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context17.sent;\n                return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function approve(_x14, _x15) {\n        return _approve.apply(this, arguments);\n      }\n\n      return approve;\n    }()\n    /**\r\n     * Approves the given operator `to`, or disallow the given operator, to transfer all tokens of the `owner`.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.setApprovalForAll('0x{address in hex}', false, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of an account to be approved/prohibited to transfer the owner's all tokens.\r\n     * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"setApprovalForAll\",\n    value: function () {\n      var _setApprovalForAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(to, approved) {\n        var sendParam,\n            executableObj,\n            _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                sendParam = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                executableObj = this.methods.setApprovalForAll(to, approved);\n                _context18.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context18.sent;\n                return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function setApprovalForAll(_x16, _x17) {\n        return _setApprovalForAll.apply(this, arguments);\n      }\n\n      return setApprovalForAll;\n    }()\n    /**\r\n     * Transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\r\n     *\r\n     * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\r\n     * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\r\n     *\r\n     * It is recommended to use {@link safeTransferFrom} whenever possible instead of this method.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.transferFrom('0x{address in hex}', '0x{address in hex}', 2, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the owner or approved of the given token.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"transferFrom\",\n    value: function () {\n      var _transferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(from, to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args19 = arguments;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                sendParam = _args19.length > 3 && _args19[3] !== undefined ? _args19[3] : {};\n                executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n                _context19.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context19.sent;\n                return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function transferFrom(_x18, _x19, _x20) {\n        return _transferFrom.apply(this, arguments);\n      }\n\n      return transferFrom;\n    }()\n    /**\r\n     * Safely transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\r\n     *\r\n     * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\r\n     * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 9, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the owner or approved of the given token.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\r\n     * @param {Buffer|string|number} [data] The optional data to send along with the call.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"safeTransferFrom\",\n    value: function () {\n      var _safeTransferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(from, to, tokenId, data) {\n        var sendParam,\n            executableObj,\n            _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sendParam = _args20.length > 4 && _args20[4] !== undefined ? _args20[4] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context20.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = undefined;\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                executableObj = data ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n                _context20.next = 11;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 11:\n                sendParam = _context20.sent;\n                return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 13:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function safeTransferFrom(_x21, _x22, _x23, _x24) {\n        return _safeTransferFrom.apply(this, arguments);\n      }\n\n      return safeTransferFrom;\n    }()\n    /**\r\n     * Adds an account as a minter, who are permitted to mint tokens.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of account to add as minter.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"addMinter\",\n    value: function () {\n      var _addMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(account) {\n        var sendParam,\n            executableObj,\n            _args21 = arguments;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sendParam = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};\n                executableObj = this.methods.addMinter(account);\n                _context21.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context21.sent;\n                return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function addMinter(_x25) {\n        return _addMinter.apply(this, arguments);\n      }\n\n      return addMinter;\n    }()\n    /**\r\n     * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.renounceMinter({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"renounceMinter\",\n    value: function () {\n      var _renounceMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var sendParam,\n            executableObj,\n            _args22 = arguments;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                sendParam = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n                executableObj = this.methods.renounceMinter();\n                _context22.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context22.sent;\n                return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function renounceMinter() {\n        return _renounceMinter.apply(this, arguments);\n      }\n\n      return renounceMinter;\n    }()\n    /**\r\n     * Creates token and assigns them to account, increasing the total supply.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.mint('0x{address in hex}', 20, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account to which the minted token will be allocated.\r\n     * @param {BigNumber|string|number} tokenId The id of token to mint.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"mint\",\n    value: function () {\n      var _mint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args23 = arguments;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                sendParam = _args23.length > 2 && _args23[2] !== undefined ? _args23[2] : {};\n                executableObj = this.methods.mint(to, formatParamForUint256(tokenId));\n                _context23.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context23.sent;\n                return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function mint(_x26, _x27) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /**\r\n     * Creates a token with the given uri and assigns them to the given account.\r\n     * This method increases the total supply of this token.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.mintWithTokenURI('0x{address in hex}', 18, tokenURI, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account to which the minted token will be allocated.\r\n     * @param {BigNumber|string|number} tokenId The id of token to mint.\r\n     * @param {string} tokenURI The uri of token to mint.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"mintWithTokenURI\",\n    value: function () {\n      var _mintWithTokenURI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(to, tokenId, tokenURI) {\n        var sendParam,\n            executableObj,\n            _args24 = arguments;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                sendParam = _args24.length > 3 && _args24[3] !== undefined ? _args24[3] : {};\n                executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n                _context24.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context24.sent;\n                return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function mintWithTokenURI(_x28, _x29, _x30) {\n        return _mintWithTokenURI.apply(this, arguments);\n      }\n\n      return mintWithTokenURI;\n    }()\n    /**\r\n     * Destroys the token of the given token id.\r\n     * Without `sendParam.from` nor `kip17.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.burn(14, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of token to destroy.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"burn\",\n    value: function () {\n      var _burn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(tokenId) {\n        var sendParam,\n            executableObj,\n            _args25 = arguments;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                sendParam = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};\n                executableObj = this.methods.burn(formatParamForUint256(tokenId));\n                _context25.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context25.sent;\n                return _context25.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function burn(_x31) {\n        return _burn.apply(this, arguments);\n      }\n\n      return burn;\n    }()\n    /**\r\n     * Suspends functions related to sending tokens.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.pause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function () {\n      var _pause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var sendParam,\n            executableObj,\n            _args26 = arguments;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                sendParam = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};\n                executableObj = this.methods.pause();\n                _context26.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context26.sent;\n                return _context26.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n\n      return pause;\n    }()\n    /**\r\n     * Resumes the paused contract.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.unpause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\r\n     * @param {BigNumber|string|number} amount The amount of tokens the spender allows to use on behalf of the owner.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"unpause\",\n    value: function () {\n      var _unpause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var sendParam,\n            executableObj,\n            _args27 = arguments;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                sendParam = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};\n                executableObj = this.methods.unpause();\n                _context27.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context27.sent;\n                return _context27.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function unpause() {\n        return _unpause.apply(this, arguments);\n      }\n\n      return unpause;\n    }()\n    /**\r\n     * Adds an account as a pauser that has the right to suspend the contract.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of account to add as pauser.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"addPauser\",\n    value: function () {\n      var _addPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(account) {\n        var sendParam,\n            executableObj,\n            _args28 = arguments;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                sendParam = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};\n                executableObj = this.methods.addPauser(account);\n                _context28.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context28.sent;\n                return _context28.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function addPauser(_x32) {\n        return _addPauser.apply(this, arguments);\n      }\n\n      return addPauser;\n    }()\n    /**\r\n     * Renounces the right to pause the contract. Only a pauser address can renounce its own pausing right.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.renouncePauser({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\n\n  }, {\n    key: \"renouncePauser\",\n    value: function () {\n      var _renouncePauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var sendParam,\n            executableObj,\n            _args29 = arguments;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                sendParam = _args29.length > 0 && _args29[0] !== undefined ? _args29[0] : {};\n                executableObj = this.methods.renouncePauser();\n                _context29.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options);\n\n              case 4:\n                sendParam = _context29.sent;\n                return _context29.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function renouncePauser() {\n        return _renouncePauser.apply(this, arguments);\n      }\n\n      return renouncePauser;\n    }()\n  }], [{\n    key: \"deploy\",\n    value:\n    /**\r\n     * Deploys a KIP-17 token contract to Klaytn network.\r\n     *\r\n     * By default, it returns a KIP17 instance when the deployment is finished.\r\n     * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n     *\r\n     * @example\r\n     * const tokenInfo = { name: 'TokenName', symbol: 'TKN' }\r\n     *\r\n     * // Below example will use `caver.wallet`.\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}')\r\n     *\r\n     * // Use sendOptions instead of deployer address.\r\n     * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, sendOptions)\r\n     *\r\n     * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n     *\r\n     * @ignore\r\n     * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\r\n     * @param {Contract.SendOptions|string} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<*>}\r\n     */\n    function deploy(tokenInfo, sendOptions) {\n      validateDeployParameterForKIP17(tokenInfo);\n      var name = tokenInfo.name,\n          symbol = tokenInfo.symbol;\n      var kip17 = new KIP17(); // If sendOptions is string type, sendOptions means deployer's address\n\n      if (_.isString(sendOptions)) sendOptions = {\n        from: sendOptions,\n        gas: 6600000,\n        value: 0\n      };\n      sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n      return kip17.deploy({\n        data: kip17ByteCode,\n        arguments: [name, symbol]\n      }).send(sendOptions);\n    }\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-17 contract.\r\n     *\r\n     * @typedef {object} KIP17.KIP17DetectedObject\r\n     * @property {boolean} IKIP17 - Whether to implement `IKIP17` interface.\r\n     * @property {boolean} IKIP17Metadata - Whether to implement `IKIP17Metadata` interface.\r\n     * @property {boolean} IKIP17Enumerable - Whether to implement `IKIP17Enumerable` interface.\r\n     * @property {boolean} IKIP17Mintable - Whether to implement `IKIP17Mintable` interface.\r\n     * @property {boolean} IKIP17MetadataMintable - Whether to implement `IKIP17MetadataMintable` interface.\r\n     * @property {boolean} IKIP17Burnable - Whether to implement `IKIP17Burnable` interface.\r\n     * @property {boolean} IKIP17Pausable - Whether to implement `IKIP17Pausable` interface.\r\n     */\n\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await caver.kct.kip17.detectInterface('0x{address in hex}')\r\n     *\r\n     * @param {string} contractAddress The address of the KIP-17 token contract to detect.\r\n     * @return {Promise<KIP17.KIP17DetectedObject>}\r\n     */\n\n  }, {\n    key: \"detectInterface\",\n    value: function detectInterface(contractAddress) {\n      var kip17 = new KIP17(contractAddress);\n      return kip17.detectInterface();\n    }\n  }]);\n\n  return KIP17;\n}(Contract);\n/**\r\n * The byte code of the KIP-17 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip17.byteCode\r\n *\r\n * @static\r\n * @type {string}\r\n */\n\n\nKIP17.byteCode = kip17ByteCode;\n/**\r\n * The abi of the KIP-17 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip17.abi\r\n *\r\n * @static\r\n * @type {Array.<object>}\r\n */\n\nKIP17.abi = kip17JsonInterface;\nmodule.exports = KIP17;","map":{"version":3,"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP17","kip17JsonInterface","kip17ByteCode","determineSendParams","formatParamForUint256","interfaceIds","toBuffer","isHexStrict","toHex","isAddress","KIP13","KIP17","tokenAddress","abi","isString","Error","undefined","options","address","cloned","constructor","jsonInterface","setWallet","_wallet","detected","IKIP17","IKIP17Metadata","IKIP17Enumerable","IKIP17Mintable","IKIP17MetadataMintable","IKIP17Burnable","IKIP17Pausable","notSupportedMsg","contractAddress","_address","isImplementedKIP13Interface","isSupported","supportsInterface","kip17","Promise","all","Object","keys","map","interfaceName","interfaceId","methods","call","name","symbol","tokenId","tokenURI","totalSupply","owner","index","tokenOfOwnerByIndex","token","tokenByIndex","account","balanceOf","balance","ownerOf","getApproved","isApproved","operator","isApprovedForAll","isMinter","paused","isPaused","isPauser","to","sendParam","executableObj","approve","send","approved","setApprovalForAll","from","transferFrom","data","isObject","gas","length","isBuffer","safeTransferFrom","addMinter","renounceMinter","mint","mintWithTokenURI","burn","pause","unpause","addPauser","renouncePauser","tokenInfo","sendOptions","value","deploy","arguments","detectInterface","byteCode","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-kct/src/kip17.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst BigNumber = require('bignumber.js')\r\n\r\nconst Contract = require('../../caver-contract')\r\nconst {\r\n    validateDeployParameterForKIP17,\r\n    kip17JsonInterface,\r\n    kip17ByteCode,\r\n    determineSendParams,\r\n    formatParamForUint256,\r\n    interfaceIds,\r\n} = require('./kctHelper')\r\nconst { toBuffer, isHexStrict, toHex } = require('../../caver-utils/src')\r\nconst { isAddress } = require('../../caver-utils/src')\r\nconst KIP13 = require('./kip13')\r\n\r\n/**\r\n * The KIP17 class that helps you easily handle a smart contract that implements KIP-17 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\r\n * @hideconstructor\r\n * @class\r\n */\r\nclass KIP17 extends Contract {\r\n    /**\r\n     * Deploys a KIP-17 token contract to Klaytn network.\r\n     *\r\n     * By default, it returns a KIP17 instance when the deployment is finished.\r\n     * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\r\n     *\r\n     * @example\r\n     * const tokenInfo = { name: 'TokenName', symbol: 'TKN' }\r\n     *\r\n     * // Below example will use `caver.wallet`.\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}')\r\n     *\r\n     * // Use sendOptions instead of deployer address.\r\n     * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, sendOptions)\r\n     *\r\n     * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\r\n     * const deployed = await caver.kct.kip17.deploy(tokenInfo, '0x{deployer address}', wallet)\r\n     *\r\n     * @ignore\r\n     * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\r\n     * @param {Contract.SendOptions|string} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<*>}\r\n     */\r\n    static deploy(tokenInfo, sendOptions) {\r\n        validateDeployParameterForKIP17(tokenInfo)\r\n\r\n        const { name, symbol } = tokenInfo\r\n        const kip17 = new KIP17()\r\n\r\n        // If sendOptions is string type, sendOptions means deployer's address\r\n        if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 6600000, value: 0 }\r\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000\r\n\r\n        return kip17\r\n            .deploy({\r\n                data: kip17ByteCode,\r\n                arguments: [name, symbol],\r\n            })\r\n            .send(sendOptions)\r\n    }\r\n\r\n    /**\r\n     * An object that defines the parameters required to deploy the KIP-17 contract.\r\n     *\r\n     * @typedef {object} KIP17.KIP17DetectedObject\r\n     * @property {boolean} IKIP17 - Whether to implement `IKIP17` interface.\r\n     * @property {boolean} IKIP17Metadata - Whether to implement `IKIP17Metadata` interface.\r\n     * @property {boolean} IKIP17Enumerable - Whether to implement `IKIP17Enumerable` interface.\r\n     * @property {boolean} IKIP17Mintable - Whether to implement `IKIP17Mintable` interface.\r\n     * @property {boolean} IKIP17MetadataMintable - Whether to implement `IKIP17MetadataMintable` interface.\r\n     * @property {boolean} IKIP17Burnable - Whether to implement `IKIP17Burnable` interface.\r\n     * @property {boolean} IKIP17Pausable - Whether to implement `IKIP17Pausable` interface.\r\n     */\r\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await caver.kct.kip17.detectInterface('0x{address in hex}')\r\n     *\r\n     * @param {string} contractAddress The address of the KIP-17 token contract to detect.\r\n     * @return {Promise<KIP17.KIP17DetectedObject>}\r\n     */\r\n    static detectInterface(contractAddress) {\r\n        const kip17 = new KIP17(contractAddress)\r\n        return kip17.detectInterface()\r\n    }\r\n\r\n    /**\r\n     * KIP17 class represents the KIP-17 token contract.\r\n     *\r\n     * @constructor\r\n     * @param {string} tokenAddress - The KIP-17 token contract address.\r\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\r\n     */\r\n    constructor(tokenAddress, abi = kip17JsonInterface) {\r\n        if (tokenAddress) {\r\n            if (_.isString(tokenAddress)) {\r\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\r\n            } else {\r\n                abi = tokenAddress\r\n                tokenAddress = undefined\r\n            }\r\n        }\r\n        super(abi, tokenAddress)\r\n    }\r\n\r\n    /**\r\n     * Clones the current KIP17 instance.\r\n     *\r\n     * @example\r\n     * const cloned = kip17.clone()\r\n     * const cloned = kip17.clone('0x{new kip17 address}')\r\n     *\r\n     * @param {string} [tokenAddress] The address of the token contract.\r\n     * @return {KIP17}\r\n     */\r\n    clone(tokenAddress = this.options.address) {\r\n        const cloned = new this.constructor(tokenAddress, this.options.jsonInterface)\r\n        cloned.setWallet(this._wallet)\r\n        return cloned\r\n    }\r\n\r\n    /**\r\n     * Returns the information of the interface implemented by the token contract.\r\n     *\r\n     * @example\r\n     * const detected = await kip17.detectInterface()\r\n     *\r\n     * @return {Promise<KIP17.KIP17DetectedObject>}\r\n     */\r\n    async detectInterface() {\r\n        const detected = {\r\n            IKIP17: false,\r\n            IKIP17Metadata: false,\r\n            IKIP17Enumerable: false,\r\n            IKIP17Mintable: false,\r\n            IKIP17MetadataMintable: false,\r\n            IKIP17Burnable: false,\r\n            IKIP17Pausable: false,\r\n        }\r\n\r\n        const notSupportedMsg = `This contract does not support KIP-13.`\r\n        const contractAddress = this._address\r\n\r\n        try {\r\n            const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress)\r\n            if (isSupported !== true) throw new Error(notSupportedMsg)\r\n\r\n            // Since there is an extension that has the same interface id even though it is a different KCT,\r\n            // it must be checked first whether the contract is a KIP-17 contract.\r\n            detected.IKIP17 = await this.supportsInterface(interfaceIds.kip17.IKIP17)\r\n            if (detected.IKIP17 === false) return detected\r\n\r\n            await Promise.all(\r\n                Object.keys(interfaceIds.kip17).map(async interfaceName => {\r\n                    if (interfaceIds.kip17[interfaceName] !== interfaceIds.kip17.IKIP17)\r\n                        detected[interfaceName] = await this.supportsInterface(interfaceIds.kip17[interfaceName])\r\n                })\r\n            )\r\n            return detected\r\n        } catch (e) {\r\n            throw new Error(notSupportedMsg)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if this contract implements the interface defined by `interfaceId`.\r\n     *\r\n     * @example\r\n     * const supported = await kip17.supportsInterface('0x80ac58cd')\r\n     *\r\n     * @param {string} interfaceId The interface id to check.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async supportsInterface(interfaceId) {\r\n        const isSupported = await this.methods.supportsInterface(interfaceId).call()\r\n        return isSupported\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the token.\r\n     *\r\n     * @example\r\n     * const name = await kip17.name()\r\n     *\r\n     * @return {Promise<string>}\r\n     */\r\n    async name() {\r\n        const name = await this.methods.name().call()\r\n        return name\r\n    }\r\n\r\n    /**\r\n     * Returns the symbol of the token.\r\n     *\r\n     * @example\r\n     * const symbol = await kip17.symbol()\r\n     *\r\n     * @return {Promise<string>}\r\n     */\r\n    async symbol() {\r\n        const symbol = await this.methods.symbol().call()\r\n        return symbol\r\n    }\r\n\r\n    /**\r\n     * Returns the URI for a given token id.\r\n     *\r\n     * @example\r\n     * const tokenURI = await kip17.tokenURI(0)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\r\n    async tokenURI(tokenId) {\r\n        const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call()\r\n        return tokenURI\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of tokens minted by the contract.\r\n     *\r\n     * @example\r\n     * const totalSupply = await kip17.totalSupply()\r\n     *\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async totalSupply() {\r\n        const totalSupply = await this.methods.totalSupply().call()\r\n        return new BigNumber(totalSupply)\r\n    }\r\n\r\n    /**\r\n     * Searches the `owner`'s token list for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\r\n     *\r\n     * @example\r\n     * const token = await kip17.tokenOfOwnerByIndex('0x{address in hex}', 5)\r\n     *\r\n     * @param {string} owner The address of the account who owns tokens.\r\n     * @param {BigNumber|string|number} index The index of a token in owner's token list.\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async tokenOfOwnerByIndex(owner, index) {\r\n        const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call()\r\n        return new BigNumber(token)\r\n    }\r\n\r\n    /**\r\n     * Searches the list of all tokens in this contract for the given index, and returns the token id of a token positioned at the matched index in the list if there is a match.\r\n     * It reverts if the index is greater or equal to the total number of tokens.\r\n     *\r\n     * @example\r\n     * const token = await kip17.tokenByIndex(1)\r\n     *\r\n     * @param {BigNumber|string|number} index The index of the token to query.\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async tokenByIndex(index) {\r\n        const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call()\r\n        return new BigNumber(token)\r\n    }\r\n\r\n    /**\r\n     * Returns the balance of the given account address.\r\n     * The balance of an account in KIP-17 is the total number of NFTs (Non-Fungible Tokens) owned by the account.\r\n     *\r\n     * @example\r\n     * const balance = await kip17.balanceOf('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for its balance.\r\n     * @return {Promise<BigNumber>}\r\n     */\r\n    async balanceOf(account) {\r\n        const balance = await this.methods.balanceOf(account).call()\r\n        return new BigNumber(balance)\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the owner of the specified token id.\r\n     *\r\n     * @example\r\n     * const owner = await kip17.ownerOf(8)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\r\n    async ownerOf(tokenId) {\r\n        const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call()\r\n        return owner\r\n    }\r\n\r\n    /**\r\n     * Returns the address who was permitted to transfer this token, or 'zero' address, if no address was approved.\r\n     * It reverts if the given token id does not exist.\r\n     *\r\n     * @example\r\n     * const approvedAddress = await kip17.getApproved(10)\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of the token.\r\n     * @return {Promise<string>}\r\n     */\r\n    async getApproved(tokenId) {\r\n        const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call()\r\n        return isApproved\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if an `operator` is approved to transfer all tokens that belong to the `owner`.\r\n     *\r\n     * @example\r\n     * const isApprovedForAll = await kip17.isApprovedForAll('0x{address in hex}', '0x{address in hex}')\r\n     *\r\n     * @param {string} owner The id of the token.\r\n     * @param {string} operator The id of the token.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isApprovedForAll(owner, operator) {\r\n        const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call()\r\n        return isApprovedForAll\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given account is a minter who can issue new tokens in the current contract conforming to KIP-17.\r\n     *\r\n     * @example\r\n     * const isMinter = await kip17.isMinter('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account to be checked for having the minting right.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isMinter(account) {\r\n        const isMinter = await this.methods.isMinter(account).call()\r\n        return isMinter\r\n    }\r\n\r\n    /**\r\n     * Returns true if the contract is paused, and false otherwise.\r\n     *\r\n     * @example\r\n     * const isPaused = await kip17.paused()\r\n     *\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async paused() {\r\n        const isPaused = await this.methods.paused().call()\r\n        return isPaused\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the given account is a pauser who can suspend transferring tokens.\r\n     *\r\n     * @example\r\n     * const isPauser = await kip17.isPauser('0x{address in hex}')\r\n     *\r\n     * @param {string} account The address of the account you want to check pauser or not.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async isPauser(account) {\r\n        const isPauser = await this.methods.isPauser(account).call()\r\n        return isPauser\r\n    }\r\n\r\n    /**\r\n     * Approves another address to transfer a token of the given token id.\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token.\r\n     * This method is allowed to call only by the token owner or an approved operator.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.approve('0x{address in hex}', 10, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account who spends tokens in place of the owner.\r\n     * @param {BigNumber|string|number} tokenId The id of the token the spender is allowed to use.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async approve(to, tokenId, sendParam = {}) {\r\n        const executableObj = this.methods.approve(to, formatParamForUint256(tokenId))\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Approves the given operator `to`, or disallow the given operator, to transfer all tokens of the `owner`.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.setApprovalForAll('0x{address in hex}', false, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of an account to be approved/prohibited to transfer the owner's all tokens.\r\n     * @param {boolean} approved This operator will be approved if `true`. The operator will be disallowed if `false`.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async setApprovalForAll(to, approved, sendParam = {}) {\r\n        const executableObj = this.methods.setApprovalForAll(to, approved)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\r\n     *\r\n     * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\r\n     * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\r\n     *\r\n     * It is recommended to use {@link safeTransferFrom} whenever possible instead of this method.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.transferFrom('0x{address in hex}', '0x{address in hex}', 2, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the owner or approved of the given token.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async transferFrom(from, to, tokenId, sendParam = {}) {\r\n        const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId))\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Safely transfers the token of the given token id `tokenId` from the token `owner`'s balance to another address.\r\n     *\r\n     * The address who was approved to send the token owner's token (the `operator`) or the token `owner` itself is expected to execute this token transferring transaction.\r\n     * Thus, the approved one or the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip17Instance.options.from`.\r\n     * Without `sendParam.from` nor `kip17Instance.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 9, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} from The address of the owner or approved of the given token.\r\n     * @param {string} to The address of the account to receive the token.\r\n     * @param {BigNumber|string|number} tokenId The id of token you want to transfer.\r\n     * @param {Buffer|string|number} [data] The optional data to send along with the call.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\r\n        if (data && _.isObject(data)) {\r\n            if (data.gas !== undefined || data.from !== undefined) {\r\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\r\n                sendParam = data\r\n                data = undefined\r\n            }\r\n        }\r\n\r\n        if (data && !_.isBuffer(data)) {\r\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\r\n            data = toBuffer(data)\r\n        }\r\n\r\n        const executableObj = data\r\n            ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data)\r\n            : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId))\r\n\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Adds an account as a minter, who are permitted to mint tokens.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.addMinter('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of account to add as minter.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async addMinter(account, sendParam = {}) {\r\n        const executableObj = this.methods.addMinter(account)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.renounceMinter({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async renounceMinter(sendParam = {}) {\r\n        const executableObj = this.methods.renounceMinter()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Creates token and assigns them to account, increasing the total supply.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.mint('0x{address in hex}', 20, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account to which the minted token will be allocated.\r\n     * @param {BigNumber|string|number} tokenId The id of token to mint.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async mint(to, tokenId, sendParam = {}) {\r\n        const executableObj = this.methods.mint(to, formatParamForUint256(tokenId))\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Creates a token with the given uri and assigns them to the given account.\r\n     * This method increases the total supply of this token.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a minter with MinterRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.mintWithTokenURI('0x{address in hex}', 18, tokenURI, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} to The address of the account to which the minted token will be allocated.\r\n     * @param {BigNumber|string|number} tokenId The id of token to mint.\r\n     * @param {string} tokenURI The uri of token to mint.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\r\n        const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Destroys the token of the given token id.\r\n     * Without `sendParam.from` nor `kip17.options.from` being provided, an error would occur.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.burn(14, { from: '0x{address in hex}' })\r\n     *\r\n     * @param {BigNumber|string|number} tokenId The id of token to destroy.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async burn(tokenId, sendParam = {}) {\r\n        const executableObj = this.methods.burn(formatParamForUint256(tokenId))\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Suspends functions related to sending tokens.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.pause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async pause(sendParam = {}) {\r\n        const executableObj = this.methods.pause()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Resumes the paused contract.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.unpause({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\r\n     * @param {BigNumber|string|number} amount The amount of tokens the spender allows to use on behalf of the owner.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async unpause(sendParam = {}) {\r\n        const executableObj = this.methods.unpause()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Adds an account as a pauser that has the right to suspend the contract.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\r\n     *\r\n     * @param {string} account The address of account to add as pauser.\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async addPauser(account, sendParam = {}) {\r\n        const executableObj = this.methods.addPauser(account)\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n\r\n    /**\r\n     * Renounces the right to pause the contract. Only a pauser address can renounce its own pausing right.\r\n     * If `sendParam.from` or `kip17.options.from` were given, it should be a pauser with PauserRole.\r\n     *\r\n     * @example\r\n     * const receipt = await kip17.renouncePauser({ from: '0x{address in hex}' })\r\n     *\r\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\r\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\r\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\r\n     */\r\n    async renouncePauser(sendParam = {}) {\r\n        const executableObj = this.methods.renouncePauser()\r\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\r\n\r\n        return executableObj.send(sendParam)\r\n    }\r\n}\r\n\r\n/**\r\n * The byte code of the KIP-17 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip17.byteCode\r\n *\r\n * @static\r\n * @type {string}\r\n */\r\nKIP17.byteCode = kip17ByteCode\r\n\r\n/**\r\n * The abi of the KIP-17 token contract.\r\n *\r\n * @example\r\n * caver.kct.kip17.abi\r\n *\r\n * @static\r\n * @type {Array.<object>}\r\n */\r\nKIP17.abi = kip17JsonInterface\r\n\r\nmodule.exports = KIP17\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}