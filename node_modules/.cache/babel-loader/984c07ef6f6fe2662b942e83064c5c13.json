{"ast":null,"code":"'use strict';\n\nvar ip = require('./ip');\n\nvar protocols = require('./protocols-table');\n\nvar CID = require('cids');\n\nvar multibase = require('multibase');\n\nvar varint = require('varint');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n\nmodule.exports = Convert; // converts (serializes) addresses\n\nfunction Convert(proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBytes(proto, a);\n  }\n}\n\nConvert.toString = function convertToString(proto, buf) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4: // ipv4\n\n    case 41:\n      // ipv6\n      return bytes2ip(buf);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return bytes2port(buf);\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400: // unix\n\n    case 777:\n      // memory\n      return bytes2str(buf);\n\n    case 421:\n      // ipfs\n      return bytes2mh(buf);\n\n    case 444:\n      // onion\n      return bytes2onion(buf);\n\n    case 445:\n      // onion3\n      return bytes2onion(buf);\n\n    default:\n      return uint8ArrayToString(buf, 'base16');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBytes = function convertToBytes(proto, str) {\n  proto = protocols(proto);\n\n  switch (proto.code) {\n    case 4:\n      // ipv4\n      return ip2bytes(str);\n\n    case 41:\n      // ipv6\n      return ip2bytes(str);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return port2bytes(parseInt(str, 10));\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400: // unix\n\n    case 777:\n      // memory\n      return str2bytes(str);\n\n    case 421:\n      // ipfs\n      return mh2bytes(str);\n\n    case 444:\n      // onion\n      return onion2bytes(str);\n\n    case 445:\n      // onion3\n      return onion32bytes(str);\n\n    default:\n      return uint8ArrayFromString(str, 'base16');\n    // no clue. convert from hex\n  }\n};\n\nfunction ip2bytes(ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ip.toBytes(ipString);\n}\n\nfunction bytes2ip(ipBuff) {\n  var ipString = ip.toString(ipBuff);\n\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ipString;\n}\n\nfunction port2bytes(port) {\n  var buf = new ArrayBuffer(2);\n  var view = new DataView(buf);\n  view.setUint16(0, port);\n  return new Uint8Array(buf);\n}\n\nfunction bytes2port(buf) {\n  var view = new DataView(buf.buffer);\n  return view.getUint16(0);\n}\n\nfunction str2bytes(str) {\n  var buf = uint8ArrayFromString(str);\n  var size = Uint8Array.from(varint.encode(buf.length));\n  return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\n\nfunction bytes2str(buf) {\n  var size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return uint8ArrayToString(buf);\n}\n\nfunction mh2bytes(hash) {\n  // the address is a varint prefixed multihash string representation\n  var mh = new CID(hash).multihash;\n  var size = Uint8Array.from(varint.encode(mh.length));\n  return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\n\nfunction bytes2mh(buf) {\n  var size = varint.decode(buf);\n  var address = buf.slice(varint.decode.bytes);\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return uint8ArrayToString(address, 'base58btc');\n}\n\nfunction onion2bytes(str) {\n  var addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');\n  } // onion addresses do not include the multibase prefix, add it before decoding\n\n\n  var buf = multibase.decode('b' + addr[0]); // onion port number\n\n  var port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n\nfunction onion32bytes(str) {\n  var addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');\n  } // onion addresses do not include the multibase prefix, add it before decoding\n\n\n  var buf = multibase.decode('b' + addr[0]); // onion port number\n\n  var port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n\nfunction bytes2onion(buf) {\n  var addrBytes = buf.slice(0, buf.length - 2);\n  var portBytes = buf.slice(buf.length - 2);\n  var addr = uint8ArrayToString(addrBytes, 'base32');\n  var port = bytes2port(portBytes);\n  return addr + ':' + port;\n}","map":{"version":3,"names":["ip","require","protocols","CID","multibase","varint","uint8ArrayToString","uint8ArrayFromString","uint8ArrayConcat","module","exports","Convert","proto","a","Uint8Array","toString","toBytes","convertToString","buf","code","bytes2ip","bytes2port","bytes2str","bytes2mh","bytes2onion","convertToBytes","str","ip2bytes","port2bytes","parseInt","str2bytes","mh2bytes","onion2bytes","onion32bytes","ipString","isIP","Error","ipBuff","port","ArrayBuffer","view","DataView","setUint16","buffer","getUint16","size","from","encode","length","decode","slice","bytes","hash","mh","multihash","address","addr","split","portBuf","addrBytes","portBytes"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\r\n\r\nconst ip = require('./ip')\r\nconst protocols = require('./protocols-table')\r\nconst CID = require('cids')\r\nconst multibase = require('multibase')\r\nconst varint = require('varint')\r\nconst uint8ArrayToString = require('uint8arrays/to-string')\r\nconst uint8ArrayFromString = require('uint8arrays/from-string')\r\nconst uint8ArrayConcat = require('uint8arrays/concat')\r\n\r\nmodule.exports = Convert\r\n\r\n// converts (serializes) addresses\r\nfunction Convert (proto, a) {\r\n  if (a instanceof Uint8Array) {\r\n    return Convert.toString(proto, a)\r\n  } else {\r\n    return Convert.toBytes(proto, a)\r\n  }\r\n}\r\n\r\nConvert.toString = function convertToString (proto, buf) {\r\n  proto = protocols(proto)\r\n  switch (proto.code) {\r\n    case 4: // ipv4\r\n    case 41: // ipv6\r\n      return bytes2ip(buf)\r\n\r\n    case 6: // tcp\r\n    case 273: // udp\r\n    case 33: // dccp\r\n    case 132: // sctp\r\n      return bytes2port(buf)\r\n\r\n    case 53: // dns\r\n    case 54: // dns4\r\n    case 55: // dns6\r\n    case 56: // dnsaddr\r\n    case 400: // unix\r\n    case 777: // memory\r\n      return bytes2str(buf)\r\n\r\n    case 421: // ipfs\r\n      return bytes2mh(buf)\r\n    case 444: // onion\r\n      return bytes2onion(buf)\r\n    case 445: // onion3\r\n      return bytes2onion(buf)\r\n    default:\r\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\r\n  }\r\n}\r\n\r\nConvert.toBytes = function convertToBytes (proto, str) {\r\n  proto = protocols(proto)\r\n  switch (proto.code) {\r\n    case 4: // ipv4\r\n      return ip2bytes(str)\r\n    case 41: // ipv6\r\n      return ip2bytes(str)\r\n\r\n    case 6: // tcp\r\n    case 273: // udp\r\n    case 33: // dccp\r\n    case 132: // sctp\r\n      return port2bytes(parseInt(str, 10))\r\n\r\n    case 53: // dns\r\n    case 54: // dns4\r\n    case 55: // dns6\r\n    case 56: // dnsaddr\r\n    case 400: // unix\r\n    case 777: // memory\r\n      return str2bytes(str)\r\n\r\n    case 421: // ipfs\r\n      return mh2bytes(str)\r\n    case 444: // onion\r\n      return onion2bytes(str)\r\n    case 445: // onion3\r\n      return onion32bytes(str)\r\n    default:\r\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\r\n  }\r\n}\r\n\r\nfunction ip2bytes (ipString) {\r\n  if (!ip.isIP(ipString)) {\r\n    throw new Error('invalid ip address')\r\n  }\r\n  return ip.toBytes(ipString)\r\n}\r\n\r\nfunction bytes2ip (ipBuff) {\r\n  const ipString = ip.toString(ipBuff)\r\n  if (!ipString || !ip.isIP(ipString)) {\r\n    throw new Error('invalid ip address')\r\n  }\r\n  return ipString\r\n}\r\n\r\nfunction port2bytes (port) {\r\n  const buf = new ArrayBuffer(2)\r\n  const view = new DataView(buf)\r\n  view.setUint16(0, port)\r\n\r\n  return new Uint8Array(buf)\r\n}\r\n\r\nfunction bytes2port (buf) {\r\n  const view = new DataView(buf.buffer)\r\n  return view.getUint16(0)\r\n}\r\n\r\nfunction str2bytes (str) {\r\n  const buf = uint8ArrayFromString(str)\r\n  const size = Uint8Array.from(varint.encode(buf.length))\r\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\r\n}\r\n\r\nfunction bytes2str (buf) {\r\n  const size = varint.decode(buf)\r\n  buf = buf.slice(varint.decode.bytes)\r\n\r\n  if (buf.length !== size) {\r\n    throw new Error('inconsistent lengths')\r\n  }\r\n\r\n  return uint8ArrayToString(buf)\r\n}\r\n\r\nfunction mh2bytes (hash) {\r\n  // the address is a varint prefixed multihash string representation\r\n  const mh = new CID(hash).multihash\r\n  const size = Uint8Array.from(varint.encode(mh.length))\r\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\r\n}\r\n\r\nfunction bytes2mh (buf) {\r\n  const size = varint.decode(buf)\r\n  const address = buf.slice(varint.decode.bytes)\r\n\r\n  if (address.length !== size) {\r\n    throw new Error('inconsistent lengths')\r\n  }\r\n\r\n  return uint8ArrayToString(address, 'base58btc')\r\n}\r\n\r\nfunction onion2bytes (str) {\r\n  const addr = str.split(':')\r\n  if (addr.length !== 2) {\r\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\r\n  }\r\n  if (addr[0].length !== 16) {\r\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\r\n  }\r\n\r\n  // onion addresses do not include the multibase prefix, add it before decoding\r\n  const buf = multibase.decode('b' + addr[0])\r\n\r\n  // onion port number\r\n  const port = parseInt(addr[1], 10)\r\n  if (port < 1 || port > 65536) {\r\n    throw new Error('Port number is not in range(1, 65536)')\r\n  }\r\n  const portBuf = port2bytes(port)\r\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\r\n}\r\n\r\nfunction onion32bytes (str) {\r\n  const addr = str.split(':')\r\n  if (addr.length !== 2) {\r\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\r\n  }\r\n  if (addr[0].length !== 56) {\r\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\r\n  }\r\n  // onion addresses do not include the multibase prefix, add it before decoding\r\n  const buf = multibase.decode('b' + addr[0])\r\n\r\n  // onion port number\r\n  const port = parseInt(addr[1], 10)\r\n  if (port < 1 || port > 65536) {\r\n    throw new Error('Port number is not in range(1, 65536)')\r\n  }\r\n  const portBuf = port2bytes(port)\r\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\r\n}\r\n\r\nfunction bytes2onion (buf) {\r\n  const addrBytes = buf.slice(0, buf.length - 2)\r\n  const portBytes = buf.slice(buf.length - 2)\r\n  const addr = uint8ArrayToString(addrBytes, 'base32')\r\n  const port = bytes2port(portBytes)\r\n  return addr + ':' + port\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}