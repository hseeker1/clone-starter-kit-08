{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toArray\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\n/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./transactionType'),\n    rlpEncodeForLegacyTransaction = _require.rlpEncodeForLegacyTransaction,\n    rlpEncodeForValueTransfer = _require.rlpEncodeForValueTransfer,\n    rlpEncodeForValueTransferMemo = _require.rlpEncodeForValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n    rlpEncodeForFeeDelegatedValueTransfer = _require.rlpEncodeForFeeDelegatedValueTransfer,\n    rlpEncodeForFeeDelegatedValueTransferWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferWithRatio,\n    rlpEncodeForFeeDelegatedValueTransferMemo = _require.rlpEncodeForFeeDelegatedValueTransferMemo,\n    rlpEncodeForAccountUpdate = _require.rlpEncodeForAccountUpdate,\n    rlpEncodeForContractDeploy = _require.rlpEncodeForContractDeploy,\n    rlpEncodeForContractExecution = _require.rlpEncodeForContractExecution,\n    rlpEncodeForFeeDelegatedAccountUpdate = _require.rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio = _require.rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractDeploy = _require.rlpEncodeForFeeDelegatedSmartContractDeploy,\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractExecution = _require.rlpEncodeForFeeDelegatedSmartContractExecution,\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n    rlpEncodeForCancel = _require.rlpEncodeForCancel,\n    rlpEncodeForFeeDelegatedCancel = _require.rlpEncodeForFeeDelegatedCancel,\n    rlpEncodeForFeeDelegatedCancelWithRatio = _require.rlpEncodeForFeeDelegatedCancelWithRatio,\n    rlpEncodeForChainDataAnchoring = _require.rlpEncodeForChainDataAnchoring,\n    parseAccountKey = _require.parseAccountKey;\n\nvar creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.';\n\nfunction encodeRLPByTxType(transaction) {\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'ACCOUNT_UPDATE':\n      return rlpEncodeForAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      return rlpEncodeForFeeDelegatedAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction);\n\n    case 'VALUE_TRANSFER':\n      return rlpEncodeForValueTransfer(transaction);\n\n    case 'VALUE_TRANSFER_MEMO':\n      return rlpEncodeForValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      return rlpEncodeForFeeDelegatedValueTransfer(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      return rlpEncodeForFeeDelegatedValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction);\n\n    case 'SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForContractDeploy(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction);\n\n    case 'SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForFeeDelegatedSmartContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction);\n\n    case 'CANCEL':\n      return rlpEncodeForCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL':\n      return rlpEncodeForFeeDelegatedCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedCancelWithRatio(transaction);\n\n    case 'CHAIN_DATA_ANCHORING':\n      return rlpEncodeForChainDataAnchoring(transaction);\n\n    case 'LEGACY':\n    default:\n      return rlpEncodeForLegacyTransaction(transaction);\n  }\n} // case1) sig === [v, r, s]\n// case2) sig ===\n\n\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n  var decodedValues = RLP.decode(rlpEncoded);\n  var rawTx;\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'VALUE_TRANSFER':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'ACCOUNT_UPDATE':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'CANCEL':\n    case 'CHAIN_DATA_ANCHORING':\n      return _combineSenderRawTransaction(rlpEncoded, sig);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case 'FEE_DELEGATED_CANCEL':\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          var decoded = decodeFromRawTransaction(transaction.senderRawTransaction);\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures);\n        }\n\n        if (transaction.feePayer && transaction.feePayer !== '0x' && transaction.feePayer !== '0x0000000000000000000000000000000000000000' && transaction.feePayerSignatures) {\n          return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'LEGACY':\n    default:\n      rawTx = decodedValues.slice(0, 6).concat(sig[0]);\n      return {\n        rawTransaction: RLP.encode(rawTx),\n        signatures: sig[0],\n        feePayerSignatures: undefined\n      };\n  }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues = _slicedToArray(decodedValues, 1),\n      data = _decodedValues[0];\n\n  var _RLP$decode = RLP.decode(data),\n      _RLP$decode2 = _toArray(_RLP$decode),\n      txType = _RLP$decode2[0],\n      rawTx = _RLP$decode2.slice(1);\n\n  if (!Array.isArray(sig[0])) sig = [sig];\n  sig = refineSignatures(sig);\n  rawTx = [].concat(_toConsumableArray(rawTx), [sig]); // set default feepayer's information in rawTx\n\n  var typeString = utils.getTxTypeStringFromRawTransaction(txType);\n  if (typeString !== undefined && typeString.includes('FEE_DELEGATED')) rawTx = [].concat(_toConsumableArray(rawTx), ['0x0000000000000000000000000000000000000000', [['0x01', '0x', '0x']]]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: sig,\n    feePayerSignatures: undefined\n  };\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues2 = _slicedToArray(decodedValues, 1),\n      data = _decodedValues2[0];\n\n  var _RLP$decode3 = RLP.decode(data),\n      _RLP$decode4 = _toArray(_RLP$decode3),\n      txType = _RLP$decode4[0],\n      rawTx = _RLP$decode4.slice(1);\n\n  if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures];\n  senderSignature = refineSignatures(senderSignature);\n  feePayerSignatures = refineSignatures(feePayerSignatures);\n  rawTx = [].concat(_toConsumableArray(rawTx), [senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: senderSignature,\n    feePayerSignatures: feePayerSignatures\n  };\n} // refineSignatures removes duplication and empty signatures\n\n\nfunction refineSignatures(sigArray) {\n  var set = new Set();\n  var result = [];\n\n  var _iterator = _createForOfIteratorHelper(sigArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var sig = _step.value;\n\n      if (sig.length > 0 && !utils.isEmptySig(sig)) {\n        var sigString = sig.join('');\n\n        if (!set.has(sigString)) {\n          set.add(sigString, true);\n          result.push(sig);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (result.length === 0) result = [['0x01', '0x', '0x']];\n  return result;\n}\n\nfunction extractSignatures(rawTransaction) {\n  var senderSignatures = [];\n  var feePayerSignatures = [];\n\n  var decoded = _decodeFromRawTransaction(rawTransaction);\n\n  senderSignatures = senderSignatures.concat(decoded.signatures);\n\n  if (decoded.feePayerSignatures) {\n    feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures);\n  }\n\n  return {\n    senderSignatures: senderSignatures,\n    feePayerSignatures: feePayerSignatures,\n    decodedTransaction: decoded\n  };\n}\n\nfunction splitFeePayer(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (!typeString || !typeString.includes('FEE_DELEGATED')) throw new Error(\"Failed to split fee payer: not a fee delegated transaction type('\".concat(typeString || 'LEGACY', \"')\"));\n  var txType = rawTransaction.slice(0, 4);\n  var decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)));\n  var detachFeePayer = decodedValues.splice(0, decodedValues.length - 2);\n  detachFeePayer.push('0x0000000000000000000000000000000000000000');\n  detachFeePayer.push([['0x01', '0x', '0x']]);\n  return {\n    senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\n    feePayer: decodedValues[0],\n    feePayerSignatures: decodedValues[1]\n  };\n}\n\nfunction decodeFromRawTransaction(rawTransaction, type) {\n  var decodeResult = _decodeFromRawTransaction(rawTransaction, type);\n\n  switch (decodeResult.type) {\n    case 'ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        decodeResult = parseAccountKey(decodeResult);\n      }\n  }\n\n  return decodeResult;\n}\n\nfunction _decodeFromRawTransaction(rawTransaction, type) {\n  var typeString = type;\n\n  if (typeString === undefined || typeString !== 'LEGACY') {\n    typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n\n    if (typeString === undefined) {\n      typeString = 'LEGACY';\n    } else {\n      rawTransaction = \"0x\".concat(rawTransaction.slice(4));\n    }\n  }\n\n  switch (typeString) {\n    case 'LEGACY':\n      {\n        var _RLP$decode5 = RLP.decode(rawTransaction),\n            _RLP$decode6 = _slicedToArray(_RLP$decode5, 9),\n            nonce = _RLP$decode6[0],\n            gasPrice = _RLP$decode6[1],\n            gas = _RLP$decode6[2],\n            to = _RLP$decode6[3],\n            value = _RLP$decode6[4],\n            data = _RLP$decode6[5],\n            v = _RLP$decode6[6],\n            r = _RLP$decode6[7],\n            s = _RLP$decode6[8];\n\n        return {\n          type: typeString,\n          nonce: nonce,\n          gasPrice: gasPrice,\n          gas: gas,\n          to: to,\n          value: value,\n          data: data,\n          v: v,\n          r: r,\n          s: s,\n          signatures: [v, r, s]\n        };\n      }\n\n    case 'VALUE_TRANSFER':\n      {\n        var _RLP$decode7 = RLP.decode(rawTransaction),\n            _RLP$decode8 = _slicedToArray(_RLP$decode7, 7),\n            _nonce = _RLP$decode8[0],\n            _gasPrice = _RLP$decode8[1],\n            _gas = _RLP$decode8[2],\n            _to = _RLP$decode8[3],\n            _value = _RLP$decode8[4],\n            from = _RLP$decode8[5],\n            signatures = _RLP$decode8[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce,\n          gasPrice: _gasPrice,\n          gas: _gas,\n          to: _to,\n          value: _value,\n          from: from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures: signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      {\n        var _RLP$decode9 = RLP.decode(rawTransaction),\n            _RLP$decode10 = _slicedToArray(_RLP$decode9, 9),\n            _nonce2 = _RLP$decode10[0],\n            _gasPrice2 = _RLP$decode10[1],\n            _gas2 = _RLP$decode10[2],\n            _to2 = _RLP$decode10[3],\n            _value2 = _RLP$decode10[4],\n            _from = _RLP$decode10[5],\n            _signatures = _RLP$decode10[6],\n            feePayer = _RLP$decode10[7],\n            feePayerSignatures = _RLP$decode10[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce2,\n          gasPrice: _gasPrice2,\n          gas: _gas2,\n          to: _to2,\n          value: _value2,\n          from: _from,\n          v: _signatures[0][0],\n          r: _signatures[0][1],\n          s: _signatures[0][2],\n          signatures: _signatures,\n          feePayer: feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures: feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      {\n        var _RLP$decode11 = RLP.decode(rawTransaction),\n            _RLP$decode12 = _slicedToArray(_RLP$decode11, 10),\n            _nonce3 = _RLP$decode12[0],\n            _gasPrice3 = _RLP$decode12[1],\n            _gas3 = _RLP$decode12[2],\n            _to3 = _RLP$decode12[3],\n            _value3 = _RLP$decode12[4],\n            _from2 = _RLP$decode12[5],\n            feeRatio = _RLP$decode12[6],\n            _signatures2 = _RLP$decode12[7],\n            _feePayer = _RLP$decode12[8],\n            _feePayerSignatures = _RLP$decode12[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce3,\n          gasPrice: _gasPrice3,\n          gas: _gas3,\n          to: _to3,\n          value: _value3,\n          from: _from2,\n          feeRatio: feeRatio,\n          v: _signatures2[0][0],\n          r: _signatures2[0][1],\n          s: _signatures2[0][2],\n          signatures: _signatures2,\n          feePayer: _feePayer,\n          payerV: _feePayerSignatures[0][0],\n          payerR: _feePayerSignatures[0][1],\n          payerS: _feePayerSignatures[0][2],\n          feePayerSignatures: _feePayerSignatures\n        };\n      }\n\n    case 'VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode13 = RLP.decode(rawTransaction),\n            _RLP$decode14 = _slicedToArray(_RLP$decode13, 8),\n            _nonce4 = _RLP$decode14[0],\n            _gasPrice4 = _RLP$decode14[1],\n            _gas4 = _RLP$decode14[2],\n            _to4 = _RLP$decode14[3],\n            _value4 = _RLP$decode14[4],\n            _from3 = _RLP$decode14[5],\n            _data = _RLP$decode14[6],\n            _signatures3 = _RLP$decode14[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce4,\n          gasPrice: _gasPrice4,\n          gas: _gas4,\n          to: _to4,\n          value: _value4,\n          from: _from3,\n          data: _data,\n          v: _signatures3[0][0],\n          r: _signatures3[0][1],\n          s: _signatures3[0][2],\n          signatures: _signatures3\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode15 = RLP.decode(rawTransaction),\n            _RLP$decode16 = _slicedToArray(_RLP$decode15, 10),\n            _nonce5 = _RLP$decode16[0],\n            _gasPrice5 = _RLP$decode16[1],\n            _gas5 = _RLP$decode16[2],\n            _to5 = _RLP$decode16[3],\n            _value5 = _RLP$decode16[4],\n            _from4 = _RLP$decode16[5],\n            _data2 = _RLP$decode16[6],\n            _signatures4 = _RLP$decode16[7],\n            _feePayer2 = _RLP$decode16[8],\n            _feePayerSignatures2 = _RLP$decode16[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce5,\n          gasPrice: _gasPrice5,\n          gas: _gas5,\n          to: _to5,\n          value: _value5,\n          from: _from4,\n          data: _data2,\n          v: _signatures4[0][0],\n          r: _signatures4[0][1],\n          s: _signatures4[0][2],\n          signatures: _signatures4,\n          feePayer: _feePayer2,\n          payerV: _feePayerSignatures2[0][0],\n          payerR: _feePayerSignatures2[0][1],\n          payerS: _feePayerSignatures2[0][2],\n          feePayerSignatures: _feePayerSignatures2\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        var _RLP$decode17 = RLP.decode(rawTransaction),\n            _RLP$decode18 = _slicedToArray(_RLP$decode17, 11),\n            _nonce6 = _RLP$decode18[0],\n            _gasPrice6 = _RLP$decode18[1],\n            _gas6 = _RLP$decode18[2],\n            _to6 = _RLP$decode18[3],\n            _value6 = _RLP$decode18[4],\n            _from5 = _RLP$decode18[5],\n            _data3 = _RLP$decode18[6],\n            _feeRatio = _RLP$decode18[7],\n            _signatures5 = _RLP$decode18[8],\n            _feePayer3 = _RLP$decode18[9],\n            _feePayerSignatures3 = _RLP$decode18[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce6,\n          gasPrice: _gasPrice6,\n          gas: _gas6,\n          to: _to6,\n          value: _value6,\n          from: _from5,\n          data: _data3,\n          feeRatio: _feeRatio,\n          v: _signatures5[0][0],\n          r: _signatures5[0][1],\n          s: _signatures5[0][2],\n          signatures: _signatures5,\n          feePayer: _feePayer3,\n          payerV: _feePayerSignatures3[0][0],\n          payerR: _feePayerSignatures3[0][1],\n          payerS: _feePayerSignatures3[0][2],\n          feePayerSignatures: _feePayerSignatures3\n        };\n      }\n\n    case 'ACCOUNT_CREATION':\n      {\n        throw new Error(creationNotSupportError);\n      }\n\n    case 'ACCOUNT_UPDATE':\n      {\n        var _RLP$decode19 = RLP.decode(rawTransaction),\n            _RLP$decode20 = _slicedToArray(_RLP$decode19, 6),\n            _nonce7 = _RLP$decode20[0],\n            _gasPrice7 = _RLP$decode20[1],\n            _gas7 = _RLP$decode20[2],\n            _from6 = _RLP$decode20[3],\n            accountKey = _RLP$decode20[4],\n            _signatures6 = _RLP$decode20[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce7,\n          gasPrice: _gasPrice7,\n          gas: _gas7,\n          from: _from6,\n          accountKey: accountKey,\n          v: _signatures6[0][0],\n          r: _signatures6[0][1],\n          s: _signatures6[0][2],\n          signatures: _signatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      {\n        var _RLP$decode21 = RLP.decode(rawTransaction),\n            _RLP$decode22 = _slicedToArray(_RLP$decode21, 8),\n            _nonce8 = _RLP$decode22[0],\n            _gasPrice8 = _RLP$decode22[1],\n            _gas8 = _RLP$decode22[2],\n            _from7 = _RLP$decode22[3],\n            _accountKey = _RLP$decode22[4],\n            _signatures7 = _RLP$decode22[5],\n            _feePayer4 = _RLP$decode22[6],\n            _feePayerSignatures4 = _RLP$decode22[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce8,\n          gasPrice: _gasPrice8,\n          gas: _gas8,\n          from: _from7,\n          accountKey: _accountKey,\n          v: _signatures7[0][0],\n          r: _signatures7[0][1],\n          s: _signatures7[0][2],\n          signatures: _signatures7,\n          feePayer: _feePayer4,\n          payerV: _feePayerSignatures4[0][0],\n          payerR: _feePayerSignatures4[0][1],\n          payerS: _feePayerSignatures4[0][2],\n          feePayerSignatures: _feePayerSignatures4\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        var _RLP$decode23 = RLP.decode(rawTransaction),\n            _RLP$decode24 = _slicedToArray(_RLP$decode23, 9),\n            _nonce9 = _RLP$decode24[0],\n            _gasPrice9 = _RLP$decode24[1],\n            _gas9 = _RLP$decode24[2],\n            _from8 = _RLP$decode24[3],\n            _accountKey2 = _RLP$decode24[4],\n            _feeRatio2 = _RLP$decode24[5],\n            _signatures8 = _RLP$decode24[6],\n            _feePayer5 = _RLP$decode24[7],\n            _feePayerSignatures5 = _RLP$decode24[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce9,\n          gasPrice: _gasPrice9,\n          gas: _gas9,\n          from: _from8,\n          accountKey: _accountKey2,\n          feeRatio: _feeRatio2,\n          v: _signatures8[0][0],\n          r: _signatures8[0][1],\n          s: _signatures8[0][2],\n          signatures: _signatures8,\n          feePayer: _feePayer5,\n          payerV: _feePayerSignatures5[0][0],\n          payerR: _feePayerSignatures5[0][1],\n          payerS: _feePayerSignatures5[0][2],\n          feePayerSignatures: _feePayerSignatures5\n        };\n      }\n\n    case 'SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode25 = RLP.decode(rawTransaction),\n            _RLP$decode26 = _slicedToArray(_RLP$decode25, 10),\n            _nonce10 = _RLP$decode26[0],\n            _gasPrice10 = _RLP$decode26[1],\n            _gas10 = _RLP$decode26[2],\n            _to7 = _RLP$decode26[3],\n            _value7 = _RLP$decode26[4],\n            _from9 = _RLP$decode26[5],\n            _data4 = _RLP$decode26[6],\n            humanReadable = _RLP$decode26[7],\n            codeFormat = _RLP$decode26[8],\n            _signatures9 = _RLP$decode26[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce10,\n          gasPrice: _gasPrice10,\n          gas: _gas10,\n          to: _to7,\n          value: _value7,\n          from: _from9,\n          data: _data4,\n          humanReadable: humanReadable === '0x01',\n          codeFormat: codeFormat,\n          v: _signatures9[0][0],\n          r: _signatures9[0][1],\n          s: _signatures9[0][2],\n          signatures: _signatures9\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode27 = RLP.decode(rawTransaction),\n            _RLP$decode28 = _slicedToArray(_RLP$decode27, 12),\n            _nonce11 = _RLP$decode28[0],\n            _gasPrice11 = _RLP$decode28[1],\n            _gas11 = _RLP$decode28[2],\n            _to8 = _RLP$decode28[3],\n            _value8 = _RLP$decode28[4],\n            _from10 = _RLP$decode28[5],\n            _data5 = _RLP$decode28[6],\n            _humanReadable = _RLP$decode28[7],\n            _codeFormat = _RLP$decode28[8],\n            _signatures10 = _RLP$decode28[9],\n            _feePayer6 = _RLP$decode28[10],\n            _feePayerSignatures6 = _RLP$decode28[11];\n\n        return {\n          type: typeString,\n          nonce: _nonce11,\n          gasPrice: _gasPrice11,\n          gas: _gas11,\n          to: _to8,\n          value: _value8,\n          from: _from10,\n          data: _data5,\n          humanReadable: _humanReadable === '0x01',\n          codeFormat: _codeFormat,\n          v: _signatures10[0][0],\n          r: _signatures10[0][1],\n          s: _signatures10[0][2],\n          signatures: _signatures10,\n          feePayer: _feePayer6,\n          payerV: _feePayerSignatures6[0][0],\n          payerR: _feePayerSignatures6[0][1],\n          payerS: _feePayerSignatures6[0][2],\n          feePayerSignatures: _feePayerSignatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      {\n        var _RLP$decode29 = RLP.decode(rawTransaction),\n            _RLP$decode30 = _slicedToArray(_RLP$decode29, 13),\n            _nonce12 = _RLP$decode30[0],\n            _gasPrice12 = _RLP$decode30[1],\n            _gas12 = _RLP$decode30[2],\n            _to9 = _RLP$decode30[3],\n            _value9 = _RLP$decode30[4],\n            _from11 = _RLP$decode30[5],\n            _data6 = _RLP$decode30[6],\n            _humanReadable2 = _RLP$decode30[7],\n            _feeRatio3 = _RLP$decode30[8],\n            _codeFormat2 = _RLP$decode30[9],\n            _signatures11 = _RLP$decode30[10],\n            _feePayer7 = _RLP$decode30[11],\n            _feePayerSignatures7 = _RLP$decode30[12];\n\n        return {\n          type: typeString,\n          nonce: _nonce12,\n          gasPrice: _gasPrice12,\n          gas: _gas12,\n          to: _to9,\n          value: _value9,\n          from: _from11,\n          data: _data6,\n          humanReadable: _humanReadable2 === '0x01',\n          feeRatio: _feeRatio3,\n          codeFormat: _codeFormat2,\n          v: _signatures11[0][0],\n          r: _signatures11[0][1],\n          s: _signatures11[0][2],\n          signatures: _signatures11,\n          feePayer: _feePayer7,\n          payerV: _feePayerSignatures7[0][0],\n          payerR: _feePayerSignatures7[0][1],\n          payerS: _feePayerSignatures7[0][2],\n          feePayerSignatures: _feePayerSignatures7\n        };\n      }\n\n    case 'SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode31 = RLP.decode(rawTransaction),\n            _RLP$decode32 = _slicedToArray(_RLP$decode31, 8),\n            _nonce13 = _RLP$decode32[0],\n            _gasPrice13 = _RLP$decode32[1],\n            _gas13 = _RLP$decode32[2],\n            _to10 = _RLP$decode32[3],\n            _value10 = _RLP$decode32[4],\n            _from12 = _RLP$decode32[5],\n            _data7 = _RLP$decode32[6],\n            _signatures12 = _RLP$decode32[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce13,\n          gasPrice: _gasPrice13,\n          gas: _gas13,\n          to: _to10,\n          value: _value10,\n          from: _from12,\n          data: _data7,\n          v: _signatures12[0][0],\n          r: _signatures12[0][1],\n          s: _signatures12[0][2],\n          signatures: _signatures12\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode33 = RLP.decode(rawTransaction),\n            _RLP$decode34 = _slicedToArray(_RLP$decode33, 10),\n            _nonce14 = _RLP$decode34[0],\n            _gasPrice14 = _RLP$decode34[1],\n            _gas14 = _RLP$decode34[2],\n            _to11 = _RLP$decode34[3],\n            _value11 = _RLP$decode34[4],\n            _from13 = _RLP$decode34[5],\n            _data8 = _RLP$decode34[6],\n            _signatures13 = _RLP$decode34[7],\n            _feePayer8 = _RLP$decode34[8],\n            _feePayerSignatures8 = _RLP$decode34[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce14,\n          gasPrice: _gasPrice14,\n          gas: _gas14,\n          to: _to11,\n          value: _value11,\n          from: _from13,\n          data: _data8,\n          v: _signatures13[0][0],\n          r: _signatures13[0][1],\n          s: _signatures13[0][2],\n          signatures: _signatures13,\n          feePayer: _feePayer8,\n          payerV: _feePayerSignatures8[0][0],\n          payerR: _feePayerSignatures8[0][1],\n          payerS: _feePayerSignatures8[0][2],\n          feePayerSignatures: _feePayerSignatures8\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        var _RLP$decode35 = RLP.decode(rawTransaction),\n            _RLP$decode36 = _slicedToArray(_RLP$decode35, 11),\n            _nonce15 = _RLP$decode36[0],\n            _gasPrice15 = _RLP$decode36[1],\n            _gas15 = _RLP$decode36[2],\n            _to12 = _RLP$decode36[3],\n            _value12 = _RLP$decode36[4],\n            _from14 = _RLP$decode36[5],\n            _data9 = _RLP$decode36[6],\n            _feeRatio4 = _RLP$decode36[7],\n            _signatures14 = _RLP$decode36[8],\n            _feePayer9 = _RLP$decode36[9],\n            _feePayerSignatures9 = _RLP$decode36[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce15,\n          gasPrice: _gasPrice15,\n          gas: _gas15,\n          to: _to12,\n          value: _value12,\n          from: _from14,\n          data: _data9,\n          feeRatio: _feeRatio4,\n          v: _signatures14[0][0],\n          r: _signatures14[0][1],\n          s: _signatures14[0][2],\n          signatures: _signatures14,\n          feePayer: _feePayer9,\n          payerV: _feePayerSignatures9[0][0],\n          payerR: _feePayerSignatures9[0][1],\n          payerS: _feePayerSignatures9[0][2],\n          feePayerSignatures: _feePayerSignatures9\n        };\n      }\n\n    case 'CANCEL':\n      {\n        var _RLP$decode37 = RLP.decode(rawTransaction),\n            _RLP$decode38 = _slicedToArray(_RLP$decode37, 5),\n            _nonce16 = _RLP$decode38[0],\n            _gasPrice16 = _RLP$decode38[1],\n            _gas16 = _RLP$decode38[2],\n            _from15 = _RLP$decode38[3],\n            _signatures15 = _RLP$decode38[4];\n\n        return {\n          type: typeString,\n          nonce: _nonce16,\n          gasPrice: _gasPrice16,\n          gas: _gas16,\n          from: _from15,\n          v: _signatures15[0][0],\n          r: _signatures15[0][1],\n          s: _signatures15[0][2],\n          signatures: _signatures15\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL':\n      {\n        var _RLP$decode39 = RLP.decode(rawTransaction),\n            _RLP$decode40 = _slicedToArray(_RLP$decode39, 7),\n            _nonce17 = _RLP$decode40[0],\n            _gasPrice17 = _RLP$decode40[1],\n            _gas17 = _RLP$decode40[2],\n            _from16 = _RLP$decode40[3],\n            _signatures16 = _RLP$decode40[4],\n            _feePayer10 = _RLP$decode40[5],\n            _feePayerSignatures10 = _RLP$decode40[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce17,\n          gasPrice: _gasPrice17,\n          gas: _gas17,\n          from: _from16,\n          v: _signatures16[0][0],\n          r: _signatures16[0][1],\n          s: _signatures16[0][2],\n          signatures: _signatures16,\n          feePayer: _feePayer10,\n          payerV: _feePayerSignatures10[0][0],\n          payerR: _feePayerSignatures10[0][1],\n          payerS: _feePayerSignatures10[0][2],\n          feePayerSignatures: _feePayerSignatures10\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      {\n        var _RLP$decode41 = RLP.decode(rawTransaction),\n            _RLP$decode42 = _slicedToArray(_RLP$decode41, 8),\n            _nonce18 = _RLP$decode42[0],\n            _gasPrice18 = _RLP$decode42[1],\n            _gas18 = _RLP$decode42[2],\n            _from17 = _RLP$decode42[3],\n            _feeRatio5 = _RLP$decode42[4],\n            _signatures17 = _RLP$decode42[5],\n            _feePayer11 = _RLP$decode42[6],\n            _feePayerSignatures11 = _RLP$decode42[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce18,\n          gasPrice: _gasPrice18,\n          gas: _gas18,\n          from: _from17,\n          feeRatio: _feeRatio5,\n          v: _signatures17[0][0],\n          r: _signatures17[0][1],\n          s: _signatures17[0][2],\n          signatures: _signatures17,\n          feePayer: _feePayer11,\n          payerV: _feePayerSignatures11[0][0],\n          payerR: _feePayerSignatures11[0][1],\n          payerS: _feePayerSignatures11[0][2],\n          feePayerSignatures: _feePayerSignatures11\n        };\n      }\n\n    case 'CHAIN_DATA_ANCHORING':\n      {\n        var _RLP$decode43 = RLP.decode(rawTransaction),\n            _RLP$decode44 = _slicedToArray(_RLP$decode43, 6),\n            _nonce19 = _RLP$decode44[0],\n            _gasPrice19 = _RLP$decode44[1],\n            _gas19 = _RLP$decode44[2],\n            _from18 = _RLP$decode44[3],\n            _data10 = _RLP$decode44[4],\n            _signatures18 = _RLP$decode44[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce19,\n          gasPrice: _gasPrice19,\n          gas: _gas19,\n          from: _from18,\n          data: _data10,\n          v: _signatures18[0][0],\n          r: _signatures18[0][1],\n          s: _signatures18[0][2],\n          signatures: _signatures18\n        };\n      }\n  }\n}\n\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\n  if (signature === undefined) {\n    signature = [txObj.v, txObj.r, txObj.s];\n  }\n\n  if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\n    feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS];\n  }\n\n  if (txObj.type === 'LEGACY') {\n    var decodeLegacy = RLP.decode(rawTransaction);\n    decodeLegacy = decodeLegacy.slice(0, 6).concat(signature);\n    return RLP.encode(decodeLegacy);\n  }\n\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n\n  if (txObj.type.includes('FEE_DELEGATED')) {\n    data[data.length - 3] = [signature];\n    data[data.length - 1] = [feePayerSignature];\n  } else {\n    data[data.length - 1] = [signature];\n  }\n\n  return type + RLP.encode(data).slice(2);\n}\n\nfunction getSenderTxHash(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction);\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n  return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n}\n\nmodule.exports = {\n  encodeRLPByTxType: encodeRLPByTxType,\n  makeRawTransaction: makeRawTransaction,\n  decodeFromRawTransaction: decodeFromRawTransaction,\n  overwriteSignature: overwriteSignature,\n  getSenderTxHash: getSenderTxHash,\n  splitFeePayer: splitFeePayer,\n  extractSignatures: extractSignatures\n};","map":{"version":3,"names":["RLP","require","Hash","utils","rlpEncodeForLegacyTransaction","rlpEncodeForValueTransfer","rlpEncodeForValueTransferMemo","rlpEncodeForFeeDelegatedValueTransferMemoWithRatio","rlpEncodeForFeeDelegatedValueTransfer","rlpEncodeForFeeDelegatedValueTransferWithRatio","rlpEncodeForFeeDelegatedValueTransferMemo","rlpEncodeForAccountUpdate","rlpEncodeForContractDeploy","rlpEncodeForContractExecution","rlpEncodeForFeeDelegatedAccountUpdate","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","rlpEncodeForFeeDelegatedSmartContractDeploy","rlpEncodeForFeeDelegatedSmartContractDeployWithRatio","rlpEncodeForFeeDelegatedSmartContractExecution","rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio","rlpEncodeForCancel","rlpEncodeForFeeDelegatedCancel","rlpEncodeForFeeDelegatedCancelWithRatio","rlpEncodeForChainDataAnchoring","parseAccountKey","creationNotSupportError","encodeRLPByTxType","transaction","type","senderRawTransaction","getTxTypeStringFromRawTransaction","Error","makeRawTransaction","rlpEncoded","sig","decodedValues","decode","rawTx","_combineSenderRawTransaction","decoded","decodeFromRawTransaction","_combineFeePayerRawTransaction","signatures","feePayer","feePayerSignatures","slice","concat","rawTransaction","encode","undefined","data","txType","Array","isArray","refineSignatures","typeString","includes","senderSignature","toLowerCase","sigArray","set","Set","result","length","isEmptySig","sigString","join","has","add","push","extractSignatures","senderSignatures","_decodeFromRawTransaction","decodedTransaction","splitFeePayer","addHexPrefix","detachFeePayer","splice","decodeResult","nonce","gasPrice","gas","to","value","v","r","s","from","payerV","payerR","payerS","feeRatio","accountKey","humanReadable","codeFormat","overwriteSignature","txObj","signature","feePayerSignature","decodeLegacy","typeDetached","getSenderTxHash","keccak256","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/makeRawTransaction.js"],"sourcesContent":["/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Hash = require('eth-lib/lib/hash')\r\nconst utils = require('../../../caver-utils')\r\n\r\nconst {\r\n    rlpEncodeForLegacyTransaction,\r\n    rlpEncodeForValueTransfer,\r\n    rlpEncodeForValueTransferMemo,\r\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\r\n    rlpEncodeForFeeDelegatedValueTransfer,\r\n    rlpEncodeForFeeDelegatedValueTransferWithRatio,\r\n    rlpEncodeForFeeDelegatedValueTransferMemo,\r\n    rlpEncodeForAccountUpdate,\r\n    rlpEncodeForContractDeploy,\r\n    rlpEncodeForContractExecution,\r\n    rlpEncodeForFeeDelegatedAccountUpdate,\r\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\r\n    rlpEncodeForFeeDelegatedSmartContractDeploy,\r\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\r\n    rlpEncodeForFeeDelegatedSmartContractExecution,\r\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\r\n\r\n    rlpEncodeForCancel,\r\n    rlpEncodeForFeeDelegatedCancel,\r\n    rlpEncodeForFeeDelegatedCancelWithRatio,\r\n    rlpEncodeForChainDataAnchoring,\r\n\r\n    parseAccountKey,\r\n} = require('./transactionType')\r\n\r\nconst creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.'\r\n\r\nfunction encodeRLPByTxType(transaction) {\r\n    transaction.type = transaction.senderRawTransaction\r\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\r\n        : transaction.type\r\n\r\n    switch (transaction.type) {\r\n        case 'ACCOUNT_CREATION':\r\n            throw new Error(creationNotSupportError)\r\n        case 'ACCOUNT_UPDATE':\r\n            return rlpEncodeForAccountUpdate(transaction)\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n            return rlpEncodeForFeeDelegatedAccountUpdate(transaction)\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction)\r\n        case 'VALUE_TRANSFER':\r\n            return rlpEncodeForValueTransfer(transaction)\r\n        case 'VALUE_TRANSFER_MEMO':\r\n            return rlpEncodeForValueTransferMemo(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\r\n            return rlpEncodeForFeeDelegatedValueTransfer(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\r\n            return rlpEncodeForFeeDelegatedValueTransferMemo(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\r\n            return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction)\r\n        case 'SMART_CONTRACT_DEPLOY':\r\n            return rlpEncodeForContractDeploy(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction)\r\n        case 'SMART_CONTRACT_EXECUTION':\r\n            return rlpEncodeForContractExecution(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\r\n            return rlpEncodeForFeeDelegatedSmartContractExecution(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction)\r\n        case 'CANCEL':\r\n            return rlpEncodeForCancel(transaction)\r\n        case 'FEE_DELEGATED_CANCEL':\r\n            return rlpEncodeForFeeDelegatedCancel(transaction)\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedCancelWithRatio(transaction)\r\n        case 'CHAIN_DATA_ANCHORING':\r\n            return rlpEncodeForChainDataAnchoring(transaction)\r\n        case 'LEGACY':\r\n        default:\r\n            return rlpEncodeForLegacyTransaction(transaction)\r\n    }\r\n}\r\n\r\n// case1) sig === [v, r, s]\r\n// case2) sig ===\r\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n    let rawTx\r\n\r\n    transaction.type = transaction.senderRawTransaction\r\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\r\n        : transaction.type\r\n\r\n    switch (transaction.type) {\r\n        case 'ACCOUNT_CREATION':\r\n            throw new Error(creationNotSupportError)\r\n        case 'VALUE_TRANSFER':\r\n        case 'VALUE_TRANSFER_MEMO':\r\n        case 'ACCOUNT_UPDATE':\r\n        case 'SMART_CONTRACT_DEPLOY':\r\n        case 'SMART_CONTRACT_EXECUTION':\r\n        case 'CANCEL':\r\n        case 'CHAIN_DATA_ANCHORING':\r\n            return _combineSenderRawTransaction(rlpEncoded, sig)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\r\n        case 'FEE_DELEGATED_CANCEL':\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\r\n            if (transaction.senderRawTransaction) {\r\n                const decoded = decodeFromRawTransaction(transaction.senderRawTransaction)\r\n                return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures)\r\n            }\r\n            if (\r\n                transaction.feePayer &&\r\n                transaction.feePayer !== '0x' &&\r\n                transaction.feePayer !== '0x0000000000000000000000000000000000000000' &&\r\n                transaction.feePayerSignatures\r\n            ) {\r\n                return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig)\r\n            }\r\n            return _combineSenderRawTransaction(rlpEncoded, sig)\r\n        }\r\n        case 'LEGACY':\r\n        default:\r\n            rawTx = decodedValues.slice(0, 6).concat(sig[0])\r\n            return {\r\n                rawTransaction: RLP.encode(rawTx),\r\n                signatures: sig[0],\r\n                feePayerSignatures: undefined,\r\n            }\r\n    }\r\n}\r\n\r\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n\r\n    const [data] = decodedValues\r\n    let [txType, ...rawTx] = RLP.decode(data)\r\n\r\n    if (!Array.isArray(sig[0])) sig = [sig]\r\n    sig = refineSignatures(sig)\r\n\r\n    rawTx = [...rawTx, sig]\r\n\r\n    // set default feepayer's information in rawTx\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(txType)\r\n    if (typeString !== undefined && typeString.includes('FEE_DELEGATED'))\r\n        rawTx = [...rawTx, '0x0000000000000000000000000000000000000000', [['0x01', '0x', '0x']]]\r\n\r\n    return {\r\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\r\n        signatures: sig,\r\n        feePayerSignatures: undefined,\r\n    }\r\n}\r\n\r\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n\r\n    const [data] = decodedValues\r\n    let [txType, ...rawTx] = RLP.decode(data)\r\n\r\n    if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures]\r\n    senderSignature = refineSignatures(senderSignature)\r\n    feePayerSignatures = refineSignatures(feePayerSignatures)\r\n\r\n    rawTx = [...rawTx, senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]\r\n\r\n    return {\r\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\r\n        signatures: senderSignature,\r\n        feePayerSignatures,\r\n    }\r\n}\r\n\r\n// refineSignatures removes duplication and empty signatures\r\nfunction refineSignatures(sigArray) {\r\n    const set = new Set()\r\n    let result = []\r\n    for (const sig of sigArray) {\r\n        if (sig.length > 0 && !utils.isEmptySig(sig)) {\r\n            const sigString = sig.join('')\r\n            if (!set.has(sigString)) {\r\n                set.add(sigString, true)\r\n                result.push(sig)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (result.length === 0) result = [['0x01', '0x', '0x']]\r\n\r\n    return result\r\n}\r\n\r\nfunction extractSignatures(rawTransaction) {\r\n    let senderSignatures = []\r\n    let feePayerSignatures = []\r\n\r\n    const decoded = _decodeFromRawTransaction(rawTransaction)\r\n    senderSignatures = senderSignatures.concat(decoded.signatures)\r\n    if (decoded.feePayerSignatures) {\r\n        feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures)\r\n    }\r\n    return { senderSignatures, feePayerSignatures, decodedTransaction: decoded }\r\n}\r\n\r\nfunction splitFeePayer(rawTransaction) {\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n\r\n    if (!typeString || !typeString.includes('FEE_DELEGATED'))\r\n        throw new Error(`Failed to split fee payer: not a fee delegated transaction type('${typeString || 'LEGACY'}')`)\r\n\r\n    const txType = rawTransaction.slice(0, 4)\r\n    const decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)))\r\n\r\n    const detachFeePayer = decodedValues.splice(0, decodedValues.length - 2)\r\n    detachFeePayer.push('0x0000000000000000000000000000000000000000')\r\n    detachFeePayer.push([['0x01', '0x', '0x']])\r\n\r\n    return {\r\n        senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\r\n        feePayer: decodedValues[0],\r\n        feePayerSignatures: decodedValues[1],\r\n    }\r\n}\r\n\r\nfunction decodeFromRawTransaction(rawTransaction, type) {\r\n    let decodeResult = _decodeFromRawTransaction(rawTransaction, type)\r\n\r\n    switch (decodeResult.type) {\r\n        case 'ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\r\n            decodeResult = parseAccountKey(decodeResult)\r\n        }\r\n    }\r\n    return decodeResult\r\n}\r\n\r\nfunction _decodeFromRawTransaction(rawTransaction, type) {\r\n    let typeString = type\r\n    if (typeString === undefined || typeString !== 'LEGACY') {\r\n        typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n        if (typeString === undefined) {\r\n            typeString = 'LEGACY'\r\n        } else {\r\n            rawTransaction = `0x${rawTransaction.slice(4)}`\r\n        }\r\n    }\r\n\r\n    switch (typeString) {\r\n        case 'LEGACY': {\r\n            const [nonce, gasPrice, gas, to, value, data, v, r, s] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                data,\r\n                v,\r\n                r,\r\n                s,\r\n                signatures: [v, r, s],\r\n            }\r\n        }\r\n        case 'VALUE_TRANSFER': {\r\n            const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER': {\r\n            const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'VALUE_TRANSFER_MEMO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\r\n                rawTransaction\r\n            )\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'ACCOUNT_CREATION': {\r\n            throw new Error(creationNotSupportError)\r\n        }\r\n        case 'ACCOUNT_UPDATE': {\r\n            const [nonce, gasPrice, gas, from, accountKey, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE': {\r\n            const [nonce, gasPrice, gas, from, accountKey, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, from, accountKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'SMART_CONTRACT_DEPLOY': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, humanReadable, codeFormat, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY': {\r\n            const [\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable,\r\n                codeFormat,\r\n                signatures,\r\n                feePayer,\r\n                feePayerSignatures,\r\n            ] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO': {\r\n            const [\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable,\r\n                feeRatio,\r\n                codeFormat,\r\n                signatures,\r\n                feePayer,\r\n                feePayerSignatures,\r\n            ] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                feeRatio,\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'SMART_CONTRACT_EXECUTION': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\r\n                rawTransaction\r\n            )\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'CANCEL': {\r\n            const [nonce, gasPrice, gas, from, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_CANCEL': {\r\n            const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'CHAIN_DATA_ANCHORING': {\r\n            const [nonce, gasPrice, gas, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                data: data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\r\n    if (signature === undefined) {\r\n        signature = [txObj.v, txObj.r, txObj.s]\r\n    }\r\n    if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\r\n        feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS]\r\n    }\r\n\r\n    if (txObj.type === 'LEGACY') {\r\n        let decodeLegacy = RLP.decode(rawTransaction)\r\n        decodeLegacy = decodeLegacy.slice(0, 6).concat(signature)\r\n        return RLP.encode(decodeLegacy)\r\n    }\r\n\r\n    const type = rawTransaction.slice(0, 4)\r\n    const typeDetached = `0x${rawTransaction.slice(4)}`\r\n\r\n    const data = RLP.decode(typeDetached)\r\n    if (txObj.type.includes('FEE_DELEGATED')) {\r\n        data[data.length - 3] = [signature]\r\n        data[data.length - 1] = [feePayerSignature]\r\n    } else {\r\n        data[data.length - 1] = [signature]\r\n    }\r\n\r\n    return type + RLP.encode(data).slice(2)\r\n}\r\n\r\nfunction getSenderTxHash(rawTransaction) {\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n    if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction)\r\n\r\n    const type = rawTransaction.slice(0, 4)\r\n    const typeDetached = `0x${rawTransaction.slice(4)}`\r\n\r\n    const data = RLP.decode(typeDetached)\r\n\r\n    return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2))\r\n}\r\n\r\nmodule.exports = {\r\n    encodeRLPByTxType,\r\n    makeRawTransaction,\r\n    decodeFromRawTransaction,\r\n    overwriteSignature,\r\n    getSenderTxHash,\r\n    splitFeePayer,\r\n    extractSignatures,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}