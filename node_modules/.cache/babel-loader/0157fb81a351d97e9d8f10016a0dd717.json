{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar SubscriptionTracker = require('./subscription-tracker');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api, options) {\n  var subsTracker = SubscriptionTracker.singleton();\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(topic, handler) {\n      var options,\n          done,\n          fail,\n          result,\n          ffWorkaround,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // eslint-disable-line require-await\n              options.signal = subsTracker.subscribe(topic, handler, options.signal);\n              result = new Promise(function (resolve, reject) {\n                done = resolve;\n                fail = reject;\n              }); // In Firefox, the initial call to fetch does not resolve until some data\n              // is received. If this doesn't happen within 1 second assume success\n\n              ffWorkaround = setTimeout(function () {\n                return done();\n              }, 1000); // Do this async to not block Firefox\n\n              setTimeout(function () {\n                api.post('pubsub/sub', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams(_objectSpread({\n                    arg: topic\n                  }, options)),\n                  headers: options.headers\n                }).catch(function (err) {\n                  // Initial subscribe fail, ensure we clean up\n                  subsTracker.unsubscribe(topic, handler);\n                  fail(err);\n                }).then(function (response) {\n                  clearTimeout(ffWorkaround);\n\n                  if (!response) {\n                    // if there was no response, the subscribe failed\n                    return;\n                  }\n\n                  readMessages(response.ndjson(), {\n                    onMessage: handler,\n                    onEnd: function onEnd() {\n                      return subsTracker.unsubscribe(topic, handler);\n                    },\n                    onError: options.onError\n                  });\n                  done();\n                });\n              }, 0);\n              return _context.abrupt(\"return\", result);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\n\nfunction readMessages(_x3, _x4) {\n  return _readMessages.apply(this, arguments);\n}\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(msgStream, _ref2) {\n    var onMessage, onEnd, onError, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            onMessage = _ref2.onMessage, onEnd = _ref2.onEnd, onError = _ref2.onError;\n            onError = onError || log;\n            _context2.prev = 2;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 5;\n            _iterator = _asyncIterator(msgStream);\n\n          case 7:\n            _context2.next = 9;\n            return _iterator.next();\n\n          case 9:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 24;\n              break;\n            }\n\n            msg = _step.value;\n            _context2.prev = 11;\n\n            if (msg.from) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 21);\n\n          case 14:\n            onMessage({\n              from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n              data: uint8ArrayFromString(msg.data, 'base64pad'),\n              seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n              topicIDs: msg.topicIDs\n            });\n            _context2.next = 21;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](11);\n            _context2.t0.message = \"Failed to parse pubsub message: \".concat(_context2.t0.message);\n            onError(_context2.t0, false, msg); // Not fatal\n\n          case 21:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 7;\n            break;\n\n          case 24:\n            _context2.next = 30;\n            break;\n\n          case 26:\n            _context2.prev = 26;\n            _context2.t1 = _context2[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context2.t1;\n\n          case 30:\n            _context2.prev = 30;\n            _context2.prev = 31;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 35;\n              break;\n            }\n\n            _context2.next = 35;\n            return _iterator.return();\n\n          case 35:\n            _context2.prev = 35;\n\n            if (!_didIteratorError) {\n              _context2.next = 38;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 38:\n            return _context2.finish(35);\n\n          case 39:\n            return _context2.finish(30);\n\n          case 40:\n            _context2.next = 45;\n            break;\n\n          case 42:\n            _context2.prev = 42;\n            _context2.t2 = _context2[\"catch\"](2);\n\n            // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n            // Temporarily use the name property instead.\n            if (_context2.t2.type !== 'aborted' && _context2.t2.name !== 'AbortError') {\n              onError(_context2.t2, true); // Fatal\n            }\n\n          case 45:\n            _context2.prev = 45;\n            onEnd();\n            return _context2.finish(45);\n\n          case 48:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 42, 45, 48], [5, 26, 30, 40], [11, 17], [31,, 35, 39]]);\n  }));\n  return _readMessages.apply(this, arguments);\n}","map":{"version":3,"names":["uint8ArrayFromString","require","uint8ArrayToString","log","SubscriptionTracker","configure","toUrlSearchParams","module","exports","api","options","subsTracker","singleton","topic","handler","signal","subscribe","result","Promise","resolve","reject","done","fail","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","ndjson","onMessage","onEnd","onError","msgStream","msg","from","data","seqno","topicIDs","message","type","name"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["'use strict'\r\n\r\nconst uint8ArrayFromString = require('uint8arrays/from-string')\r\nconst uint8ArrayToString = require('uint8arrays/to-string')\r\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\r\nconst SubscriptionTracker = require('./subscription-tracker')\r\nconst configure = require('../lib/configure')\r\nconst toUrlSearchParams = require('../lib/to-url-search-params')\r\n\r\nmodule.exports = configure((api, options) => {\r\n  const subsTracker = SubscriptionTracker.singleton()\r\n\r\n  return async (topic, handler, options = {}) => { // eslint-disable-line require-await\r\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\r\n\r\n    let done\r\n    let fail\r\n\r\n    const result = new Promise((resolve, reject) => {\r\n      done = resolve\r\n      fail = reject\r\n    })\r\n\r\n    // In Firefox, the initial call to fetch does not resolve until some data\r\n    // is received. If this doesn't happen within 1 second assume success\r\n    const ffWorkaround = setTimeout(() => done(), 1000)\r\n\r\n    // Do this async to not block Firefox\r\n    setTimeout(() => {\r\n      api.post('pubsub/sub', {\r\n        timeout: options.timeout,\r\n        signal: options.signal,\r\n        searchParams: toUrlSearchParams({\r\n          arg: topic,\r\n          ...options\r\n        }),\r\n        headers: options.headers\r\n      })\r\n        .catch((err) => {\r\n          // Initial subscribe fail, ensure we clean up\r\n          subsTracker.unsubscribe(topic, handler)\r\n\r\n          fail(err)\r\n        })\r\n        .then((response) => {\r\n          clearTimeout(ffWorkaround)\r\n\r\n          if (!response) {\r\n            // if there was no response, the subscribe failed\r\n            return\r\n          }\r\n\r\n          readMessages(response.ndjson(), {\r\n            onMessage: handler,\r\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\r\n            onError: options.onError\r\n          })\r\n\r\n          done()\r\n        })\r\n    }, 0)\r\n\r\n    return result\r\n  }\r\n})\r\n\r\nasync function readMessages (msgStream, { onMessage, onEnd, onError }) {\r\n  onError = onError || log\r\n\r\n  try {\r\n    for await (const msg of msgStream) {\r\n      try {\r\n        if (!msg.from) {\r\n          continue\r\n        }\r\n\r\n        onMessage({\r\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\r\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\r\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\r\n          topicIDs: msg.topicIDs\r\n        })\r\n      } catch (err) {\r\n        err.message = `Failed to parse pubsub message: ${err.message}`\r\n        onError(err, false, msg) // Not fatal\r\n      }\r\n    }\r\n  } catch (err) {\r\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\r\n    // Temporarily use the name property instead.\r\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\r\n      onError(err, true) // Fatal\r\n    }\r\n  } finally {\r\n    onEnd()\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}