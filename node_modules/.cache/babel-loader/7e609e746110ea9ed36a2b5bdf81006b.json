{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar constants = require('./constants');\n\nvar MT = constants.MT;\nvar SIMPLE = constants.SIMPLE;\nvar SYMS = constants.SYMS;\n/**\r\n * A CBOR Simple Value that does not map onto a known constant.\r\n */\n\nvar Simple = /*#__PURE__*/function () {\n  /**\r\n   * Creates an instance of Simple.\r\n   *\r\n   * @param {integer} value - the simple value's integer value\r\n   */\n  function Simple(value) {\n    _classCallCheck(this, Simple);\n\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n\n    this.value = value;\n  }\n  /**\r\n   * Debug string for simple value\r\n   *\r\n   * @returns {string} simple(value)\r\n   */\n\n\n  _createClass(Simple, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\r\n     * Debug string for simple value\r\n     *\r\n     * @returns {string} simple(value)\r\n     */\n\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\r\n     * Push the simple value onto the CBOR stream\r\n     *\r\n     * @param {cbor.Encoder} gen The generator to push onto\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n    }\n    /**\r\n     * Is the given object a Simple?\r\n     *\r\n     * @param {any} obj - object to test\r\n     * @returns {bool} - is it Simple?\r\n     */\n\n  }], [{\n    key: \"isSimple\",\n    value: function isSimple(obj) {\n      return obj instanceof Simple;\n    }\n    /**\r\n     * Decode from the CBOR additional information into a JavaScript value.\r\n     * If the CBOR item has no parent, return a \"safe\" symbol instead of\r\n     * `null` or `undefined`, so that the value can be passed through a\r\n     * stream in object mode.\r\n     *\r\n     * @param {Number} val - the CBOR additional info to convert\r\n     * @param {bool} hasParent - Does the CBOR item have a parent?\r\n     * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\r\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(val, hasParent) {\n      if (hasParent == null) {\n        hasParent = true;\n      }\n\n      switch (val) {\n        case SIMPLE.FALSE:\n          return false;\n\n        case SIMPLE.TRUE:\n          return true;\n\n        case SIMPLE.NULL:\n          if (hasParent) {\n            return null;\n          } else {\n            return SYMS.NULL;\n          }\n\n        case SIMPLE.UNDEFINED:\n          if (hasParent) {\n            return undefined;\n          } else {\n            return SYMS.UNDEFINED;\n          }\n\n        case -1:\n          if (!hasParent) {\n            throw new Error('Invalid BREAK');\n          }\n\n          return SYMS.BREAK;\n\n        default:\n          return new Simple(val);\n      }\n    }\n  }]);\n\n  return Simple;\n}();\n\nmodule.exports = Simple;","map":{"version":3,"names":["constants","require","MT","SIMPLE","SYMS","Simple","value","Error","gen","_pushInt","SIMPLE_FLOAT","obj","val","hasParent","FALSE","TRUE","NULL","UNDEFINED","undefined","BREAK","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/borc/src/simple.js"],"sourcesContent":["'use strict'\r\n\r\nconst constants = require('./constants')\r\nconst MT = constants.MT\r\nconst SIMPLE = constants.SIMPLE\r\nconst SYMS = constants.SYMS\r\n\r\n/**\r\n * A CBOR Simple Value that does not map onto a known constant.\r\n */\r\nclass Simple {\r\n  /**\r\n   * Creates an instance of Simple.\r\n   *\r\n   * @param {integer} value - the simple value's integer value\r\n   */\r\n  constructor (value) {\r\n    if (typeof value !== 'number') {\r\n      throw new Error('Invalid Simple type: ' + (typeof value))\r\n    }\r\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\r\n      throw new Error('value must be a small positive integer: ' + value)\r\n    }\r\n    this.value = value\r\n  }\r\n\r\n  /**\r\n   * Debug string for simple value\r\n   *\r\n   * @returns {string} simple(value)\r\n   */\r\n  toString () {\r\n    return 'simple(' + this.value + ')'\r\n  }\r\n\r\n  /**\r\n   * Debug string for simple value\r\n   *\r\n   * @returns {string} simple(value)\r\n   */\r\n  inspect () {\r\n    return 'simple(' + this.value + ')'\r\n  }\r\n\r\n  /**\r\n   * Push the simple value onto the CBOR stream\r\n   *\r\n   * @param {cbor.Encoder} gen The generator to push onto\r\n   * @returns {number}\r\n   */\r\n  encodeCBOR (gen) {\r\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\r\n  }\r\n\r\n  /**\r\n   * Is the given object a Simple?\r\n   *\r\n   * @param {any} obj - object to test\r\n   * @returns {bool} - is it Simple?\r\n   */\r\n  static isSimple (obj) {\r\n    return obj instanceof Simple\r\n  }\r\n\r\n  /**\r\n   * Decode from the CBOR additional information into a JavaScript value.\r\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\r\n   * `null` or `undefined`, so that the value can be passed through a\r\n   * stream in object mode.\r\n   *\r\n   * @param {Number} val - the CBOR additional info to convert\r\n   * @param {bool} hasParent - Does the CBOR item have a parent?\r\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\r\n   */\r\n  static decode (val, hasParent) {\r\n    if (hasParent == null) {\r\n      hasParent = true\r\n    }\r\n    switch (val) {\r\n      case SIMPLE.FALSE:\r\n        return false\r\n      case SIMPLE.TRUE:\r\n        return true\r\n      case SIMPLE.NULL:\r\n        if (hasParent) {\r\n          return null\r\n        } else {\r\n          return SYMS.NULL\r\n        }\r\n      case SIMPLE.UNDEFINED:\r\n        if (hasParent) {\r\n          return undefined\r\n        } else {\r\n          return SYMS.UNDEFINED\r\n        }\r\n      case -1:\r\n        if (!hasParent) {\r\n          throw new Error('Invalid BREAK')\r\n        }\r\n        return SYMS.BREAK\r\n      default:\r\n        return new Simple(val)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Simple\r\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMC,EAAE,GAAGF,SAAS,CAACE,EAArB;AACA,IAAMC,MAAM,GAAGH,SAAS,CAACG,MAAzB;AACA,IAAMC,IAAI,GAAGJ,SAAS,CAACI,IAAvB;AAEA;AACA;AACA;;IACMC,M;EACJ;AACF;AACA;AACA;AACA;EACE,gBAAaC,KAAb,EAAoB;IAAA;;IAClB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,0BAA2B,OAAOD,KAA5C,CAAN;IACD;;IACD,IAAKA,KAAK,GAAG,CAAT,IAAgBA,KAAK,GAAG,GAAxB,IAAiC,CAACA,KAAK,GAAG,CAAT,MAAgBA,KAArD,EAA6D;MAC3D,MAAM,IAAIC,KAAJ,CAAU,6CAA6CD,KAAvD,CAAN;IACD;;IACD,KAAKA,KAAL,GAAaA,KAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;;;WACE,oBAAY;MACV,OAAO,YAAY,KAAKA,KAAjB,GAAyB,GAAhC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,mBAAW;MACT,OAAO,YAAY,KAAKA,KAAjB,GAAyB,GAAhC;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAYE,GAAZ,EAAiB;MACf,OAAOA,GAAG,CAACC,QAAJ,CAAa,KAAKH,KAAlB,EAAyBJ,EAAE,CAACQ,YAA5B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAAiBC,GAAjB,EAAsB;MACpB,OAAOA,GAAG,YAAYN,MAAtB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAeO,GAAf,EAAoBC,SAApB,EAA+B;MAC7B,IAAIA,SAAS,IAAI,IAAjB,EAAuB;QACrBA,SAAS,GAAG,IAAZ;MACD;;MACD,QAAQD,GAAR;QACE,KAAKT,MAAM,CAACW,KAAZ;UACE,OAAO,KAAP;;QACF,KAAKX,MAAM,CAACY,IAAZ;UACE,OAAO,IAAP;;QACF,KAAKZ,MAAM,CAACa,IAAZ;UACE,IAAIH,SAAJ,EAAe;YACb,OAAO,IAAP;UACD,CAFD,MAEO;YACL,OAAOT,IAAI,CAACY,IAAZ;UACD;;QACH,KAAKb,MAAM,CAACc,SAAZ;UACE,IAAIJ,SAAJ,EAAe;YACb,OAAOK,SAAP;UACD,CAFD,MAEO;YACL,OAAOd,IAAI,CAACa,SAAZ;UACD;;QACH,KAAK,CAAC,CAAN;UACE,IAAI,CAACJ,SAAL,EAAgB;YACd,MAAM,IAAIN,KAAJ,CAAU,eAAV,CAAN;UACD;;UACD,OAAOH,IAAI,CAACe,KAAZ;;QACF;UACE,OAAO,IAAId,MAAJ,CAAWO,GAAX,CAAP;MAvBJ;IAyBD;;;;;;AAGHQ,MAAM,CAACC,OAAP,GAAiBhB,MAAjB"},"metadata":{},"sourceType":"script"}