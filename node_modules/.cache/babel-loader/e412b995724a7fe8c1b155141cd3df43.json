{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multipartRequest = require('../../lib/multipart-request');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n\nconst abortSignal = require('../../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  return async function (cid, data) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('object/patch/append-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      ...(await multipartRequest(data, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  };\n});","map":{"version":3,"names":["CID","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","cid","data","options","controller","signal","res","post","timeout","searchParams","arg","Uint8Array","headers","Hash","json"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/object/patch/append-data.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst multipartRequest = require('../../lib/multipart-request')\r\nconst configure = require('../../lib/configure')\r\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\r\nconst abortSignal = require('../../lib/abort-signal')\r\nconst { AbortController } = require('native-abort-controller')\r\n\r\nmodule.exports = configure(api => {\r\n  return async (cid, data, options = {}) => {\r\n    // allow aborting requests on body errors\r\n    const controller = new AbortController()\r\n    const signal = abortSignal(controller.signal, options.signal)\r\n\r\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\r\n    const res = await api.post('object/patch/append-data', {\r\n      timeout: options.timeout,\r\n      signal,\r\n      searchParams: toUrlSearchParams({\r\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\r\n        ...options\r\n      }),\r\n      ...(\r\n        await multipartRequest(data, controller, options.headers)\r\n      )\r\n    })\r\n\r\n    const { Hash } = await res.json()\r\n\r\n    return new CID(Hash)\r\n  }\r\n})\r\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAM;EAAEK;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;EAChC,OAAO,gBAAOC,GAAP,EAAYC,IAAZ,EAAmC;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IACxC;IACA,MAAMC,UAAU,GAAG,IAAIP,eAAJ,EAAnB;IACA,MAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B,CAHwC,CAKxC;;IACA,MAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,0BAAT,EAAqC;MACrDC,OAAO,EAAEL,OAAO,CAACK,OADoC;MAErDH,MAFqD;MAGrDI,YAAY,EAAEd,iBAAiB,CAAC;QAC9Be,GAAG,EAAG,GAAET,GAAG,YAAYU,UAAf,GAA4B,IAAIpB,GAAJ,CAAQU,GAAR,CAA5B,GAA2CA,GAAI,EADzB;QAE9B,GAAGE;MAF2B,CAAD,CAHsB;MAOrD,IACE,MAAMV,gBAAgB,CAACS,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACS,OAA3B,CADxB;IAPqD,CAArC,CAAlB;IAYA,MAAM;MAAEC;IAAF,IAAW,MAAMP,GAAG,CAACQ,IAAJ,EAAvB;IAEA,OAAO,IAAIvB,GAAJ,CAAQsB,IAAR,CAAP;EACD,CArBD;AAsBD,CAvByB,CAA1B"},"metadata":{},"sourceType":"script"}