{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar _ = require('lodash');\n\nvar WeightedPublicKey = require('./weightedPublicKey');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG,\n    fillWeightedMultiSigOptionsForMultiSig = _require.fillWeightedMultiSigOptionsForMultiSig;\n\nvar MAXIMUM_WEIGTHED_KEYS_LENGTH = 10;\n/**\r\n * Representing an AccountKeyWeightedMultiSig.\r\n * @class\r\n * @hideconstructor\r\n */\n\nvar AccountKeyWeightedMultiSig = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Create an instance of AccountKeyWeightedMultiSig.\r\n   * @param {number} threshold - The threshold of accountKey.\r\n   * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\r\n   */\n  function AccountKeyWeightedMultiSig(threshold, weightedPublicKeys) {\n    _classCallCheck(this, AccountKeyWeightedMultiSig);\n\n    this.threshold = threshold;\n    this.weightedPublicKeys = weightedPublicKeys || [];\n  }\n  /**\r\n   * @type {Number}\r\n   */\n\n\n  _createClass(AccountKeyWeightedMultiSig, [{\n    key: \"threshold\",\n    get: function get() {\n      return this._threshold;\n    },\n    set: function set(t) {\n      this._threshold = utils.hexToNumber(t);\n    }\n    /**\r\n     * @type {Array.<WeightedPublicKey>}\r\n     */\n\n  }, {\n    key: \"weightedPublicKeys\",\n    get: function get() {\n      return this._weightedPublicKeys;\n    },\n    set: function set(wps) {\n      if (!_.isArray(wps)) throw new Error(\"Invalid weighted public keys type. Please use an array for weightedPublicKeys.\");\n      if (wps.length > MAXIMUM_WEIGTHED_KEYS_LENGTH) throw new Error(\"Invalid weighted public keys: The number of keys exceeds the limit (\".concat(MAXIMUM_WEIGTHED_KEYS_LENGTH, \").\"));\n\n      var _iterator = _createForOfIteratorHelper(wps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var wp = _step.value;\n          if (!(wp instanceof WeightedPublicKey)) throw new Error(\"Invalid type of weighted public keys.\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._weightedPublicKeys = wps;\n    }\n    /**\r\n     * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyWeightedMultiSig.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account');\n      if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account');\n      var encodedMultisigPublicKeys = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.weightedPublicKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var weightedPublicKey = _step2.value;\n          if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account');\n          if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n          var compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey);\n          encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey]);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2);\n    }\n  }], [{\n    key: \"decode\",\n    value:\n    /**\r\n     * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\r\n     * @return {AccountKeyWeightedMultiSig}\r\n     */\n    function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) throw new Error(\"Cannot decode to AccountKeyWeightedMultiSig. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG, \": \").concat(rlpEncodedKey));\n\n      var _RLP$decode = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length))),\n          _RLP$decode2 = _slicedToArray(_RLP$decode, 2),\n          threshold = _RLP$decode2[0],\n          multiSigkeys = _RLP$decode2[1];\n\n      var weightedPublicKeys = multiSigkeys.map(function (weightedPublicKey) {\n        return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1]);\n      });\n      return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys);\n    }\n    /**\r\n     * Creates an instance of AccountKeyWeighedMultiSig.\r\n     *\r\n     * @example\r\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray)\r\n     *\r\n     * // with options\r\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\r\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\r\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\r\n     * const options = { threshold: 2, weights: [1, 1] }\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options)\r\n     *\r\n     * @param {Array.<string>} publicKeyArray - An array of public key strings.\r\n     * @param {WeightedMultiSigOptions|object} [options] - An options which defines threshold and weight.\r\n     * @return {AccountKeyWeightedMultiSig}\r\n     */\n\n  }, {\n    key: \"fromPublicKeysAndOptions\",\n    value: function fromPublicKeysAndOptions(publicKeyArray, options) {\n      options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options);\n\n      if (publicKeyArray.length !== options.weights.length) {\n        throw new Error(\"The length of public keys is not equal to the length of weight array.\");\n      }\n\n      var weightedPublicKeys = [];\n\n      for (var i = 0; i < publicKeyArray.length; i++) {\n        var weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i]);\n        weightedPublicKeys.push(weightedPublicKey);\n      }\n\n      return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys);\n    }\n  }]);\n\n  return AccountKeyWeightedMultiSig;\n}();\n\nmodule.exports = AccountKeyWeightedMultiSig;","map":{"version":3,"names":["RLP","require","Bytes","_","WeightedPublicKey","utils","ACCOUNT_KEY_TAG","fillWeightedMultiSigOptionsForMultiSig","MAXIMUM_WEIGTHED_KEYS_LENGTH","AccountKeyWeightedMultiSig","threshold","weightedPublicKeys","_threshold","t","hexToNumber","_weightedPublicKeys","wps","isArray","Error","length","wp","undefined","encodedMultisigPublicKeys","weightedPublicKey","weight","publicKey","compressedPublicKey","compressPublicKey","push","fromNat","numberToHex","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","encode","slice","rlpEncodedKey","addHexPrefix","startsWith","decode","multiSigkeys","map","publicKeyArray","options","weights","i","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyWeightedMultiSig.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst _ = require('lodash')\r\nconst WeightedPublicKey = require('./weightedPublicKey')\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG, fillWeightedMultiSigOptionsForMultiSig } = require('./accountKeyHelper')\r\n\r\nconst MAXIMUM_WEIGTHED_KEYS_LENGTH = 10\r\n\r\n/**\r\n * Representing an AccountKeyWeightedMultiSig.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyWeightedMultiSig {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\r\n     * @return {AccountKeyWeightedMultiSig}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG))\r\n            throw new Error(\r\n                `Cannot decode to AccountKeyWeightedMultiSig. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG}: ${rlpEncodedKey}`\r\n            )\r\n\r\n        const [threshold, multiSigkeys] = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\r\n        const weightedPublicKeys = multiSigkeys.map(weightedPublicKey => {\r\n            return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1])\r\n        })\r\n        return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AccountKeyWeighedMultiSig.\r\n     *\r\n     * @example\r\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray)\r\n     *\r\n     * // with options\r\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\r\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\r\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\r\n     * const options = { threshold: 2, weights: [1, 1] }\r\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options)\r\n     *\r\n     * @param {Array.<string>} publicKeyArray - An array of public key strings.\r\n     * @param {WeightedMultiSigOptions|object} [options] - An options which defines threshold and weight.\r\n     * @return {AccountKeyWeightedMultiSig}\r\n     */\r\n    static fromPublicKeysAndOptions(publicKeyArray, options) {\r\n        options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options)\r\n        if (publicKeyArray.length !== options.weights.length) {\r\n            throw new Error(`The length of public keys is not equal to the length of weight array.`)\r\n        }\r\n\r\n        const weightedPublicKeys = []\r\n\r\n        for (let i = 0; i < publicKeyArray.length; i++) {\r\n            const weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i])\r\n            weightedPublicKeys.push(weightedPublicKey)\r\n        }\r\n\r\n        return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys)\r\n    }\r\n\r\n    /**\r\n     * Create an instance of AccountKeyWeightedMultiSig.\r\n     * @param {number} threshold - The threshold of accountKey.\r\n     * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\r\n     */\r\n    constructor(threshold, weightedPublicKeys) {\r\n        this.threshold = threshold\r\n\r\n        this.weightedPublicKeys = weightedPublicKeys || []\r\n    }\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    get threshold() {\r\n        return this._threshold\r\n    }\r\n\r\n    set threshold(t) {\r\n        this._threshold = utils.hexToNumber(t)\r\n    }\r\n\r\n    /**\r\n     * @type {Array.<WeightedPublicKey>}\r\n     */\r\n    get weightedPublicKeys() {\r\n        return this._weightedPublicKeys\r\n    }\r\n\r\n    set weightedPublicKeys(wps) {\r\n        if (!_.isArray(wps)) throw new Error(`Invalid weighted public keys type. Please use an array for weightedPublicKeys.`)\r\n        if (wps.length > MAXIMUM_WEIGTHED_KEYS_LENGTH)\r\n            throw new Error(`Invalid weighted public keys: The number of keys exceeds the limit (${MAXIMUM_WEIGTHED_KEYS_LENGTH}).`)\r\n        for (const wp of wps) {\r\n            if (!(wp instanceof WeightedPublicKey)) throw new Error(`Invalid type of weighted public keys.`)\r\n        }\r\n        this._weightedPublicKeys = wps\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyWeightedMultiSig.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncoding() {\r\n        if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account')\r\n        if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account')\r\n\r\n        const encodedMultisigPublicKeys = []\r\n        for (const weightedPublicKey of this.weightedPublicKeys) {\r\n            if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account')\r\n            if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\r\n\r\n            const compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey)\r\n\r\n            encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey])\r\n        }\r\n\r\n        return (\r\n            ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\r\n            RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2)\r\n        )\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyWeightedMultiSig\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}