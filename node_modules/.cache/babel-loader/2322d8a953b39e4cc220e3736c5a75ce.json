{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nvar AccountKeyLegacy = require('./accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKeyFail');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n\nvar _require2 = require('../../../caver-wallet/src/keyring/keyringHelper'),\n    KEY_ROLE = _require2.KEY_ROLE;\n\nvar WeightedMultiSigOptions = require('./weightedMultiSigOptions');\n\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\n  if (!_.isArray(roleBasedAccountKeys)) return false;\n  if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false;\n\n  var _iterator = _createForOfIteratorHelper(roleBasedAccountKeys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var accountKey = _step.value;\n\n      if (accountKey !== undefined && !(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n/**\r\n * Representing an AccountKeyRoleBased.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar AccountKeyRoleBased = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Create an instance of AccountKeyRoleBased.\r\n   * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\r\n   */\n  function AccountKeyRoleBased(accountKeyArray) {\n    _classCallCheck(this, AccountKeyRoleBased);\n\n    this.accountKeys = accountKeyArray;\n  }\n  /**\r\n   * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\r\n   */\n\n\n  _createClass(AccountKeyRoleBased, [{\n    key: \"accountKeys\",\n    get: function get() {\n      return this._accountKeys;\n    },\n    set: function set(keys) {\n      if (!isValidRoleBasedKeyFormat(keys)) throw new Error(\"Invalid role-based account key format.\");\n      this._accountKeys = keys;\n    }\n    /**\r\n     * Returns an RLP-encoded AccountKeyRoleBased string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyRoleBased.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      var encodedAccountKeys = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.accountKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var accountKey = _step2.value;\n\n          if (accountKey === undefined) {\n            encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG);\n            continue;\n          }\n\n          encodedAccountKeys.push(accountKey.getRLPEncoding());\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2);\n    }\n  }], [{\n    key: \"decode\",\n    value:\n    /**\r\n     * Decodes an RLP-encoded AccountKeyRoleBased string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\r\n     * @return {AccountKeyRoleBased}\r\n     */\n    function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error(\"Cannot decode to AccountKeyRoleBased. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG, \": \").concat(rlpEncodedKey));\n      var keys = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)));\n      var accountKeys = [];\n\n      var _iterator3 = _createForOfIteratorHelper(keys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n\n          if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\n            accountKeys.push(undefined);\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n            accountKeys.push(AccountKeyLegacy.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n            accountKeys.push(AccountKeyPublic.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n            accountKeys.push(AccountKeyFail.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n            accountKeys.push(AccountKeyWeightedMultiSig.decode(key));\n          } else {\n            throw new Error(\"Failed to decode RLP-encoded account key. Invalid RLP-encoded account key \".concat(key));\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return new AccountKeyRoleBased(accountKeys);\n    }\n    /**\r\n     * Creates an instance of AccountKeyRoleBased.\r\n     *\r\n     * @example\r\n     * const publicKeyArray = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [ '0x{public key3}', '0x{public key4}', '0x{public key5}' ], // roleAccountUpdateKey\r\n     *      [ '0x{public key6}', '0x{public key7}', '0x{public key8}', '0x{public key9}' ], // roleFeePayerKey\r\n     * ]\r\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\r\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      { threshold: 2, weights: [1, 1, 2] },\r\n     *      { threshold: 3, weights: [1, 1, 2, 2] }\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArray, options)\r\n     *\r\n     * // Update only roleTransactionKey and roleFeePayerKey\r\n     * const publicKeyArrayToUpdatePartial = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [], // roleAccountUpdateKey -> If not defined the key(s) to use in the specific role, this role key is not updated.\r\n     *      [ '0x{public key3}', '0x{public key4}' ], // roleFeePayerKey\r\n     * ]\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      {},\r\n     *      { threshold: 3, weights: [1, 2] }\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayToUpdatePartial, options)\r\n     *\r\n     * // Update to AccountKeyLegacy or AccountKeyFail\r\n     * const publicKeyArrayWithLegacyAndFail = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [ new caver.account.accountKey.accountKeyLegacy() ], // roleAccountUpdateKey will use AccountKeyLegacy when update an account key of the Klaytn account.\r\n     *      [ new caver.account.accountKey.accountKeyFail() ], // roleFeePayerKey will be updated to AccountKeyFail, so this Klaytn account cannot pay a fee as a fee payer.\r\n     * ]\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      {},\r\n     *      {}\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayWithLegacyAndFail, options)\r\n     *\r\n     * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\r\n     * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\r\n     * @return {AccountKeyRoleBased}\r\n     */\n\n  }, {\n    key: \"fromRoleBasedPublicKeysAndOptions\",\n    value: function fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\n      if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions());\n      var accountKeys = []; // Format will be like below\n      // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\n      // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\n      // keyArray = [['legacy'], ['fail'], []]\n      // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\n\n      for (var i = 0; i < roleBasedPubArray.length; i++) {\n        if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i]); // To handle instance of AccountKeyLegacy or AccountKeyFail\n\n        if (!_.isArray(roleBasedPubArray[i])) {\n          throw new Error(\"Invalid format of keys: Each role should define the key to use in an array form.\");\n        } // Empty key array means AccountKeyNil\n\n\n        if (roleBasedPubArray[i].length === 0) {\n          if (!options[i].isEmpty()) throw new Error(\"Invalid options: AccountKeyNil cannot have options.\");\n          accountKeys.push(undefined);\n          continue;\n        }\n\n        if (roleBasedPubArray[i].length === 1) {\n          if (roleBasedPubArray[i][0] instanceof AccountKeyLegacy || roleBasedPubArray[i][0] instanceof AccountKeyFail || roleBasedPubArray[i][0] === 'legacy' || roleBasedPubArray[i][0] === 'fail') {\n            if (!options[i].isEmpty()) throw new Error(\"Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.\");\n            if (roleBasedPubArray[i][0] === 'legacy') roleBasedPubArray[i][0] = new AccountKeyLegacy();\n            if (roleBasedPubArray[i][0] === 'fail') roleBasedPubArray[i][0] = new AccountKeyFail();\n            accountKeys.push(roleBasedPubArray[i][0]);\n            continue;\n          }\n\n          if (options[i].isEmpty()) {\n            accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]));\n            continue;\n          }\n        }\n\n        accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]));\n      }\n\n      return new AccountKeyRoleBased(accountKeys);\n    }\n  }]);\n\n  return AccountKeyRoleBased;\n}();\n\nmodule.exports = AccountKeyRoleBased;","map":{"version":3,"names":["_","require","RLP","AccountKeyWeightedMultiSig","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","utils","ACCOUNT_KEY_TAG","KEY_ROLE","WeightedMultiSigOptions","isValidRoleBasedKeyFormat","roleBasedAccountKeys","isArray","length","roleLast","accountKey","undefined","AccountKeyRoleBased","accountKeyArray","accountKeys","_accountKeys","keys","Error","encodedAccountKeys","push","ACCOUNT_KEY_NIL_TAG","getRLPEncoding","ACCOUNT_KEY_ROLE_BASED_TAG","encode","slice","rlpEncodedKey","addHexPrefix","startsWith","decode","key","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","roleBasedPubArray","options","Array","fill","i","fromObject","isEmpty","fromPublicKey","fromPublicKeysAndOptions","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyRoleBased.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig')\r\nconst AccountKeyLegacy = require('./accountKeyLegacy')\r\nconst AccountKeyPublic = require('./accountKeyPublic')\r\nconst AccountKeyFail = require('./accountKeyFail')\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\nconst { KEY_ROLE } = require('../../../caver-wallet/src/keyring/keyringHelper')\r\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions')\r\n\r\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\r\n    if (!_.isArray(roleBasedAccountKeys)) return false\r\n    if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false\r\n\r\n    for (const accountKey of roleBasedAccountKeys) {\r\n        if (\r\n            accountKey !== undefined &&\r\n            !(accountKey instanceof AccountKeyLegacy) &&\r\n            !(accountKey instanceof AccountKeyPublic) &&\r\n            !(accountKey instanceof AccountKeyFail) &&\r\n            !(accountKey instanceof AccountKeyWeightedMultiSig)\r\n        ) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n/**\r\n * Representing an AccountKeyRoleBased.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyRoleBased {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyRoleBased string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\r\n     * @return {AccountKeyRoleBased}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG))\r\n            throw new Error(\r\n                `Cannot decode to AccountKeyRoleBased. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG}: ${rlpEncodedKey}`\r\n            )\r\n\r\n        const keys = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\r\n        const accountKeys = []\r\n        for (const key of keys) {\r\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\r\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\r\n                accountKeys.push(undefined)\r\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\r\n                accountKeys.push(AccountKeyLegacy.decode(key))\r\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\r\n                accountKeys.push(AccountKeyPublic.decode(key))\r\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\r\n                accountKeys.push(AccountKeyFail.decode(key))\r\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\r\n                accountKeys.push(AccountKeyWeightedMultiSig.decode(key))\r\n            } else {\r\n                throw new Error(`Failed to decode RLP-encoded account key. Invalid RLP-encoded account key ${key}`)\r\n            }\r\n        }\r\n        return new AccountKeyRoleBased(accountKeys)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AccountKeyRoleBased.\r\n     *\r\n     * @example\r\n     * const publicKeyArray = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [ '0x{public key3}', '0x{public key4}', '0x{public key5}' ], // roleAccountUpdateKey\r\n     *      [ '0x{public key6}', '0x{public key7}', '0x{public key8}', '0x{public key9}' ], // roleFeePayerKey\r\n     * ]\r\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\r\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      { threshold: 2, weights: [1, 1, 2] },\r\n     *      { threshold: 3, weights: [1, 1, 2, 2] }\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArray, options)\r\n     *\r\n     * // Update only roleTransactionKey and roleFeePayerKey\r\n     * const publicKeyArrayToUpdatePartial = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [], // roleAccountUpdateKey -> If not defined the key(s) to use in the specific role, this role key is not updated.\r\n     *      [ '0x{public key3}', '0x{public key4}' ], // roleFeePayerKey\r\n     * ]\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      {},\r\n     *      { threshold: 3, weights: [1, 2] }\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayToUpdatePartial, options)\r\n     *\r\n     * // Update to AccountKeyLegacy or AccountKeyFail\r\n     * const publicKeyArrayWithLegacyAndFail = [\r\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\r\n     *      [ new caver.account.accountKey.accountKeyLegacy() ], // roleAccountUpdateKey will use AccountKeyLegacy when update an account key of the Klaytn account.\r\n     *      [ new caver.account.accountKey.accountKeyFail() ], // roleFeePayerKey will be updated to AccountKeyFail, so this Klaytn account cannot pay a fee as a fee payer.\r\n     * ]\r\n     * const options = [\r\n     *      { threshold: 2, weights: [1, 1] },\r\n     *      {},\r\n     *      {}\r\n     * ]\r\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayWithLegacyAndFail, options)\r\n     *\r\n     * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\r\n     * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\r\n     * @return {AccountKeyRoleBased}\r\n     */\r\n    static fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\r\n        if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions())\r\n\r\n        const accountKeys = []\r\n        // Format will be like below\r\n        // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\r\n        // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\r\n        // keyArray = [['legacy'], ['fail'], []]\r\n        // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\r\n        for (let i = 0; i < roleBasedPubArray.length; i++) {\r\n            if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i])\r\n\r\n            // To handle instance of AccountKeyLegacy or AccountKeyFail\r\n            if (!_.isArray(roleBasedPubArray[i])) {\r\n                throw new Error(`Invalid format of keys: Each role should define the key to use in an array form.`)\r\n            }\r\n\r\n            // Empty key array means AccountKeyNil\r\n            if (roleBasedPubArray[i].length === 0) {\r\n                if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyNil cannot have options.`)\r\n                accountKeys.push(undefined)\r\n                continue\r\n            }\r\n\r\n            if (roleBasedPubArray[i].length === 1) {\r\n                if (\r\n                    roleBasedPubArray[i][0] instanceof AccountKeyLegacy ||\r\n                    roleBasedPubArray[i][0] instanceof AccountKeyFail ||\r\n                    roleBasedPubArray[i][0] === 'legacy' ||\r\n                    roleBasedPubArray[i][0] === 'fail'\r\n                ) {\r\n                    if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.`)\r\n\r\n                    if (roleBasedPubArray[i][0] === 'legacy') roleBasedPubArray[i][0] = new AccountKeyLegacy()\r\n                    if (roleBasedPubArray[i][0] === 'fail') roleBasedPubArray[i][0] = new AccountKeyFail()\r\n\r\n                    accountKeys.push(roleBasedPubArray[i][0])\r\n                    continue\r\n                }\r\n                if (options[i].isEmpty()) {\r\n                    accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]))\r\n                    continue\r\n                }\r\n            }\r\n\r\n            accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]))\r\n        }\r\n        return new AccountKeyRoleBased(accountKeys)\r\n    }\r\n\r\n    /**\r\n     * Create an instance of AccountKeyRoleBased.\r\n     * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\r\n     */\r\n    constructor(accountKeyArray) {\r\n        this.accountKeys = accountKeyArray\r\n    }\r\n\r\n    /**\r\n     * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\r\n     */\r\n    get accountKeys() {\r\n        return this._accountKeys\r\n    }\r\n\r\n    set accountKeys(keys) {\r\n        if (!isValidRoleBasedKeyFormat(keys)) throw new Error(`Invalid role-based account key format.`)\r\n        this._accountKeys = keys\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyRoleBased string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyRoleBased.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncoding() {\r\n        const encodedAccountKeys = []\r\n        for (const accountKey of this.accountKeys) {\r\n            if (accountKey === undefined) {\r\n                encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)\r\n                continue\r\n            }\r\n            encodedAccountKeys.push(accountKey.getRLPEncoding())\r\n        }\r\n\r\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2)\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyRoleBased\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}