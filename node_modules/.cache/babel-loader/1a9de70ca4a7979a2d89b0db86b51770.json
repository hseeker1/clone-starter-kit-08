{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar Multiaddr = require('multiaddr');\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker,\n    isNode = _require.isNode;\n\nvar _require2 = require('parse-duration'),\n    parseDuration = _require2.default;\n\nvar log = require('debug')('ipfs-http-client:lib:error-handler');\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar merge = require('merge-options');\n\nvar toUrlString = require('ipfs-core-utils/src/to-url-string');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nvar DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nvar DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n/**\r\n * @param {ClientOptions|URL|Multiaddr|string} [options]\r\n * @returns {ClientOptions}\r\n */\n\nvar normalizeOptions = function normalizeOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var url;\n  var opts = {};\n  var agent;\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    var protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    var host = (opts.host || DEFAULT_HOST).split(':')[0];\n    var port = opts.port || DEFAULT_PORT;\n    url = new URL(\"\".concat(protocol, \"://\").concat(host, \":\").concat(port));\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (isNode) {\n    var Agent = url.protocol.startsWith('https') ? https.Agent : http.Agent;\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n\n  return _objectSpread(_objectSpread({}, opts), {}, {\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url: url,\n    agent: agent\n  });\n};\n\nvar errorHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n    var msg, data, error;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(response.headers.get('Content-Type') || '').startsWith('application/json')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return response.json();\n\n          case 4:\n            data = _context.sent;\n            log(data);\n            msg = data.Message || data.message;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return response.text();\n\n          case 11:\n            msg = _context.sent;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            log('Failed to parse error response', _context.t0); // Failed to extract/parse error message from response\n\n            msg = _context.t0.message;\n\n          case 18:\n            /** @type {Error} */\n            error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n            if (msg && msg.includes('context deadline exceeded')) {\n              error = new HTTP.TimeoutError(response);\n            } // This also gets returned\n\n\n            if (msg && msg.includes('request timed out')) {\n              error = new HTTP.TimeoutError(response);\n            } // If we managed to extract a message from the response, use it\n\n\n            if (msg) {\n              error.message = msg;\n            }\n\n            throw error;\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n\n  return function errorHandler(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nvar kebabCase = function kebabCase(str) {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nvar parseTimeout = function parseTimeout(value) {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n/**\r\n * @typedef {import('http').Agent} HttpAgent\r\n * @typedef {import('https').Agent} HttpsAgent\r\n *\r\n * @typedef {Object} ClientOptions\r\n * @property {string} [host]\r\n * @property {number} [port]\r\n * @property {string} [protocol]\r\n * @property {Headers|Record<string, string>} [headers] - Request headers.\r\n * @property {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\r\n * @property {string} [apiPath] - Path to the API.\r\n * @property {URL|string|Multiaddr} [url] - Full API URL.\r\n * @property {object} [ipld]\r\n * @property {any[]} [ipld.formats] - An array of additional [IPLD formats](https://github.com/ipld/interface-ipld-format) to support\r\n * @property {(format: string) => Promise<any>} [ipld.loadFormat] - an async function that takes the name of an [IPLD format](https://github.com/ipld/interface-ipld-format) as a string and should return the implementation of that codec\r\n * @property {HttpAgent|HttpsAgent} [agent] - A [http.Agent](https://nodejs.org/api/http.html#http_class_http_agent) used to control connection persistence and reuse for HTTP clients (only supported in node.js)\r\n */\n\n\nvar Client = /*#__PURE__*/function (_HTTP) {\n  _inherits(Client, _HTTP);\n\n  var _super = _createSuper(Client);\n\n  /**\r\n   * @param {ClientOptions|URL|Multiaddr|string} [options]\r\n   */\n  function Client() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    var opts = normalizeOptions(options);\n    _this = _super.call(this, {\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: \"\".concat(opts.url),\n      handleError: errorHandler,\n      transformSearchParams: function transformSearchParams(search) {\n        var out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        var _iterator = _createForOfIteratorHelper(search),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n              out.append(kebabCase(key), value);\n            } // @ts-ignore server timeouts are strings\n\n\n            if (key === 'timeout' && !isNaN(value)) {\n              out.append(kebabCase(key), value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return out;\n      },\n      // @ts-ignore this can be a https agent or a http agent\n      agent: opts.agent\n    }); // @ts-ignore\n\n    delete _this.get; // @ts-ignore\n\n    delete _this.put; // @ts-ignore\n\n    delete _this.delete; // @ts-ignore\n\n    delete _this.options;\n    var fetch = _this.fetch;\n\n    _this.fetch = function (resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = \"\".concat(opts.url, \"/\").concat(resource);\n      }\n\n      return fetch.call(_assertThisInitialized(_this), resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n\n    return _this;\n  }\n\n  return _createClass(Client);\n}(HTTP);\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":{"version":3,"names":["Multiaddr","require","isBrowser","isWebWorker","isNode","parseDuration","default","log","HTTP","merge","toUrlString","http","https","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","agent","isMultiaddr","URL","replace","host","split","apiPath","pathname","undefined","Agent","startsWith","keepAlive","maxSockets","Number","errorHandler","response","headers","get","json","data","msg","Message","message","text","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/lib/core.js"],"sourcesContent":["'use strict'\r\n/* eslint-env browser */\r\nconst Multiaddr = require('multiaddr')\r\nconst { isBrowser, isWebWorker, isNode } = require('ipfs-utils/src/env')\r\nconst { default: parseDuration } = require('parse-duration')\r\nconst log = require('debug')('ipfs-http-client:lib:error-handler')\r\nconst HTTP = require('ipfs-utils/src/http')\r\nconst merge = require('merge-options')\r\nconst toUrlString = require('ipfs-core-utils/src/to-url-string')\r\nconst http = require('http')\r\nconst https = require('https')\r\n\r\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\r\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\r\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\r\n\r\n/**\r\n * @param {ClientOptions|URL|Multiaddr|string} [options]\r\n * @returns {ClientOptions}\r\n */\r\nconst normalizeOptions = (options = {}) => {\r\n  let url\r\n  let opts = {}\r\n  let agent\r\n\r\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\r\n    url = new URL(toUrlString(options))\r\n  } else if (options instanceof URL) {\r\n    url = options\r\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\r\n    url = new URL(toUrlString(options.url))\r\n    opts = options\r\n  } else if (options.url instanceof URL) {\r\n    url = options.url\r\n    opts = options\r\n  } else {\r\n    opts = options || {}\r\n\r\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\r\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\r\n    const port = (opts.port || DEFAULT_PORT)\r\n\r\n    url = new URL(`${protocol}://${host}:${port}`)\r\n  }\r\n\r\n  if (opts.apiPath) {\r\n    url.pathname = opts.apiPath\r\n  } else if (url.pathname === '/' || url.pathname === undefined) {\r\n    url.pathname = 'api/v0'\r\n  }\r\n\r\n  if (isNode) {\r\n    const Agent = url.protocol.startsWith('https') ? https.Agent : http.Agent\r\n\r\n    agent = opts.agent || new Agent({\r\n      keepAlive: true,\r\n      // Similar to browsers which limit connections to six per host\r\n      maxSockets: 6\r\n    })\r\n  }\r\n\r\n  return {\r\n    ...opts,\r\n    host: url.host,\r\n    protocol: url.protocol.replace(':', ''),\r\n    port: Number(url.port),\r\n    apiPath: url.pathname,\r\n    url,\r\n    agent\r\n  }\r\n}\r\n\r\nconst errorHandler = async (response) => {\r\n  let msg\r\n\r\n  try {\r\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\r\n      const data = await response.json()\r\n      log(data)\r\n      msg = data.Message || data.message\r\n    } else {\r\n      msg = await response.text()\r\n    }\r\n  } catch (err) {\r\n    log('Failed to parse error response', err)\r\n    // Failed to extract/parse error message from response\r\n    msg = err.message\r\n  }\r\n\r\n  /** @type {Error} */\r\n  let error = new HTTP.HTTPError(response)\r\n\r\n  // This is what go-ipfs returns where there's a timeout\r\n  if (msg && msg.includes('context deadline exceeded')) {\r\n    error = new HTTP.TimeoutError(response)\r\n  }\r\n\r\n  // This also gets returned\r\n  if (msg && msg.includes('request timed out')) {\r\n    error = new HTTP.TimeoutError(response)\r\n  }\r\n\r\n  // If we managed to extract a message from the response, use it\r\n  if (msg) {\r\n    error.message = msg\r\n  }\r\n\r\n  throw error\r\n}\r\n\r\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\r\nconst kebabCase = (str) => {\r\n  return str.replace(KEBAB_REGEX, function (match) {\r\n    return '-' + match.toLowerCase()\r\n  })\r\n}\r\n\r\nconst parseTimeout = (value) => {\r\n  return typeof value === 'string' ? parseDuration(value) : value\r\n}\r\n\r\n/**\r\n * @typedef {import('http').Agent} HttpAgent\r\n * @typedef {import('https').Agent} HttpsAgent\r\n *\r\n * @typedef {Object} ClientOptions\r\n * @property {string} [host]\r\n * @property {number} [port]\r\n * @property {string} [protocol]\r\n * @property {Headers|Record<string, string>} [headers] - Request headers.\r\n * @property {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\r\n * @property {string} [apiPath] - Path to the API.\r\n * @property {URL|string|Multiaddr} [url] - Full API URL.\r\n * @property {object} [ipld]\r\n * @property {any[]} [ipld.formats] - An array of additional [IPLD formats](https://github.com/ipld/interface-ipld-format) to support\r\n * @property {(format: string) => Promise<any>} [ipld.loadFormat] - an async function that takes the name of an [IPLD format](https://github.com/ipld/interface-ipld-format) as a string and should return the implementation of that codec\r\n * @property {HttpAgent|HttpsAgent} [agent] - A [http.Agent](https://nodejs.org/api/http.html#http_class_http_agent) used to control connection persistence and reuse for HTTP clients (only supported in node.js)\r\n */\r\nclass Client extends HTTP {\r\n  /**\r\n   * @param {ClientOptions|URL|Multiaddr|string} [options]\r\n   */\r\n  constructor (options = {}) {\r\n    const opts = normalizeOptions(options)\r\n\r\n    super({\r\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\r\n      headers: opts.headers,\r\n      base: `${opts.url}`,\r\n      handleError: errorHandler,\r\n      transformSearchParams: (search) => {\r\n        const out = new URLSearchParams()\r\n\r\n        // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n        for (const [key, value] of search) {\r\n          if (\r\n            value !== 'undefined' &&\r\n            value !== 'null' &&\r\n            key !== 'signal'\r\n          ) {\r\n            out.append(kebabCase(key), value)\r\n          }\r\n\r\n          // @ts-ignore server timeouts are strings\r\n          if (key === 'timeout' && !isNaN(value)) {\r\n            out.append(kebabCase(key), value)\r\n          }\r\n        }\r\n\r\n        return out\r\n      },\r\n      // @ts-ignore this can be a https agent or a http agent\r\n      agent: opts.agent\r\n    })\r\n\r\n    // @ts-ignore\r\n    delete this.get\r\n    // @ts-ignore\r\n    delete this.put\r\n    // @ts-ignore\r\n    delete this.delete\r\n    // @ts-ignore\r\n    delete this.options\r\n\r\n    const fetch = this.fetch\r\n\r\n    this.fetch = (resource, options = {}) => {\r\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\r\n        resource = `${opts.url}/${resource}`\r\n      }\r\n\r\n      return fetch.call(this, resource, merge(options, {\r\n        method: 'POST'\r\n      }))\r\n    }\r\n  }\r\n}\r\n\r\nClient.errorHandler = errorHandler\r\n\r\nmodule.exports = Client\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}