{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar cbor = require('borc');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar isCircular = require('is-circular');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string'); // https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\n\n\nvar CID_CBOR_TAG = 42;\n\nfunction tagCID(cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).bytes;\n  } else if (CID.isCID(cid)) {\n    cid = cid.bytes;\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([uint8ArrayFromString('00', 'base16'), // thanks jdag\n  cid], 1 + cid.length));\n}\n\nfunction replaceCIDbyTAG(dagNode) {\n  var circular;\n\n  try {\n    circular = isCircular(dagNode);\n  } catch (e) {\n    circular = false;\n  }\n\n  if (circular) {\n    throw new Error('The object passed has circular references');\n  }\n\n  function transform(obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform);\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj);\n    }\n\n    var keys = Object.keys(obj);\n\n    if (keys.length > 0) {\n      // Recursive transform\n      var out = {};\n      keys.forEach(function (key) {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key]);\n        } else {\n          out[key] = obj[key];\n        }\n      });\n      return out;\n    } else {\n      return obj;\n    }\n  }\n\n  return transform(dagNode);\n}\n\nvar codec = multicodec.DAG_CBOR;\nvar defaultHashAlg = multicodec.SHA2_256;\n\nvar defaultTags = _defineProperty({}, CID_CBOR_TAG, function (val) {\n  // remove that 0\n  val = val.slice(1);\n  return new CID(val);\n});\n\nvar defaultSize = 64 * 1024; // current decoder heap size, 64 Kb\n\nvar currentSize = defaultSize;\nvar defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb\n\nvar maxSize = defaultMaxSize;\nvar decoder = null;\n/**\r\n * Configure the underlying CBOR decoder.\r\n *\r\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\r\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\r\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\r\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\r\n */\n\nfunction configureDecoder(options) {\n  var tags = defaultTags;\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size;\n    }\n\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize;\n    }\n\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags);\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize;\n    maxSize = defaultMaxSize;\n  }\n\n  var decoderOptions = {\n    tags: tags,\n    size: currentSize\n  };\n  decoder = new cbor.Decoder(decoderOptions); // borc edits opts.size in-place so we can capture _actual_ size\n\n  currentSize = decoderOptions.size;\n}\n\nconfigureDecoder(); // Setup default cbor.Decoder\n\n/**\r\n * Serialize internal representation into a binary CBOR block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\n\nfunction serialize(node) {\n  var nodeTagged = replaceCIDbyTAG(node);\n  var serialized = cbor.encode(nodeTagged);\n  return serialized;\n}\n/**\r\n * Deserialize CBOR block into the internal representation.\r\n *\r\n * @param {Uint8Array} data - Binary representation of a CBOR block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\n\n\nfunction deserialize(data) {\n  if (data.length > currentSize && data.length <= maxSize) {\n    configureDecoder({\n      size: data.length\n    });\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder');\n  } // borc will decode back-to-back objects into an implicit top-level array, we\n  // strictly want to only see a single explicit top-level object\n\n\n  var all = decoder.decodeAll(data);\n\n  if (all.length !== 1) {\n    throw new Error('Extraneous CBOR data found beyond initial top-level object');\n  }\n\n  return all[0];\n}\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [userOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\n\n\nfunction cid(_x, _x2) {\n  return _cid.apply(this, arguments);\n}\n\nfunction _cid() {\n  _cid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(binaryBlob, userOptions) {\n    var defaultOptions, options, multihash, codecName, cid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            defaultOptions = {\n              cidVersion: 1,\n              hashAlg: defaultHashAlg\n            };\n            options = Object.assign(defaultOptions, userOptions);\n            _context.next = 4;\n            return multihashing(binaryBlob, options.hashAlg);\n\n          case 4:\n            multihash = _context.sent;\n            codecName = multicodec.getNameFromCode(codec);\n            cid = new CID(options.cidVersion, codecName, multihash);\n            return _context.abrupt(\"return\", cid);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _cid.apply(this, arguments);\n}\n\nmodule.exports = {\n  codec: codec,\n  defaultHashAlg: defaultHashAlg,\n  configureDecoder: configureDecoder,\n  serialize: serialize,\n  deserialize: deserialize,\n  cid: cid\n};","map":{"version":3,"names":["cbor","require","multicodec","multihashing","CID","isCircular","uint8ArrayConcat","uint8ArrayFromString","CID_CBOR_TAG","tagCID","cid","bytes","isCID","Tagged","length","replaceCIDbyTAG","dagNode","circular","e","Error","transform","obj","Uint8Array","Array","isArray","map","keys","Object","out","forEach","key","codec","DAG_CBOR","defaultHashAlg","SHA2_256","defaultTags","val","slice","defaultSize","currentSize","defaultMaxSize","maxSize","decoder","configureDecoder","options","tags","size","assign","decoderOptions","Decoder","serialize","node","nodeTagged","serialized","encode","deserialize","data","all","decodeAll","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","multihash","codecName","getNameFromCode","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-cbor/src/util.js"],"sourcesContent":["'use strict'\r\n\r\nconst cbor = require('borc')\r\nconst multicodec = require('multicodec')\r\nconst multihashing = require('multihashing-async')\r\nconst CID = require('cids')\r\nconst isCircular = require('is-circular')\r\nconst uint8ArrayConcat = require('uint8arrays/concat')\r\nconst uint8ArrayFromString = require('uint8arrays/from-string')\r\n\r\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\r\nconst CID_CBOR_TAG = 42\r\n\r\nfunction tagCID (cid) {\r\n  if (typeof cid === 'string') {\r\n    cid = new CID(cid).bytes\r\n  } else if (CID.isCID(cid)) {\r\n    cid = cid.bytes\r\n  }\r\n\r\n  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([\r\n    uint8ArrayFromString('00', 'base16'), // thanks jdag\r\n    cid\r\n  ], 1 + cid.length))\r\n}\r\n\r\nfunction replaceCIDbyTAG (dagNode) {\r\n  let circular\r\n  try {\r\n    circular = isCircular(dagNode)\r\n  } catch (e) {\r\n    circular = false\r\n  }\r\n  if (circular) {\r\n    throw new Error('The object passed has circular references')\r\n  }\r\n\r\n  function transform (obj) {\r\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\r\n      return obj\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n      return obj.map(transform)\r\n    }\r\n\r\n    if (CID.isCID(obj)) {\r\n      return tagCID(obj)\r\n    }\r\n\r\n    const keys = Object.keys(obj)\r\n\r\n    if (keys.length > 0) {\r\n      // Recursive transform\r\n      const out = {}\r\n      keys.forEach((key) => {\r\n        if (typeof obj[key] === 'object') {\r\n          out[key] = transform(obj[key])\r\n        } else {\r\n          out[key] = obj[key]\r\n        }\r\n      })\r\n      return out\r\n    } else {\r\n      return obj\r\n    }\r\n  }\r\n\r\n  return transform(dagNode)\r\n}\r\n\r\nconst codec = multicodec.DAG_CBOR\r\nconst defaultHashAlg = multicodec.SHA2_256\r\n\r\nconst defaultTags = {\r\n  [CID_CBOR_TAG]: (val) => {\r\n    // remove that 0\r\n    val = val.slice(1)\r\n    return new CID(val)\r\n  }\r\n}\r\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\r\nlet currentSize = defaultSize\r\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\r\nlet maxSize = defaultMaxSize\r\nlet decoder = null\r\n\r\n/**\r\n * Configure the underlying CBOR decoder.\r\n *\r\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\r\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\r\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\r\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\r\n */\r\nfunction configureDecoder (options) {\r\n  let tags = defaultTags\r\n\r\n  if (options) {\r\n    if (typeof options.size === 'number') {\r\n      currentSize = options.size\r\n    }\r\n    if (typeof options.maxSize === 'number') {\r\n      maxSize = options.maxSize\r\n    }\r\n    if (options.tags) {\r\n      tags = Object.assign({}, defaultTags, options && options.tags)\r\n    }\r\n  } else {\r\n    // no options, reset to defaults\r\n    currentSize = defaultSize\r\n    maxSize = defaultMaxSize\r\n  }\r\n\r\n  const decoderOptions = {\r\n    tags,\r\n    size: currentSize\r\n  }\r\n\r\n  decoder = new cbor.Decoder(decoderOptions)\r\n  // borc edits opts.size in-place so we can capture _actual_ size\r\n  currentSize = decoderOptions.size\r\n}\r\n\r\nconfigureDecoder() // Setup default cbor.Decoder\r\n\r\n/**\r\n * Serialize internal representation into a binary CBOR block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\r\nfunction serialize (node) {\r\n  const nodeTagged = replaceCIDbyTAG(node)\r\n  const serialized = cbor.encode(nodeTagged)\r\n\r\n  return serialized\r\n}\r\n\r\n/**\r\n * Deserialize CBOR block into the internal representation.\r\n *\r\n * @param {Uint8Array} data - Binary representation of a CBOR block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\r\nfunction deserialize (data) {\r\n  if (data.length > currentSize && data.length <= maxSize) {\r\n    configureDecoder({ size: data.length })\r\n  }\r\n\r\n  if (data.length > currentSize) {\r\n    throw new Error('Data is too large to deserialize with current decoder')\r\n  }\r\n\r\n  // borc will decode back-to-back objects into an implicit top-level array, we\r\n  // strictly want to only see a single explicit top-level object\r\n  const all = decoder.decodeAll(data)\r\n  if (all.length !== 1) {\r\n    throw new Error('Extraneous CBOR data found beyond initial top-level object')\r\n  }\r\n\r\n  return all[0]\r\n}\r\n\r\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [userOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\r\nasync function cid (binaryBlob, userOptions) {\r\n  const defaultOptions = { cidVersion: 1, hashAlg: defaultHashAlg }\r\n  const options = Object.assign(defaultOptions, userOptions)\r\n\r\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\r\n  const codecName = multicodec.getNameFromCode(codec)\r\n  const cid = new CID(options.cidVersion, codecName, multihash)\r\n\r\n  return cid\r\n}\r\n\r\nmodule.exports = {\r\n  codec,\r\n  defaultHashAlg,\r\n  configureDecoder,\r\n  serialize,\r\n  deserialize,\r\n  cid\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}