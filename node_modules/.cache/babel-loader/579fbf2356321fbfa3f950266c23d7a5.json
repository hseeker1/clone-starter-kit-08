{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nconst multihash = require('multihashes');\n/**\r\n * @typedef {import('multihashes').HashName} HashName\r\n * @typedef {import('./types').Digest} Digest\r\n */\n\n/**\r\n * @type {Crypto}\r\n */\n\n\nconst crypto = self.crypto ||\n/** @type {typeof window.crypto} */\n// @ts-ignore - unknown property\nself.msCrypto;\n/**\r\n *\r\n * @param {Uint8Array} data\r\n * @param {HashName} alg\r\n * @returns {Promise<Uint8Array>}\r\n */\n\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-1'\n      }, data));\n\n    case 'sha2-256':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-256'\n      }, data));\n\n    case 'sha2-512':\n      return new Uint8Array(await crypto.subtle.digest({\n        name: 'SHA-512'\n      }, data));\n\n    case 'dbl-sha2-256':\n      {\n        const d = await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data);\n        return new Uint8Array(await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, d));\n      }\n\n    default:\n      throw new Error(`${alg} is not a supported algorithm`);\n  }\n};\n\nmodule.exports = {\n  /**\r\n   * @param {HashName} alg\r\n   * @returns {Digest}\r\n   */\n  factory: alg => async data => {\n    return digest(data, alg);\n  },\n  digest,\n\n  /**\r\n   * @param {Uint8Array} buf\r\n   * @param {HashName} alg\r\n   * @param {number} [length]\r\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg);\n    return multihash.encode(h, alg, length);\n  }\n};","map":{"version":3,"names":["multihash","require","crypto","self","msCrypto","digest","data","alg","Error","Uint8Array","subtle","name","d","module","exports","factory","multihashing","buf","length","h","encode"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multihashing-async/src/sha.browser.js"],"sourcesContent":["/* eslint-disable require-await */\r\n'use strict'\r\n\r\nconst multihash = require('multihashes')\r\n/**\r\n * @typedef {import('multihashes').HashName} HashName\r\n * @typedef {import('./types').Digest} Digest\r\n */\r\n\r\n/**\r\n * @type {Crypto}\r\n */\r\nconst crypto =\r\n  self.crypto ||\r\n  /** @type {typeof window.crypto} */\r\n  // @ts-ignore - unknown property\r\n  (self.msCrypto)\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} data\r\n * @param {HashName} alg\r\n * @returns {Promise<Uint8Array>}\r\n */\r\nconst digest = async (data, alg) => {\r\n  if (typeof self === 'undefined' || !crypto) {\r\n    throw new Error(\r\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\r\n    )\r\n  }\r\n  switch (alg) {\r\n    case 'sha1':\r\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-1' }, data))\r\n    case 'sha2-256':\r\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, data))\r\n    case 'sha2-512':\r\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-512' }, data))\r\n    case 'dbl-sha2-256': {\r\n      const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\r\n      return new Uint8Array(await crypto.subtle.digest({ name: 'SHA-256' }, d))\r\n    }\r\n    default:\r\n      throw new Error(`${alg} is not a supported algorithm`)\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  /**\r\n   * @param {HashName} alg\r\n   * @returns {Digest}\r\n   */\r\n  factory: (alg) => async (data) => {\r\n    return digest(data, alg)\r\n  },\r\n  digest,\r\n  /**\r\n   * @param {Uint8Array} buf\r\n   * @param {HashName} alg\r\n   * @param {number} [length]\r\n   */\r\n  multihashing: async (buf, alg, length) => {\r\n    const h = await digest(buf, alg)\r\n    return multihash.encode(h, alg, length)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMC,MAAM,GACVC,IAAI,CAACD,MAAL;AACA;AACA;AACCC,IAAI,CAACC,QAJR;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,OAAOC,IAAP,EAAaC,GAAb,KAAqB;EAClC,IAAI,OAAOJ,IAAP,KAAgB,WAAhB,IAA+B,CAACD,MAApC,EAA4C;IAC1C,MAAM,IAAIM,KAAJ,CACJ,2IADI,CAAN;EAGD;;EACD,QAAQD,GAAR;IACE,KAAK,MAAL;MACE,OAAO,IAAIE,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;QAAEM,IAAI,EAAE;MAAR,CAArB,EAAwCL,IAAxC,CAArB,CAAP;;IACF,KAAK,UAAL;MACE,OAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;QAAEM,IAAI,EAAE;MAAR,CAArB,EAA0CL,IAA1C,CAArB,CAAP;;IACF,KAAK,UAAL;MACE,OAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;QAAEM,IAAI,EAAE;MAAR,CAArB,EAA0CL,IAA1C,CAArB,CAAP;;IACF,KAAK,cAAL;MAAqB;QACnB,MAAMM,CAAC,GAAG,MAAMV,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;UAAEM,IAAI,EAAE;QAAR,CAArB,EAA0CL,IAA1C,CAAhB;QACA,OAAO,IAAIG,UAAJ,CAAe,MAAMP,MAAM,CAACQ,MAAP,CAAcL,MAAd,CAAqB;UAAEM,IAAI,EAAE;QAAR,CAArB,EAA0CC,CAA1C,CAArB,CAAP;MACD;;IACD;MACE,MAAM,IAAIJ,KAAJ,CAAW,GAAED,GAAI,+BAAjB,CAAN;EAZJ;AAcD,CApBD;;AAsBAM,MAAM,CAACC,OAAP,GAAiB;EACf;AACF;AACA;AACA;EACEC,OAAO,EAAGR,GAAD,IAAS,MAAOD,IAAP,IAAgB;IAChC,OAAOD,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAb;EACD,CAPc;EAQfF,MARe;;EASf;AACF;AACA;AACA;AACA;EACEW,YAAY,EAAE,OAAOC,GAAP,EAAYV,GAAZ,EAAiBW,MAAjB,KAA4B;IACxC,MAAMC,CAAC,GAAG,MAAMd,MAAM,CAACY,GAAD,EAAMV,GAAN,CAAtB;IACA,OAAOP,SAAS,CAACoB,MAAV,CAAiBD,CAAjB,EAAoBZ,GAApB,EAAyBW,MAAzB,CAAP;EACD;AAjBc,CAAjB"},"metadata":{},"sourceType":"script"}