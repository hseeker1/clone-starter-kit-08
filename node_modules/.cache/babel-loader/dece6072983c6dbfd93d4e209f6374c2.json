{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst withIs = require('class-is');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, cid) {\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    } // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n\n    Object.defineProperties(this, {\n      Name: {\n        value: name || '',\n        writable: false,\n        enumerable: true\n      },\n      Tsize: {\n        value: size,\n        writable: false,\n        enumerable: true\n      },\n      Hash: {\n        value: new CID(cid),\n        writable: false,\n        enumerable: true\n      },\n      _nameBuf: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  toString() {\n    return `DAGLink <${this.Hash.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  } // Memoize the Uint8Array representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new Uint8Arrays every time\n\n\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n\n    this._nameBuf = uint8ArrayFromString(this.Name);\n    return this._nameBuf;\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});","map":{"version":3,"names":["CID","require","withIs","uint8ArrayFromString","DAGLink","constructor","name","size","cid","Error","Object","defineProperties","Name","value","writable","enumerable","Tsize","Hash","_nameBuf","toString","toBaseEncodedString","toJSON","_json","freeze","assign","nameAsBuffer","exports","module","className","symbolName"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/src/dag-link/dagLink.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst withIs = require('class-is')\r\nconst uint8ArrayFromString = require('uint8arrays/from-string')\r\n\r\n// Link represents an IPFS Merkle DAG Link between Nodes.\r\nclass DAGLink {\r\n  constructor (name, size, cid) {\r\n    if (!cid) {\r\n      throw new Error('A link requires a cid to point to')\r\n    }\r\n\r\n    // assert(size, 'A link requires a size')\r\n    //  note - links should include size, but this assert is disabled\r\n    //  for now to maintain consistency with go-ipfs pinset\r\n\r\n    Object.defineProperties(this, {\r\n      Name: { value: name || '', writable: false, enumerable: true },\r\n      Tsize: { value: size, writable: false, enumerable: true },\r\n      Hash: { value: new CID(cid), writable: false, enumerable: true },\r\n      _nameBuf: { value: null, writable: true, enumerable: false }\r\n    })\r\n  }\r\n\r\n  toString () {\r\n    return `DAGLink <${this.Hash.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\r\n  }\r\n\r\n  toJSON () {\r\n    if (!this._json) {\r\n      this._json = Object.freeze({\r\n        name: this.Name,\r\n        size: this.Tsize,\r\n        cid: this.Hash.toBaseEncodedString()\r\n      })\r\n    }\r\n\r\n    return Object.assign({}, this._json)\r\n  }\r\n\r\n  // Memoize the Uint8Array representation of name\r\n  // We need this to sort the links, otherwise\r\n  // we will reallocate new Uint8Arrays every time\r\n  get nameAsBuffer () {\r\n    if (this._nameBuf !== null) {\r\n      return this._nameBuf\r\n    }\r\n\r\n    this._nameBuf = uint8ArrayFromString(this.Name)\r\n    return this._nameBuf\r\n  }\r\n}\r\n\r\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\r\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,yBAAD,CAApC,C,CAEA;;;AACA,MAAMG,OAAN,CAAc;EACZC,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,GAAd,EAAmB;IAC5B,IAAI,CAACA,GAAL,EAAU;MACR,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;IACD,CAH2B,CAK5B;IACA;IACA;;;IAEAC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;MAC5BC,IAAI,EAAE;QAAEC,KAAK,EAAEP,IAAI,IAAI,EAAjB;QAAqBQ,QAAQ,EAAE,KAA/B;QAAsCC,UAAU,EAAE;MAAlD,CADsB;MAE5BC,KAAK,EAAE;QAAEH,KAAK,EAAEN,IAAT;QAAeO,QAAQ,EAAE,KAAzB;QAAgCC,UAAU,EAAE;MAA5C,CAFqB;MAG5BE,IAAI,EAAE;QAAEJ,KAAK,EAAE,IAAIb,GAAJ,CAAQQ,GAAR,CAAT;QAAuBM,QAAQ,EAAE,KAAjC;QAAwCC,UAAU,EAAE;MAApD,CAHsB;MAI5BG,QAAQ,EAAE;QAAEL,KAAK,EAAE,IAAT;QAAeC,QAAQ,EAAE,IAAzB;QAA+BC,UAAU,EAAE;MAA3C;IAJkB,CAA9B;EAMD;;EAEDI,QAAQ,GAAI;IACV,OAAQ,YAAW,KAAKF,IAAL,CAAUG,mBAAV,EAAgC,aAAY,KAAKR,IAAK,YAAW,KAAKI,KAAM,GAA/F;EACD;;EAEDK,MAAM,GAAI;IACR,IAAI,CAAC,KAAKC,KAAV,EAAiB;MACf,KAAKA,KAAL,GAAaZ,MAAM,CAACa,MAAP,CAAc;QACzBjB,IAAI,EAAE,KAAKM,IADc;QAEzBL,IAAI,EAAE,KAAKS,KAFc;QAGzBR,GAAG,EAAE,KAAKS,IAAL,CAAUG,mBAAV;MAHoB,CAAd,CAAb;IAKD;;IAED,OAAOV,MAAM,CAACc,MAAP,CAAc,EAAd,EAAkB,KAAKF,KAAvB,CAAP;EACD,CAhCW,CAkCZ;EACA;EACA;;;EACgB,IAAZG,YAAY,GAAI;IAClB,IAAI,KAAKP,QAAL,KAAkB,IAAtB,EAA4B;MAC1B,OAAO,KAAKA,QAAZ;IACD;;IAED,KAAKA,QAAL,GAAgBf,oBAAoB,CAAC,KAAKS,IAAN,CAApC;IACA,OAAO,KAAKM,QAAZ;EACD;;AA5CW;;AA+CdQ,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBxB,MAAM,CAACE,OAAD,EAAU;EAAEwB,SAAS,EAAE,SAAb;EAAwBC,UAAU,EAAE;AAApC,CAAV,CAAjC"},"metadata":{},"sourceType":"script"}