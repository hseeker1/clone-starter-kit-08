{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncGeneratorDelegate\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar errCode = require('err-code');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar map = require('it-map');\n\nvar _require = require('./utils'),\n    isBytes = _require.isBytes,\n    isBlob = _require.isBlob,\n    isReadableStream = _require.isReadableStream,\n    isFileObject = _require.isFileObject,\n    mtimeToObject = _require.mtimeToObject,\n    modeToNumber = _require.modeToNumber; // eslint-disable-next-line complexity\n\n/**\r\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\r\n */\n\n/**\r\n * @template {Blob|AsyncIterable<Uint8Array>} Content\r\n * @param {import('ipfs-core-types/src/files').ImportSource} input\r\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\r\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\r\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input, normaliseContent) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toFileObject(input.toString(), normaliseContent);\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(isBytes(input) || isBlob(input))) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toFileObject(input, normaliseContent);\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            // Browser ReadableStream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            } // Iterable<?>\n\n\n            if (!(input[Symbol.iterator] || input[Symbol.asyncIterator])) {\n              _context.next = 32;\n              break;\n            }\n\n            /** @type {any} peekable */\n            peekable = itPeekable(input);\n            /** @type {any} value **/\n\n            _context.next = 15;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 15:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context.next = 21;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator), \"t0\", 20);\n\n          case 20:\n            return _context.abrupt(\"return\");\n\n          case 21:\n            peekable.push(value); // (Async)Iterable<Number>\n            // (Async)Iterable<Bytes>\n\n            if (!(Number.isInteger(value) || isBytes(value))) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 25;\n            return toFileObject(peekable, normaliseContent);\n\n          case 25:\n            return _context.abrupt(\"return\");\n\n          case 26:\n            if (!(isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 29;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t1\", 28);\n\n          case 28:\n            return _context.abrupt(\"return\");\n\n          case 29:\n            if (!(value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value))) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t2\", 31);\n\n          case 31:\n            return _context.abrupt(\"return\");\n\n          case 32:\n            if (!isFileObject(input)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 35;\n            return toFileObject(input, normaliseContent);\n\n          case 35:\n            return _context.abrupt(\"return\");\n\n          case 36:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function normaliseInput(_x, _x2) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\r\n * @template {Blob|AsyncIterable<Uint8Array>} Content\r\n * @param {import('ipfs-core-types/src/files').ToEntry} input\r\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\r\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\r\n */\n\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // @ts-ignore - Those properties don't exist on most input types\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            file = {\n              path: path || '',\n              mode: modeToNumber(mode),\n              mtime: mtimeToObject(mtime)\n            };\n\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return normaliseContent(content);\n\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return normaliseContent(input);\n\n          case 11:\n            file.content = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", file);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":{"version":3,"names":["errCode","require","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","mtimeToObject","modeToNumber","module","exports","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","push","Number","isInteger","normaliseInput","path","mode","mtime","content","file"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-input.js"],"sourcesContent":["'use strict'\r\n\r\nconst errCode = require('err-code')\r\nconst browserStreamToIt = require('browser-readablestream-to-it')\r\nconst itPeekable = require('it-peekable')\r\nconst map = require('it-map')\r\nconst {\r\n  isBytes,\r\n  isBlob,\r\n  isReadableStream,\r\n  isFileObject,\r\n  mtimeToObject,\r\n  modeToNumber\r\n} = require('./utils')\r\n\r\n// eslint-disable-next-line complexity\r\n\r\n/**\r\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\r\n */\r\n/**\r\n * @template {Blob|AsyncIterable<Uint8Array>} Content\r\n * @param {import('ipfs-core-types/src/files').ImportSource} input\r\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\r\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\r\n */\r\n// eslint-disable-next-line complexity\r\nmodule.exports = async function * normaliseInput (input, normaliseContent) {\r\n  // must give us something\r\n  if (input === null || input === undefined) {\r\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\r\n  }\r\n\r\n  // String\r\n  if (typeof input === 'string' || input instanceof String) {\r\n    yield toFileObject(input.toString(), normaliseContent)\r\n    return\r\n  }\r\n\r\n  // Uint8Array|ArrayBuffer|TypedArray\r\n  // Blob|File\r\n  if (isBytes(input) || isBlob(input)) {\r\n    yield toFileObject(input, normaliseContent)\r\n    return\r\n  }\r\n\r\n  // Browser ReadableStream\r\n  if (isReadableStream(input)) {\r\n    input = browserStreamToIt(input)\r\n  }\r\n\r\n  // Iterable<?>\r\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\r\n    /** @type {any} peekable */\r\n    const peekable = itPeekable(input)\r\n\r\n    /** @type {any} value **/\r\n    const { value, done } = await peekable.peek()\r\n\r\n    if (done) {\r\n      // make sure empty iterators result in empty files\r\n      yield * []\r\n      return\r\n    }\r\n\r\n    peekable.push(value)\r\n\r\n    // (Async)Iterable<Number>\r\n    // (Async)Iterable<Bytes>\r\n    if (Number.isInteger(value) || isBytes(value)) {\r\n      yield toFileObject(peekable, normaliseContent)\r\n      return\r\n    }\r\n\r\n    // (Async)Iterable<Blob>\r\n    // (Async)Iterable<String>\r\n    // (Async)Iterable<{ path, content }>\r\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\r\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\r\n      return\r\n    }\r\n\r\n    // (Async)Iterable<(Async)Iterable<?>>\r\n    // (Async)Iterable<ReadableStream<?>>\r\n    // ReadableStream<(Async)Iterable<?>>\r\n    // ReadableStream<ReadableStream<?>>\r\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\r\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\r\n      return\r\n    }\r\n  }\r\n\r\n  // { path, content: ? }\r\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\r\n  // `path` property that passes this check.\r\n  if (isFileObject(input)) {\r\n    yield toFileObject(input, normaliseContent)\r\n    return\r\n  }\r\n\r\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\r\n}\r\n\r\n/**\r\n * @template {Blob|AsyncIterable<Uint8Array>} Content\r\n * @param {import('ipfs-core-types/src/files').ToEntry} input\r\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\r\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\r\n */\r\nasync function toFileObject (input, normaliseContent) {\r\n  // @ts-ignore - Those properties don't exist on most input types\r\n  const { path, mode, mtime, content } = input\r\n\r\n  const file = { path: path || '', mode: modeToNumber(mode), mtime: mtimeToObject(mtime) }\r\n\r\n  if (content) {\r\n    file.content = await normaliseContent(content)\r\n  } else if (!path) { // Not already a file object with path or content prop\r\n    // @ts-ignore - input still can be different ToContent\r\n    file.content = await normaliseContent(input)\r\n  }\r\n\r\n  return file\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}