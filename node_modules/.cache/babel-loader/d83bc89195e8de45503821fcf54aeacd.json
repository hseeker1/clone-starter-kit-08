{"ast":null,"code":"/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n *\r\n */\n'use strict';\n\nconst constants = require('./constants');\n\nconst {\n  encodeText,\n  decodeText,\n  concat\n} = require('./util');\n/** @typedef {import('./base')} Base */\n\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\r\n * Create a new Uint8Array with the multibase varint+code.\r\n *\r\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\r\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array');\n  }\n\n  const {\n    name,\n    codeBuf\n  } = encoding(nameOrCode);\n  validEncode(name, buf);\n  return concat([codeBuf, buf], codeBuf.length + buf.length);\n}\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\r\n * @param {Uint8Array} buf - The data to be encoded.\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\n\n\nfunction encode(nameOrCode, buf) {\n  const enc = encoding(nameOrCode);\n  const data = encodeText(enc.encode(buf));\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length);\n}\n/**\r\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Uint8Array|string} data\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\n\n\nfunction decode(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  const prefix = data[0]; // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n\n  const enc = encoding(\n  /** @type {BaseCode} */\n  data[0]);\n  return enc.decode(data.substring(1));\n}\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Uint8Array|string} data\r\n * @returns {false | string}\r\n */\n\n\nfunction isEncoded(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n\n  try {\n    const enc = encoding(\n    /** @type {BaseCode} */\n    data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\r\n * Validate encoded data\r\n *\r\n * @param {BaseNameOrCode} name\r\n * @param {Uint8Array} buf\r\n * @returns {void}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction validEncode(name, buf) {\n  const enc = encoding(name);\n  enc.decode(decodeText(buf));\n}\n/**\r\n * Get the encoding by name or code\r\n *\r\n * @param {BaseNameOrCode} nameOrCode\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction encoding(nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names,\n  /** @type {BaseName} */\n  nameOrCode)) {\n    return constants.names[\n    /** @type {BaseName} */\n    nameOrCode];\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes,\n  /** @type {BaseCode} */\n  nameOrCode)) {\n    return constants.codes[\n    /** @type {BaseCode} */\n    nameOrCode];\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`);\n  }\n}\n/**\r\n * Get encoding from data\r\n *\r\n * @param {string|Uint8Array} data\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction encodingFromData(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  return encoding(\n  /** @type {BaseCode} */\n  data[0]);\n}\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":{"version":3,"names":["constants","require","encodeText","decodeText","concat","multibase","nameOrCode","buf","Error","name","codeBuf","encoding","validEncode","length","encode","enc","data","decode","Uint8Array","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","toString","call","err","hasOwnProperty","names","codes","encodingFromData","exports","module","freeze"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multiaddr/node_modules/multibase/src/index.js"],"sourcesContent":["/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n *\r\n */\r\n'use strict'\r\n\r\nconst constants = require('./constants')\r\nconst { encodeText, decodeText, concat } = require('./util')\r\n\r\n/** @typedef {import('./base')} Base */\r\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\r\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\r\n/** @typedef {import(\"./types\").BaseName} BaseName */\r\n\r\n/**\r\n * Create a new Uint8Array with the multibase varint+code.\r\n *\r\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\r\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction multibase (nameOrCode, buf) {\r\n  if (!buf) {\r\n    throw new Error('requires an encoded Uint8Array')\r\n  }\r\n  const { name, codeBuf } = encoding(nameOrCode)\r\n  validEncode(name, buf)\r\n\r\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\r\n}\r\n\r\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\r\n * @param {Uint8Array} buf - The data to be encoded.\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\r\nfunction encode (nameOrCode, buf) {\r\n  const enc = encoding(nameOrCode)\r\n  const data = encodeText(enc.encode(buf))\r\n\r\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\r\n}\r\n\r\n/**\r\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Uint8Array|string} data\r\n * @returns {Uint8Array}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\r\nfunction decode (data) {\r\n  if (data instanceof Uint8Array) {\r\n    data = decodeText(data)\r\n  }\r\n  const prefix = data[0]\r\n\r\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\r\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\r\n    data = data.toLowerCase()\r\n  }\r\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\r\n  return enc.decode(data.substring(1))\r\n}\r\n\r\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Uint8Array|string} data\r\n * @returns {false | string}\r\n */\r\nfunction isEncoded (data) {\r\n  if (data instanceof Uint8Array) {\r\n    data = decodeText(data)\r\n  }\r\n\r\n  // Ensure bufOrString is a string\r\n  if (Object.prototype.toString.call(data) !== '[object String]') {\r\n    return false\r\n  }\r\n\r\n  try {\r\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\r\n    return enc.name\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Validate encoded data\r\n *\r\n * @param {BaseNameOrCode} name\r\n * @param {Uint8Array} buf\r\n * @returns {void}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction validEncode (name, buf) {\r\n  const enc = encoding(name)\r\n  enc.decode(decodeText(buf))\r\n}\r\n\r\n/**\r\n * Get the encoding by name or code\r\n *\r\n * @param {BaseNameOrCode} nameOrCode\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction encoding (nameOrCode) {\r\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\r\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\r\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\r\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\r\n  } else {\r\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Get encoding from data\r\n *\r\n * @param {string|Uint8Array} data\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction encodingFromData (data) {\r\n  if (data instanceof Uint8Array) {\r\n    data = decodeText(data)\r\n  }\r\n\r\n  return encoding(/** @type {BaseCode} */(data[0]))\r\n}\r\n\r\nexports = module.exports = multibase\r\nexports.encode = encode\r\nexports.decode = decode\r\nexports.isEncoded = isEncoded\r\nexports.encoding = encoding\r\nexports.encodingFromData = encodingFromData\r\nexports.names = Object.freeze(constants.names)\r\nexports.codes = Object.freeze(constants.codes)\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAM;EAAEC,UAAF;EAAcC,UAAd;EAA0BC;AAA1B,IAAqCH,OAAO,CAAC,QAAD,CAAlD;AAEA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAoBC,UAApB,EAAgCC,GAAhC,EAAqC;EACnC,IAAI,CAACA,GAAL,EAAU;IACR,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;EACD;;EACD,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAoBC,QAAQ,CAACL,UAAD,CAAlC;EACAM,WAAW,CAACH,IAAD,EAAOF,GAAP,CAAX;EAEA,OAAOH,MAAM,CAAC,CAACM,OAAD,EAAUH,GAAV,CAAD,EAAiBG,OAAO,CAACG,MAAR,GAAiBN,GAAG,CAACM,MAAtC,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAiBR,UAAjB,EAA6BC,GAA7B,EAAkC;EAChC,MAAMQ,GAAG,GAAGJ,QAAQ,CAACL,UAAD,CAApB;EACA,MAAMU,IAAI,GAAGd,UAAU,CAACa,GAAG,CAACD,MAAJ,CAAWP,GAAX,CAAD,CAAvB;EAEA,OAAOH,MAAM,CAAC,CAACW,GAAG,CAACL,OAAL,EAAcM,IAAd,CAAD,EAAsBD,GAAG,CAACL,OAAJ,CAAYG,MAAZ,GAAqBG,IAAI,CAACH,MAAhD,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,MAAT,CAAiBD,IAAjB,EAAuB;EACrB,IAAIA,IAAI,YAAYE,UAApB,EAAgC;IAC9BF,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;EACD;;EACD,MAAMG,MAAM,GAAGH,IAAI,CAAC,CAAD,CAAnB,CAJqB,CAMrB;;EACA,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkEI,QAAlE,CAA2ED,MAA3E,CAAJ,EAAwF;IACtFH,IAAI,GAAGA,IAAI,CAACK,WAAL,EAAP;EACD;;EACD,MAAMN,GAAG,GAAGJ,QAAQ;EAAC;EAAwBK,IAAI,CAAC,CAAD,CAA7B,CAApB;EACA,OAAOD,GAAG,CAACE,MAAJ,CAAWD,IAAI,CAACM,SAAL,CAAe,CAAf,CAAX,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBP,IAApB,EAA0B;EACxB,IAAIA,IAAI,YAAYE,UAApB,EAAgC;IAC9BF,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;EACD,CAHuB,CAKxB;;;EACA,IAAIQ,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,IAA/B,MAAyC,iBAA7C,EAAgE;IAC9D,OAAO,KAAP;EACD;;EAED,IAAI;IACF,MAAMD,GAAG,GAAGJ,QAAQ;IAAC;IAAwBK,IAAI,CAAC,CAAD,CAA7B,CAApB;IACA,OAAOD,GAAG,CAACN,IAAX;EACD,CAHD,CAGE,OAAOmB,GAAP,EAAY;IACZ,OAAO,KAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShB,WAAT,CAAsBH,IAAtB,EAA4BF,GAA5B,EAAiC;EAC/B,MAAMQ,GAAG,GAAGJ,QAAQ,CAACF,IAAD,CAApB;EACAM,GAAG,CAACE,MAAJ,CAAWd,UAAU,CAACI,GAAD,CAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,QAAT,CAAmBL,UAAnB,EAA+B;EAC7B,IAAIkB,MAAM,CAACC,SAAP,CAAiBI,cAAjB,CAAgCF,IAAhC,CAAqC3B,SAAS,CAAC8B,KAA/C;EAAsD;EAAwBxB,UAA9E,CAAJ,EAAgG;IAC9F,OAAON,SAAS,CAAC8B,KAAV;IAAgB;IAAwBxB,UAAxC,CAAP;EACD,CAFD,MAEO,IAAIkB,MAAM,CAACC,SAAP,CAAiBI,cAAjB,CAAgCF,IAAhC,CAAqC3B,SAAS,CAAC+B,KAA/C;EAAsD;EAAwBzB,UAA9E,CAAJ,EAAgG;IACrG,OAAON,SAAS,CAAC+B,KAAV;IAAgB;IAAwBzB,UAAxC,CAAP;EACD,CAFM,MAEA;IACL,MAAM,IAAIE,KAAJ,CAAW,yBAAwBF,UAAW,EAA9C,CAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,gBAAT,CAA2BhB,IAA3B,EAAiC;EAC/B,IAAIA,IAAI,YAAYE,UAApB,EAAgC;IAC9BF,IAAI,GAAGb,UAAU,CAACa,IAAD,CAAjB;EACD;;EAED,OAAOL,QAAQ;EAAC;EAAwBK,IAAI,CAAC,CAAD,CAA7B,CAAf;AACD;;AAEDiB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB5B,SAA3B;AACA4B,OAAO,CAACnB,MAAR,GAAiBA,MAAjB;AACAmB,OAAO,CAAChB,MAAR,GAAiBA,MAAjB;AACAgB,OAAO,CAACV,SAAR,GAAoBA,SAApB;AACAU,OAAO,CAACtB,QAAR,GAAmBA,QAAnB;AACAsB,OAAO,CAACD,gBAAR,GAA2BA,gBAA3B;AACAC,OAAO,CAACH,KAAR,GAAgBN,MAAM,CAACW,MAAP,CAAcnC,SAAS,CAAC8B,KAAxB,CAAhB;AACAG,OAAO,CAACF,KAAR,GAAgBP,MAAM,CAACW,MAAP,CAAcnC,SAAS,CAAC+B,KAAxB,CAAhB"},"metadata":{},"sourceType":"script"}