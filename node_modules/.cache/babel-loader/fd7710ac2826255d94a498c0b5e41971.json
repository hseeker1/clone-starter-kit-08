{"ast":null,"code":"var _construct = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/construct\");\n\n/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of the web3.js library.\r\n\r\n    The web3.js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The web3.js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\n\n/**\r\n * @file index.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n *   Gav Wood <gav@parity.io>\r\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\r\n *   Marek Kotewicz <marek@parity.io>\r\n *   Marian Oancea <marian@ethereum.org>\r\n * @date 2017\r\n */\nglobal.rootRequire = function (name) {\n  return require(\"\".concat(__dirname, \"/packages/\").concat(name, \"/src/index.js\"));\n};\n\nvar _require = require('./packages/caver-core'),\n    packageInit = _require.packageInit,\n    providers = _require.providers;\n\nvar Klay = require('./packages/caver-klay');\n\nvar Account = require('./packages/caver-account');\n\nvar KeyringContainer = require('./packages/caver-wallet');\n\nvar Transaction = require('./packages/caver-transaction');\n\nvar RPC = require('./packages/caver-rpc');\n\nvar abi = require('./packages/caver-abi');\n\nvar BaseContract = require('./packages/caver-contract');\n\nvar KCT = require('./packages/caver-kct');\n\nvar Validator = require('./packages/caver-validator');\n\nvar core = require('./packages/caver-core');\n\nvar middleware = require('./packages/caver-middleware');\n\nvar utils = require('./packages/caver-utils');\n\nvar formatters = require('./packages/caver-core-helpers').formatters;\n\nvar IPFS = require('./packages/caver-ipfs');\n\nvar _require2 = require('./package.json'),\n    version = _require2.version;\n/**\r\n * A caver class implemented to use Klaytn easily.\r\n *\r\n * @example\r\n * const Caver = require('caver-js')\r\n * const caver = new Caver('http://{your en url}:{port}')\r\n *\r\n * // If you want to create a provider, you can do like below.\r\n * const httpProvider = new Caver.providers.HttpProvider('http://{your en url}:{port}')\r\n * const caver = new Caver(httpProvider)\r\n *\r\n * // Use websocket provider with Caver.\r\n * const websocketProvider = new Caver.providers.WebsocketProvider('ws://{your en url}:{port}')\r\n * const caver = new Caver(websocketProvider)\r\n * caver.currentProvider.connection.close()\r\n *\r\n * @class\r\n * @constructor\r\n * @param {string|HttpProvider|WebsocketProvider|IpcProvider} [provider] - The url string of the Node to connect with. You can pass the provider instance directly.\r\n */\n\n\nfunction Caver(provider, net) {\n  var _this2 = this;\n\n  var _this = this;\n\n  this.use = middleware.registerMiddleware.bind(middleware); // sets _requestmanager etc\n\n  packageInit(this, [provider, net]);\n  /** @type {string} */\n\n  this.version = version;\n  /** @type {module:utils} */\n\n  this.utils = utils;\n  /** @type {typeof Account} */\n\n  this.account = Account;\n  /** @type {ABI} */\n\n  this.abi = abi;\n  /** @type {KeyringContainer} */\n\n  this.wallet = new KeyringContainer(); // ex) call `caver.klay.property` || `caver.klay.method(...)`\n\n  /** @type {KCT} */\n\n  this.kct = new KCT(this);\n  this.klay = new Klay(this);\n  /** @type {RPC} */\n\n  this.rpc = new RPC(this);\n  /** @type {Validator} */\n\n  this.validator = new Validator(this.rpc.klay.klaytnCall);\n  /** @type {module:Transaction} */\n\n  this.transaction = new Transaction(this.rpc.klay.klaytnCall);\n  /** @type {IPFS} */\n\n  this.ipfs = new IPFS(); // overwrite package setProvider\n\n  var setProvider = this.setProvider;\n  /**\r\n   * Changes the current provider of the Caver.\r\n   * You can access the provider's constructor via `const Caver = require('caver-js'); const provider = new Caver.providers.XXXProvider('...')`.\r\n   *\r\n   * @example\r\n   * const isSet = caver.setProvider('http://{your en url}:{port}')\r\n   * const isSet = caver.setProvider(new Caver.providers.HttpProvider('http://{your en url}:{port}'))\r\n   *\r\n   * const isSet = caver.setProvider('ws://{your en url}:{port}')\r\n   * const isSet = caver.setProvider(new Caver.providers.WebsocketProvider('http://{your en url}:{port}'))\r\n   *\r\n   * @param {string|HttpProvider|WebsocketProvider|IpcProvider} p - The url string of the Node or the provider instance.\r\n   * @return {boolean} `true` means provider is set successfully.\r\n   */\n\n  this.setProvider = function (p, n) {\n    setProvider.apply(_this2, [p, n]);\n\n    _this.klay.setRequestManager(_this._requestManager);\n\n    _this.rpc.setRequestManager(_this._requestManager);\n\n    _this.kct.setRequestManager(_this._requestManager);\n\n    _this.contract._requestManager = _this._requestManager;\n    _this.contract.currentProvider = _this._provider;\n    return true;\n  };\n\n  var self = this;\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments);\n    core.packageInit(this, [self]);\n    this.setWallet(self.wallet);\n  };\n\n  Contract.create = function () {\n    // With `caver.contract`, `caver.wallet` must be set in the `contarct._wallet`,\n    // so the Contract constructor defined above must be called here.\n    return _construct(Contract, Array.prototype.slice.call(arguments));\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  };\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract;\n  /** @type {typeof Contract} */\n\n  this.contract = Contract;\n  this.contract._requestManager = this._requestManager;\n  this.contract.currentProvider = this._requestManager.provider;\n}\n/**\r\n * @type {module:utils}\r\n *\r\n * @example\r\n * const utils = require('caver-js').utils\r\n * */\n\n\nCaver.utils = utils;\n/**\r\n * @type {ABI}\r\n *\r\n * @example\r\n * const abi = require('caver-js').abi\r\n * */\n\nCaver.abi = abi;\n/**\r\n * The account key types which are used in the `caver.account` package.\r\n *\r\n * @typedef {object} Caver.Providers\r\n * @property {typeof WebsocketProvider} WebsocketProvider - Class representing WebsocketProvider.\r\n * @property {typeof HttpProvider} HttpProvider - Class representing HttpProvider.\r\n * @property {typeof IpcProvider} IpcProvider - Class representing IpcProvider.\r\n */\n\n/**\r\n * @type {Caver.Providers}\r\n *\r\n * @example\r\n * const providers = require('./index').providers\r\n * */\n\nCaver.providers = providers;\nmodule.exports = Caver;\nmodule.exports.formatters = formatters;","map":{"version":3,"names":["global","rootRequire","name","require","__dirname","packageInit","providers","Klay","Account","KeyringContainer","Transaction","RPC","abi","BaseContract","KCT","Validator","core","middleware","utils","formatters","IPFS","version","Caver","provider","net","_this","use","registerMiddleware","bind","account","wallet","kct","klay","rpc","validator","klaytnCall","transaction","ipfs","setProvider","p","n","apply","setRequestManager","_requestManager","contract","currentProvider","_provider","self","Contract","arguments","setWallet","create","prototype","Object","constructor","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/index.js"],"sourcesContent":["/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of the web3.js library.\r\n\r\n    The web3.js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The web3.js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\r\n/**\r\n * @file index.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n *   Gav Wood <gav@parity.io>\r\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\r\n *   Marek Kotewicz <marek@parity.io>\r\n *   Marian Oancea <marian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\nglobal.rootRequire = name => require(`${__dirname}/packages/${name}/src/index.js`)\r\n\r\nconst { packageInit, providers } = require('./packages/caver-core')\r\nconst Klay = require('./packages/caver-klay')\r\nconst Account = require('./packages/caver-account')\r\nconst KeyringContainer = require('./packages/caver-wallet')\r\nconst Transaction = require('./packages/caver-transaction')\r\nconst RPC = require('./packages/caver-rpc')\r\nconst abi = require('./packages/caver-abi')\r\nconst BaseContract = require('./packages/caver-contract')\r\nconst KCT = require('./packages/caver-kct')\r\nconst Validator = require('./packages/caver-validator')\r\n\r\nconst core = require('./packages/caver-core')\r\nconst middleware = require('./packages/caver-middleware')\r\nconst utils = require('./packages/caver-utils')\r\nconst formatters = require('./packages/caver-core-helpers').formatters\r\n\r\nconst IPFS = require('./packages/caver-ipfs')\r\n\r\nconst { version } = require('./package.json')\r\n\r\n/**\r\n * A caver class implemented to use Klaytn easily.\r\n *\r\n * @example\r\n * const Caver = require('caver-js')\r\n * const caver = new Caver('http://{your en url}:{port}')\r\n *\r\n * // If you want to create a provider, you can do like below.\r\n * const httpProvider = new Caver.providers.HttpProvider('http://{your en url}:{port}')\r\n * const caver = new Caver(httpProvider)\r\n *\r\n * // Use websocket provider with Caver.\r\n * const websocketProvider = new Caver.providers.WebsocketProvider('ws://{your en url}:{port}')\r\n * const caver = new Caver(websocketProvider)\r\n * caver.currentProvider.connection.close()\r\n *\r\n * @class\r\n * @constructor\r\n * @param {string|HttpProvider|WebsocketProvider|IpcProvider} [provider] - The url string of the Node to connect with. You can pass the provider instance directly.\r\n */\r\nfunction Caver(provider, net) {\r\n    const _this = this\r\n\r\n    this.use = middleware.registerMiddleware.bind(middleware)\r\n    // sets _requestmanager etc\r\n    packageInit(this, [provider, net])\r\n\r\n    /** @type {string} */\r\n    this.version = version\r\n\r\n    /** @type {module:utils} */\r\n    this.utils = utils\r\n    /** @type {typeof Account} */\r\n    this.account = Account\r\n\r\n    /** @type {ABI} */\r\n    this.abi = abi\r\n    /** @type {KeyringContainer} */\r\n    this.wallet = new KeyringContainer()\r\n\r\n    // ex) call `caver.klay.property` || `caver.klay.method(...)`\r\n    /** @type {KCT} */\r\n    this.kct = new KCT(this)\r\n    this.klay = new Klay(this)\r\n    /** @type {RPC} */\r\n    this.rpc = new RPC(this)\r\n\r\n    /** @type {Validator} */\r\n    this.validator = new Validator(this.rpc.klay.klaytnCall)\r\n    /** @type {module:Transaction} */\r\n    this.transaction = new Transaction(this.rpc.klay.klaytnCall)\r\n\r\n    /** @type {IPFS} */\r\n    this.ipfs = new IPFS()\r\n\r\n    // overwrite package setProvider\r\n    const setProvider = this.setProvider\r\n    /**\r\n     * Changes the current provider of the Caver.\r\n     * You can access the provider's constructor via `const Caver = require('caver-js'); const provider = new Caver.providers.XXXProvider('...')`.\r\n     *\r\n     * @example\r\n     * const isSet = caver.setProvider('http://{your en url}:{port}')\r\n     * const isSet = caver.setProvider(new Caver.providers.HttpProvider('http://{your en url}:{port}'))\r\n     *\r\n     * const isSet = caver.setProvider('ws://{your en url}:{port}')\r\n     * const isSet = caver.setProvider(new Caver.providers.WebsocketProvider('http://{your en url}:{port}'))\r\n     *\r\n     * @param {string|HttpProvider|WebsocketProvider|IpcProvider} p - The url string of the Node or the provider instance.\r\n     * @return {boolean} `true` means provider is set successfully.\r\n     */\r\n    this.setProvider = (p, n) => {\r\n        setProvider.apply(this, [p, n])\r\n        _this.klay.setRequestManager(_this._requestManager)\r\n        _this.rpc.setRequestManager(_this._requestManager)\r\n        _this.kct.setRequestManager(_this._requestManager)\r\n        _this.contract._requestManager = _this._requestManager\r\n        _this.contract.currentProvider = _this._provider\r\n        return true\r\n    }\r\n\r\n    const self = this\r\n    const Contract = function Contract() {\r\n        BaseContract.apply(this, arguments)\r\n\r\n        core.packageInit(this, [self])\r\n        this.setWallet(self.wallet)\r\n    }\r\n\r\n    Contract.create = function() {\r\n        // With `caver.contract`, `caver.wallet` must be set in the `contarct._wallet`,\r\n        // so the Contract constructor defined above must be called here.\r\n        return new Contract(...arguments)\r\n    }\r\n\r\n    Contract.setProvider = function() {\r\n        BaseContract.setProvider.apply(this, arguments)\r\n    }\r\n\r\n    Contract.prototype = Object.create(BaseContract.prototype)\r\n    Contract.prototype.constructor = Contract\r\n\r\n    /** @type {typeof Contract} */\r\n    this.contract = Contract\r\n    this.contract._requestManager = this._requestManager\r\n    this.contract.currentProvider = this._requestManager.provider\r\n}\r\n\r\n/**\r\n * @type {module:utils}\r\n *\r\n * @example\r\n * const utils = require('caver-js').utils\r\n * */\r\nCaver.utils = utils\r\n\r\n/**\r\n * @type {ABI}\r\n *\r\n * @example\r\n * const abi = require('caver-js').abi\r\n * */\r\nCaver.abi = abi\r\n\r\n/**\r\n * The account key types which are used in the `caver.account` package.\r\n *\r\n * @typedef {object} Caver.Providers\r\n * @property {typeof WebsocketProvider} WebsocketProvider - Class representing WebsocketProvider.\r\n * @property {typeof HttpProvider} HttpProvider - Class representing HttpProvider.\r\n * @property {typeof IpcProvider} IpcProvider - Class representing IpcProvider.\r\n */\r\n/**\r\n * @type {Caver.Providers}\r\n *\r\n * @example\r\n * const providers = require('./index').providers\r\n * */\r\nCaver.providers = providers\r\n\r\nmodule.exports = Caver\r\nmodule.exports.formatters = formatters\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}