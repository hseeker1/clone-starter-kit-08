{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst core = require('../../caver-core');\n\nconst Method = require('../../caver-core-method');\n/**\r\n * A class that can invoke Net RPC Calls.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nconst Net = function Net() {\n  const _this = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  core.packageInit(this, args);\n  const netMethods = [\n  /**\r\n   * Returns the network identifier (network ID) of the Klaytn Node.\r\n   *\r\n   * @memberof Net\r\n   * @method getNetworkId\r\n   * @instance\r\n   *\r\n   * @example\r\n   * const result = await caver.rpc.net.getNetworkId()\r\n   *\r\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n   * @return {Promise<number>} The network id.\r\n   */\n  new Method({\n    name: 'getNetworkId',\n    call: 'net_networkID',\n    params: 0\n  }), new Method({\n    name: 'getNetworkID',\n    call: 'net_networkID',\n    params: 0\n  }),\n  /**\r\n   * Returns `true` if the Klaytn Node is actively listening for network connections.\r\n   *\r\n   * @memberof Net\r\n   * @method isListening\r\n   * @instance\r\n   *\r\n   * @example\r\n   * const result = await caver.rpc.net.isListening()\r\n   *\r\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n   * @return {Promise<boolean>} `true` when listening, otherwise `false`.\r\n   */\n  new Method({\n    name: 'isListening',\n    call: 'net_listening',\n    params: 0\n  }),\n  /**\r\n   * Returns the number of peers currently connected to the Klaytn Node.\r\n   *\r\n   * @memberof Net\r\n   * @method getPeerCount\r\n   * @instance\r\n   *\r\n   * @example\r\n   * const result = await caver.rpc.net.getPeerCount()\r\n   *\r\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n   * @return {Promise<string>} The number of connected peers in hex.\r\n   */\n  new Method({\n    name: 'getPeerCount',\n    call: 'net_peerCount',\n    params: 0\n  }),\n  /**\r\n   * Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.\r\n   *\r\n   * @memberof Net\r\n   * @method getPeerCountByType\r\n   * @instance\r\n   *\r\n   * @example\r\n   * const result = await caver.rpc.net.getPeerCountByType()\r\n   *\r\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n   * @return {Promise<object>} The number of connected peers by type as well as the total number of connected peers.\r\n   */\n  new Method({\n    name: 'getPeerCountByType',\n    call: 'net_peerCountByType',\n    params: 0\n  }),\n  /**\r\n   * Returns the current klaytn protocol version.\r\n   *\r\n   * @memberof Net\r\n   * @method getVersion\r\n   * @instance\r\n   *\r\n   * @example\r\n   * const result = await caver.rpc.net.getVersion()\r\n   *\r\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n   * @return {Promise<string>} The klaytn protocol version.\r\n   */\n  new Method({\n    name: 'getVersion',\n    call: 'net_version',\n    params: 0\n  })];\n  netMethods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager);\n  });\n};\n\nmodule.exports = Net;","map":{"version":3,"names":["core","require","Method","Net","_this","args","packageInit","netMethods","name","call","params","forEach","method","attachToObject","setRequestManager","_requestManager","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-rpc/src/net.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst core = require('../../caver-core')\r\nconst Method = require('../../caver-core-method')\r\n\r\n/**\r\n * A class that can invoke Net RPC Calls.\r\n * @class\r\n * @hideconstructor\r\n */\r\nconst Net = function Net(...args) {\r\n    const _this = this\r\n\r\n    core.packageInit(this, args)\r\n\r\n    const netMethods = [\r\n        /**\r\n         * Returns the network identifier (network ID) of the Klaytn Node.\r\n         *\r\n         * @memberof Net\r\n         * @method getNetworkId\r\n         * @instance\r\n         *\r\n         * @example\r\n         * const result = await caver.rpc.net.getNetworkId()\r\n         *\r\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n         * @return {Promise<number>} The network id.\r\n         */\r\n        new Method({\r\n            name: 'getNetworkId',\r\n            call: 'net_networkID',\r\n            params: 0,\r\n        }),\r\n        new Method({\r\n            name: 'getNetworkID',\r\n            call: 'net_networkID',\r\n            params: 0,\r\n        }),\r\n        /**\r\n         * Returns `true` if the Klaytn Node is actively listening for network connections.\r\n         *\r\n         * @memberof Net\r\n         * @method isListening\r\n         * @instance\r\n         *\r\n         * @example\r\n         * const result = await caver.rpc.net.isListening()\r\n         *\r\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n         * @return {Promise<boolean>} `true` when listening, otherwise `false`.\r\n         */\r\n        new Method({\r\n            name: 'isListening',\r\n            call: 'net_listening',\r\n            params: 0,\r\n        }),\r\n        /**\r\n         * Returns the number of peers currently connected to the Klaytn Node.\r\n         *\r\n         * @memberof Net\r\n         * @method getPeerCount\r\n         * @instance\r\n         *\r\n         * @example\r\n         * const result = await caver.rpc.net.getPeerCount()\r\n         *\r\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n         * @return {Promise<string>} The number of connected peers in hex.\r\n         */\r\n        new Method({\r\n            name: 'getPeerCount',\r\n            call: 'net_peerCount',\r\n            params: 0,\r\n        }),\r\n        /**\r\n         * Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.\r\n         *\r\n         * @memberof Net\r\n         * @method getPeerCountByType\r\n         * @instance\r\n         *\r\n         * @example\r\n         * const result = await caver.rpc.net.getPeerCountByType()\r\n         *\r\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n         * @return {Promise<object>} The number of connected peers by type as well as the total number of connected peers.\r\n         */\r\n        new Method({\r\n            name: 'getPeerCountByType',\r\n            call: 'net_peerCountByType',\r\n            params: 0,\r\n        }),\r\n        /**\r\n         * Returns the current klaytn protocol version.\r\n         *\r\n         * @memberof Net\r\n         * @method getVersion\r\n         * @instance\r\n         *\r\n         * @example\r\n         * const result = await caver.rpc.net.getVersion()\r\n         *\r\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n         * @return {Promise<string>} The klaytn protocol version.\r\n         */\r\n        new Method({\r\n            name: 'getVersion',\r\n            call: 'net_version',\r\n            params: 0,\r\n        }),\r\n    ]\r\n\r\n    netMethods.forEach(function(method) {\r\n        method.attachToObject(_this)\r\n        method.setRequestManager(_this._requestManager)\r\n    })\r\n}\r\n\r\nmodule.exports = Net\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,yBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,GAAG,GAAG,SAASA,GAAT,GAAsB;EAC9B,MAAMC,KAAK,GAAG,IAAd;;EAD8B,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAG9BL,IAAI,CAACM,WAAL,CAAiB,IAAjB,EAAuBD,IAAvB;EAEA,MAAME,UAAU,GAAG;EACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIL,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAde,EAmBf,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAnBe;EAwBf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,aADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CArCe;EA0Cf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAvDe;EA4Df;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,oBADC;IAEPC,IAAI,EAAE,qBAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAzEe;EA8Ef;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,YADC;IAEPC,IAAI,EAAE,aAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CA3Fe,CAAnB;EAkGAH,UAAU,CAACI,OAAX,CAAmB,UAASC,MAAT,EAAiB;IAChCA,MAAM,CAACC,cAAP,CAAsBT,KAAtB;IACAQ,MAAM,CAACE,iBAAP,CAAyBV,KAAK,CAACW,eAA/B;EACH,CAHD;AAIH,CA3GD;;AA6GAC,MAAM,CAACC,OAAP,GAAiBd,GAAjB"},"metadata":{},"sourceType":"script"}