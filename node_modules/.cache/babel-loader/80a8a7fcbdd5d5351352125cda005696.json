{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\r\n   * @type {import('..').ImplementsMethod<'query', import('ipfs-core/src/components/dht')>}\r\n   */\n  async function* query(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(`${peerId}`),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n      message.responses = (message.responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        };\n      });\n      yield message;\n    }\n  }\n\n  return query;\n});","map":{"version":3,"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","timeout","signal","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst multiaddr = require('multiaddr')\r\nconst toCamel = require('../lib/object-to-camel')\r\nconst configure = require('../lib/configure')\r\nconst toUrlSearchParams = require('../lib/to-url-search-params')\r\n\r\nmodule.exports = configure(api => {\r\n  /**\r\n   * @type {import('..').ImplementsMethod<'query', import('ipfs-core/src/components/dht')>}\r\n   */\r\n  async function * query (peerId, options = {}) {\r\n    const res = await api.post('dht/query', {\r\n      timeout: options.timeout,\r\n      signal: options.signal,\r\n      searchParams: toUrlSearchParams({\r\n        arg: new CID(`${peerId}`),\r\n        ...options\r\n      }),\r\n      headers: options.headers\r\n    })\r\n\r\n    for await (let message of res.ndjson()) {\r\n      message = toCamel(message)\r\n      message.id = new CID(message.id)\r\n      message.responses = (message.responses || []).map(({ ID, Addrs }) => ({\r\n        id: ID,\r\n        addrs: (Addrs || []).map(a => multiaddr(a))\r\n      }))\r\n      yield message\r\n    }\r\n  }\r\n\r\n  return query\r\n})\r\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,KAAjB,CAAwBC,MAAxB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC5C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;MACtCC,OAAO,EAAEH,OAAO,CAACG,OADqB;MAEtCC,MAAM,EAAEJ,OAAO,CAACI,MAFsB;MAGtCC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAE,IAAIjB,GAAJ,CAAS,GAAEU,MAAO,EAAlB,CADyB;QAE9B,GAAGC;MAF2B,CAAD,CAHO;MAOtCO,OAAO,EAAEP,OAAO,CAACO;IAPqB,CAAtB,CAAlB;;IAUA,WAAW,IAAIC,OAAf,IAA0BP,GAAG,CAACQ,MAAJ,EAA1B,EAAwC;MACtCD,OAAO,GAAGhB,OAAO,CAACgB,OAAD,CAAjB;MACAA,OAAO,CAACE,EAAR,GAAa,IAAIrB,GAAJ,CAAQmB,OAAO,CAACE,EAAhB,CAAb;MACAF,OAAO,CAACG,SAAR,GAAoB,CAACH,OAAO,CAACG,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;QAAA,IAAC;UAAEC,EAAF;UAAMC;QAAN,CAAD;QAAA,OAAoB;UACpEJ,EAAE,EAAEG,EADgE;UAEpEE,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAIzB,SAAS,CAACyB,CAAD,CAAhC;QAF6D,CAApB;MAAA,CAA9B,CAApB;MAIA,MAAMR,OAAN;IACD;EACF;;EAED,OAAOV,KAAP;AACD,CA3ByB,CAA1B"},"metadata":{},"sourceType":"script"}