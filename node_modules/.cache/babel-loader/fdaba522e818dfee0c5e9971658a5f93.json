{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst Hash = require('eth-lib/lib/hash');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  const [nonce, gasPrice, gas, to, value, input, v, r, s] = RLP.decode(rlpEncoded);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    input: input,\n    signatures: [v, r, s]\n  };\n}\n/**\r\n * Represents a legacy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction|LegacyTransaction} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\n\n\nclass LegacyTransaction extends AbstractTransaction {\n  /**\r\n   * Creates a legacy transaction.\r\n   * @method create\r\n   * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   * @return {LegacyTransaction}\r\n   */\n  static create(createTxObj, klaytnCall) {\n    return new LegacyTransaction(createTxObj, klaytnCall);\n  }\n  /**\r\n   * decodes the RLP-encoded string and returns a LegacyTransaction instance.\r\n   *\r\n   * @param {string} rlpEncoded The RLP-encoded legacy transaction.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   * @return {LegacyTransaction}\r\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new LegacyTransaction(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\r\n   * Creates a legacy transaction.\r\n   * @constructor\r\n   * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000';\n    super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj, klaytnCall);\n    this.to = createTxObj.to || '0x';\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data || '0x';\n    this.value = createTxObj.value || '0x0';\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\r\n   * Appends signatures array to transaction.\r\n   * Legacy transaction cannot have more than one signature, so an error will be occured if the transaction already has a signature or the `sig` parameter has more than one signatures.\r\n   *\r\n   * @example\r\n   * tx.appendSignatures([ '0x0fea', '0xade94...', '0x38160...' ])\r\n   *\r\n   * @override\r\n   * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - The `signatures` to be appended to the transaction. {@link SignatureData|SignatureData} instance or an array containing {@link SignatureData|SignatureData} instances.\r\n   *                                                                                                 An array in which each 'v', 'r', and 's' are sequentially defined as string formats or a 2D array containing those arrays can also be taken as parameters.\r\n   */\n\n\n  appendSignatures(sig) {\n    if (!utils.isEmptySig(this.signatures)) throw new Error(`signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`);\n\n    if (Array.isArray(sig[0])) {\n      if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`);\n      sig = sig[0];\n    }\n\n    this.signatures = sig;\n  }\n  /**\r\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n   *\r\n   * @example\r\n   * const result = tx.getRLPEncoding()\r\n   *\r\n   * @return {string} An RLP-encoded transaction string.\r\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.signatures.v, this.signatures.r, this.signatures.s]);\n  }\n  /**\r\n   * Returns RLP-encoded string for making signature\r\n   * @override\r\n   * @return {string}\r\n   */\n\n\n  getRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    if (this.chainId === undefined) throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`);\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, Bytes.fromNat(this.chainId || '0x1'), '0x', '0x']);\n  }\n  /**\r\n   * LegacyTransaction does not have a common RLP encoding because no other type exists.\r\n   * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    return this.getRLPEncodingForSignature();\n  }\n  /**\r\n   * Recovers the public key strings from `signatures` field in transaction object.\r\n   * If you want to derive an address from public key, please use {@link module:utils~publicKeyToAddress|caver.utils.publicKeyToAddress}.\r\n   *\r\n   * @example\r\n   * const publicKey = tx.recoverPublicKeys()\r\n   *\r\n   * @return {Array.<string>} An array containing public keys recovered from `signatures`.\r\n   */\n\n\n  recoverPublicKeys() {\n    if (utils.isEmptySig(this.signatures)) throw new Error(`Failed to recover public key from signatures: signatures is empty.`);\n    const recovery = Bytes.toNumber(this.signatures.v);\n    const chainId = recovery < 35 ? Bytes.fromNat('0x1') : Bytes.fromNumber(recovery - 35 >> 1);\n    if (!this.chainId) this.chainId = chainId;\n    const signingDataHex = this.getRLPEncodingForSignature();\n    const hasedSigningData = Hash.keccak256(signingDataHex);\n    const publicKeys = [];\n    publicKeys.push(utils.recoverPublicKey(hasedSigningData, this.signatures, true));\n    return publicKeys;\n  }\n  /**\r\n   * Fills in the optional variables in transaction.\r\n   *\r\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n   *\r\n   * @example\r\n   * await tx.fillTransaction()\r\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\r\n   * Checks that member variables that can be defined by the user are defined.\r\n   * If there is an undefined variable, an error occurs.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = LegacyTransaction;","map":{"version":3,"names":["_","require","RLP","Bytes","Hash","AbstractTransaction","TX_TYPE_STRING","isNot","utils","_decode","rlpEncoded","addHexPrefix","nonce","gasPrice","gas","to","value","input","v","r","s","decode","trimLeadingZero","signatures","LegacyTransaction","create","createTxObj","klaytnCall","constructor","isString","from","TxTypeLegacyTransaction","data","Error","undefined","_gasPrice","g","numberToHex","_to","address","isAddress","toLowerCase","_value","val","_input","isHex","appendSignatures","sig","isEmptySig","type","Array","isArray","length","getRLPEncoding","validateOptionalValues","encode","fromNat","getRLPEncodingForSignature","chainId","getCommonRLPEncodingForSignature","recoverPublicKeys","recovery","toNumber","fromNumber","signingDataHex","hasedSigningData","keccak256","publicKeys","push","recoverPublicKey","fillTransaction","Promise","all","getChainId","suggestGasPrice","getNonce","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/legacyTransaction/legacyTransaction.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst Hash = require('eth-lib/lib/hash')\r\nconst AbstractTransaction = require('../abstractTransaction')\r\nconst { TX_TYPE_STRING, isNot } = require('../../transactionHelper/transactionHelper')\r\nconst utils = require('../../../../caver-utils/src')\r\n\r\nfunction _decode(rlpEncoded) {\r\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\r\n    const [nonce, gasPrice, gas, to, value, input, v, r, s] = RLP.decode(rlpEncoded)\r\n    return {\r\n        nonce: utils.trimLeadingZero(nonce),\r\n        gasPrice: utils.trimLeadingZero(gasPrice),\r\n        gas: utils.trimLeadingZero(gas),\r\n        to,\r\n        value: utils.trimLeadingZero(value),\r\n        input: input,\r\n        signatures: [v, r, s],\r\n    }\r\n}\r\n/**\r\n * Represents a legacy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction|LegacyTransaction} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\r\nclass LegacyTransaction extends AbstractTransaction {\r\n    /**\r\n     * Creates a legacy transaction.\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {LegacyTransaction}\r\n     */\r\n    static create(createTxObj, klaytnCall) {\r\n        return new LegacyTransaction(createTxObj, klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * decodes the RLP-encoded string and returns a LegacyTransaction instance.\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded legacy transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {LegacyTransaction}\r\n     */\r\n    static decode(rlpEncoded, klaytnCall) {\r\n        return new LegacyTransaction(_decode(rlpEncoded), klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * Creates a legacy transaction.\r\n     * @constructor\r\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     */\r\n    constructor(createTxObj, klaytnCall) {\r\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\r\n\r\n        createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000'\r\n\r\n        super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj, klaytnCall)\r\n        this.to = createTxObj.to || '0x'\r\n\r\n        if (createTxObj.input && createTxObj.data)\r\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\r\n        this.input = createTxObj.input || createTxObj.data || '0x'\r\n\r\n        this.value = createTxObj.value || '0x0'\r\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get gasPrice() {\r\n        return this._gasPrice\r\n    }\r\n\r\n    set gasPrice(g) {\r\n        this._gasPrice = utils.numberToHex(g)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get to() {\r\n        return this._to\r\n    }\r\n\r\n    set to(address) {\r\n        if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`)\r\n        this._to = address.toLowerCase()\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n    set value(val) {\r\n        this._value = utils.numberToHex(val)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get input() {\r\n        return this._input\r\n    }\r\n\r\n    set input(input) {\r\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\r\n        this._input = utils.addHexPrefix(input)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get data() {\r\n        return this._input\r\n    }\r\n\r\n    set data(data) {\r\n        this._input = data\r\n    }\r\n\r\n    /**\r\n     * Appends signatures array to transaction.\r\n     * Legacy transaction cannot have more than one signature, so an error will be occured if the transaction already has a signature or the `sig` parameter has more than one signatures.\r\n     *\r\n     * @example\r\n     * tx.appendSignatures([ '0x0fea', '0xade94...', '0x38160...' ])\r\n     *\r\n     * @override\r\n     * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - The `signatures` to be appended to the transaction. {@link SignatureData|SignatureData} instance or an array containing {@link SignatureData|SignatureData} instances.\r\n     *                                                                                                 An array in which each 'v', 'r', and 's' are sequentially defined as string formats or a 2D array containing those arrays can also be taken as parameters.\r\n     */\r\n    appendSignatures(sig) {\r\n        if (!utils.isEmptySig(this.signatures))\r\n            throw new Error(\r\n                `signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`\r\n            )\r\n\r\n        if (Array.isArray(sig[0])) {\r\n            if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`)\r\n            sig = sig[0]\r\n        }\r\n\r\n        this.signatures = sig\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\r\n    getRLPEncoding() {\r\n        this.validateOptionalValues()\r\n\r\n        return RLP.encode([\r\n            Bytes.fromNat(this.nonce),\r\n            Bytes.fromNat(this.gasPrice),\r\n            Bytes.fromNat(this.gas),\r\n            this.to.toLowerCase(),\r\n            Bytes.fromNat(this.value),\r\n            this.input,\r\n            this.signatures.v,\r\n            this.signatures.r,\r\n            this.signatures.s,\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * Returns RLP-encoded string for making signature\r\n     * @override\r\n     * @return {string}\r\n     */\r\n    getRLPEncodingForSignature() {\r\n        this.validateOptionalValues()\r\n        if (this.chainId === undefined)\r\n            throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`)\r\n\r\n        return RLP.encode([\r\n            Bytes.fromNat(this.nonce),\r\n            Bytes.fromNat(this.gasPrice),\r\n            Bytes.fromNat(this.gas),\r\n            this.to.toLowerCase(),\r\n            Bytes.fromNat(this.value),\r\n            this.input,\r\n            Bytes.fromNat(this.chainId || '0x1'),\r\n            '0x',\r\n            '0x',\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * LegacyTransaction does not have a common RLP encoding because no other type exists.\r\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\r\n     *\r\n     * @return {string}\r\n     */\r\n    getCommonRLPEncodingForSignature() {\r\n        return this.getRLPEncodingForSignature()\r\n    }\r\n\r\n    /**\r\n     * Recovers the public key strings from `signatures` field in transaction object.\r\n     * If you want to derive an address from public key, please use {@link module:utils~publicKeyToAddress|caver.utils.publicKeyToAddress}.\r\n     *\r\n     * @example\r\n     * const publicKey = tx.recoverPublicKeys()\r\n     *\r\n     * @return {Array.<string>} An array containing public keys recovered from `signatures`.\r\n     */\r\n    recoverPublicKeys() {\r\n        if (utils.isEmptySig(this.signatures)) throw new Error(`Failed to recover public key from signatures: signatures is empty.`)\r\n\r\n        const recovery = Bytes.toNumber(this.signatures.v)\r\n        const chainId = recovery < 35 ? Bytes.fromNat('0x1') : Bytes.fromNumber((recovery - 35) >> 1)\r\n        if (!this.chainId) this.chainId = chainId\r\n        const signingDataHex = this.getRLPEncodingForSignature()\r\n        const hasedSigningData = Hash.keccak256(signingDataHex)\r\n\r\n        const publicKeys = []\r\n        publicKeys.push(utils.recoverPublicKey(hasedSigningData, this.signatures, true))\r\n\r\n        return publicKeys\r\n    }\r\n\r\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\r\n    async fillTransaction() {\r\n        const [chainId, gasPrice, nonce] = await Promise.all([\r\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\r\n            isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice,\r\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\r\n        ])\r\n\r\n        this.chainId = chainId\r\n        this.gasPrice = gasPrice\r\n        this.nonce = nonce\r\n    }\r\n\r\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\r\n    validateOptionalValues() {\r\n        super.validateOptionalValues()\r\n        if (this.gasPrice === undefined)\r\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\r\n    }\r\n}\r\n\r\nmodule.exports = LegacyTransaction\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}