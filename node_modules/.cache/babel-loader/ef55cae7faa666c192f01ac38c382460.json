{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\r\n * Representing an AccountKeyFail.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar AccountKeyFail = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyFail() {\n    _classCallCheck(this, AccountKeyFail);\n  }\n\n  _createClass(AccountKeyFail, [{\n    key: \"getRLPEncoding\",\n    value:\n    /**\r\n     * Returns an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyFail.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\n    // eslint-disable-next-line class-methods-use-this\n    function getRLPEncoding() {\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG;\n    }\n  }], [{\n    key: \"decode\",\n    value:\n    /**\r\n     * Decodes an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\r\n     * @return {AccountKeyFail}\r\n     */\n    function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) throw new Error(\"Cannot decode to AccountKeyFail. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG, \": \").concat(rlpEncodedKey));\n      return new AccountKeyFail();\n    }\n  }]);\n\n  return AccountKeyFail;\n}();\n\nmodule.exports = AccountKeyFail;","map":{"version":3,"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyFail","ACCOUNT_KEY_FAIL_TAG","rlpEncodedKey","addHexPrefix","startsWith","Error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyFail.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\n\r\n/**\r\n * Representing an AccountKeyFail.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyFail {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\r\n     * @return {AccountKeyFail}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG))\r\n            throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`)\r\n\r\n        return new AccountKeyFail()\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyFail string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyFail.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getRLPEncoding() {\r\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyFail\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,eAA4BA,OAAO,CAAC,oBAAD,CAAnC;AAAA,IAAQC,eAAR,YAAQA,eAAR;AAEA;AACA;AACA;AACA;AACA;;;IACMC,c;;;;;;;;;;IAkBF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI;IACA,0BAAiB;MACb,OAAOD,eAAe,CAACE,oBAAvB;IACH;;;;IA5BD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,gBAAcC,aAAd,EAA6B;MACzBA,aAAa,GAAGL,KAAK,CAACM,YAAN,CAAmBD,aAAnB,CAAhB;MACA,IAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACE,oBAAzC,CAAL,EACI,MAAM,IAAII,KAAJ,+DAAiEN,eAAe,CAACE,oBAAjF,eAA0GC,aAA1G,EAAN;MAEJ,OAAO,IAAIF,cAAJ,EAAP;IACH;;;;;;AAgBLM,MAAM,CAACC,OAAP,GAAiBP,cAAjB"},"metadata":{},"sourceType":"script"}