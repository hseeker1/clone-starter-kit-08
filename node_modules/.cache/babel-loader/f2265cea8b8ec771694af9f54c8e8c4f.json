{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  CODE_FORMAT,\n  getCodeFormatTag,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy)) throw new Error(`Cannot decode to SmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeSmartContractDeploy}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    input,\n    humanReadable: humanReadable === '0x1',\n    codeFormat: getCodeFormatTag(codeFormat),\n    signatures\n  };\n}\n/**\r\n * Represents a smart contract deploy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy|SmartContractDeploy} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\n\n\nclass SmartContractDeploy extends AbstractTransaction {\n  /**\r\n   * Creates a smart contract deploy transaction.\r\n   * @method create\r\n   * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n   *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n   *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   * @return {SmartContractDeploy}\r\n   */\n  static create(createTxObj, klaytnCall) {\n    return new SmartContractDeploy(createTxObj, klaytnCall);\n  }\n  /**\r\n   * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\r\n   *\r\n   * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   * @return {SmartContractDeploy}\r\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new SmartContractDeploy(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\r\n   * Creates a smart contract deploy transaction.\r\n   * @constructor\r\n   * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n   *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n   *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj, klaytnCall);\n    this.to = createTxObj.to || '0x';\n    this.value = createTxObj.value || '0x0';\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n    this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false;\n    this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`);\n    this._to = address.toLowerCase();\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\r\n   * @type {boolean}\r\n   */\n\n\n  get humanReadable() {\n    return this._humanReadable;\n  }\n\n  set humanReadable(hr) {\n    if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`);\n    this._humanReadable = hr;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get codeFormat() {\n    return this._codeFormat;\n  }\n\n  set codeFormat(cf) {\n    this._codeFormat = getCodeFormatTag(cf);\n  }\n  /**\r\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n   *\r\n   * @example\r\n   * const result = tx.getRLPEncoding()\r\n   *\r\n   * @return {string} An RLP-encoded transaction string.\r\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeSmartContractDeploy + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat), signatures]).slice(2);\n  }\n  /**\r\n   * Returns the RLP-encoded string to make the signature of this transaction.\r\n   * This method has to be overrided in classes which extends AbstractTransaction.\r\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n   *\r\n   * @example\r\n   * const result = tx.getCommonRLPEncodingForSignature()\r\n   *\r\n   * @return {string} An RLP-encoded transaction string without signature.\r\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeSmartContractDeploy, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat)]);\n  }\n  /**\r\n   * Fills in the optional variables in transaction.\r\n   *\r\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n   *\r\n   * @example\r\n   * await tx.fillTransaction()\r\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\r\n   * Checks that member variables that can be defined by the user are defined.\r\n   * If there is an undefined variable, an error occurs.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = SmartContractDeploy;","map":{"version":3,"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","CODE_FORMAT","getCodeFormatTag","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeSmartContractDeploy","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","input","humanReadable","codeFormat","signatures","decode","trimLeadingZero","SmartContractDeploy","create","createTxObj","klaytnCall","constructor","isString","data","undefined","EVM","_gasPrice","g","numberToHex","_to","address","toLowerCase","_value","val","_input","isHex","_humanReadable","hr","isBoolean","_codeFormat","cf","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","suggestGasPrice","getNonce","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/smartContractDeploy/smartContractDeploy.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst AbstractTransaction = require('../abstractTransaction')\r\nconst { TX_TYPE_STRING, TX_TYPE_TAG, CODE_FORMAT, getCodeFormatTag, isNot } = require('../../transactionHelper/transactionHelper')\r\nconst utils = require('../../../../caver-utils/src')\r\n\r\nfunction _decode(rlpEncoded) {\r\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\r\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy))\r\n        throw new Error(`Cannot decode to SmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeSmartContractDeploy}: ${rlpEncoded}`)\r\n\r\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\r\n    const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures] = RLP.decode(typeDettached)\r\n\r\n    return {\r\n        nonce: utils.trimLeadingZero(nonce),\r\n        gasPrice: utils.trimLeadingZero(gasPrice),\r\n        gas: utils.trimLeadingZero(gas),\r\n        to,\r\n        value: utils.trimLeadingZero(value),\r\n        from,\r\n        input,\r\n        humanReadable: humanReadable === '0x1',\r\n        codeFormat: getCodeFormatTag(codeFormat),\r\n        signatures,\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a smart contract deploy transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy|SmartContractDeploy} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\r\nclass SmartContractDeploy extends AbstractTransaction {\r\n    /**\r\n     * Creates a smart contract deploy transaction.\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\r\n    static create(createTxObj, klaytnCall) {\r\n        return new SmartContractDeploy(createTxObj, klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {SmartContractDeploy}\r\n     */\r\n    static decode(rlpEncoded, klaytnCall) {\r\n        return new SmartContractDeploy(_decode(rlpEncoded), klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * Creates a smart contract deploy transaction.\r\n     * @constructor\r\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\r\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\r\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     */\r\n    constructor(createTxObj, klaytnCall) {\r\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\r\n        super(TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj, klaytnCall)\r\n        this.to = createTxObj.to || '0x'\r\n        this.value = createTxObj.value || '0x0'\r\n\r\n        if (createTxObj.input && createTxObj.data)\r\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\r\n\r\n        this.input = createTxObj.input || createTxObj.data\r\n\r\n        this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false\r\n        this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM\r\n\r\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get gasPrice() {\r\n        return this._gasPrice\r\n    }\r\n\r\n    set gasPrice(g) {\r\n        this._gasPrice = utils.numberToHex(g)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get to() {\r\n        return this._to\r\n    }\r\n\r\n    set to(address) {\r\n        if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`)\r\n        this._to = address.toLowerCase()\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n    set value(val) {\r\n        this._value = utils.numberToHex(val)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get input() {\r\n        return this._input\r\n    }\r\n\r\n    set input(input) {\r\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\r\n        this._input = utils.addHexPrefix(input)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get data() {\r\n        return this._input\r\n    }\r\n\r\n    set data(data) {\r\n        this._input = data\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    get humanReadable() {\r\n        return this._humanReadable\r\n    }\r\n\r\n    set humanReadable(hr) {\r\n        if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`)\r\n        this._humanReadable = hr\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get codeFormat() {\r\n        return this._codeFormat\r\n    }\r\n\r\n    set codeFormat(cf) {\r\n        this._codeFormat = getCodeFormatTag(cf)\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\r\n    getRLPEncoding() {\r\n        this.validateOptionalValues()\r\n        const signatures = this.signatures.map(sig => sig.encode())\r\n\r\n        return (\r\n            TX_TYPE_TAG.TxTypeSmartContractDeploy +\r\n            RLP.encode([\r\n                Bytes.fromNat(this.nonce),\r\n                Bytes.fromNat(this.gasPrice),\r\n                Bytes.fromNat(this.gas),\r\n                this.to.toLowerCase(),\r\n                Bytes.fromNat(this.value),\r\n                this.from.toLowerCase(),\r\n                this.input,\r\n                Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\r\n                Bytes.fromNat(this.codeFormat),\r\n                signatures,\r\n            ]).slice(2)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string to make the signature of this transaction.\r\n     * This method has to be overrided in classes which extends AbstractTransaction.\r\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n     *\r\n     * @example\r\n     * const result = tx.getCommonRLPEncodingForSignature()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string without signature.\r\n     */\r\n    getCommonRLPEncodingForSignature() {\r\n        this.validateOptionalValues()\r\n\r\n        return RLP.encode([\r\n            TX_TYPE_TAG.TxTypeSmartContractDeploy,\r\n            Bytes.fromNat(this.nonce),\r\n            Bytes.fromNat(this.gasPrice),\r\n            Bytes.fromNat(this.gas),\r\n            this.to.toLowerCase(),\r\n            Bytes.fromNat(this.value),\r\n            this.from.toLowerCase(),\r\n            this.input,\r\n            Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\r\n            Bytes.fromNat(this.codeFormat),\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\r\n    async fillTransaction() {\r\n        const [chainId, gasPrice, nonce] = await Promise.all([\r\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\r\n            isNot(this.gasPrice) ? this.suggestGasPrice() : this.gasPrice,\r\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\r\n        ])\r\n\r\n        this.chainId = chainId\r\n        this.gasPrice = gasPrice\r\n        this.nonce = nonce\r\n    }\r\n\r\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\r\n    validateOptionalValues() {\r\n        super.validateOptionalValues()\r\n        if (this.gasPrice === undefined)\r\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\r\n    }\r\n}\r\n\r\nmodule.exports = SmartContractDeploy\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}