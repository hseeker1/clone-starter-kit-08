{"ast":null,"code":"/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  kip13JsonInterface,\n  interfaceIds\n} = require('./kctHelper');\n\nconst {\n  isAddress\n} = require('../../caver-utils');\n/**\r\n * The KIP13 class allows you to easily check whether a SmartContract implements the KIP-13 standard.\r\n * It also provides the ability to query whether an interface id is implemented as a parameter.\r\n *\r\n * @class\r\n */\n\n\nclass KIP13 extends Contract {\n  /**\r\n   * Checks if the contract implements the KIP-13 standard.\r\n   *\r\n   * @example\r\n   * const isImplemented = await caver.kct.kip13.isImplementedKIP13Interface('0x{address in hex}')\r\n   *\r\n   * @param {string} contractAddress The address of the contract to check.\r\n   * @return {Promise<boolean>}\r\n   */\n  static async isImplementedKIP13Interface(contractAddress) {\n    const kip13 = new KIP13(contractAddress);\n    const isTrue = await kip13.sendQuery(interfaceIds.preCondition.true);\n    const isFalse = await kip13.sendQuery(interfaceIds.preCondition.false);\n    return isTrue && !isFalse;\n  }\n  /**\r\n   * KIP13 class represents the KIP-13 contract.\r\n   *\r\n   * @example\r\n   * const kip13 = new caver.kct.kip13('0x{address in hex}')\r\n   *\r\n   * @constructor\r\n   * @param {string} [contractAddress] - The smart contract address.\r\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-13.\r\n   */\n\n\n  constructor(contractAddress) {\n    let abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip13JsonInterface;\n\n    if (contractAddress) {\n      if (_.isString(contractAddress)) {\n        if (!isAddress(contractAddress)) throw new Error(`Invalid contract address ${contractAddress}`);\n      } else {\n        abi = contractAddress;\n        contractAddress = undefined;\n      }\n    }\n\n    super(abi, contractAddress);\n  }\n  /**\r\n   * Sends query to check whether the interface is supported or not.\r\n   * Using `supportsInterface` method supported in the each KCT class is recommended to use instead of the `kip13.sendQuery`.\r\n   *\r\n   * @example\r\n   * const isImplemented = await kip13.sendQuery('0x{interface id}')\r\n   *\r\n   * @param {string} interfaceId The interface id to check.\r\n   * @return {Promise<boolean>}\r\n   */\n\n\n  async sendQuery(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n\n}\n\nmodule.exports = KIP13;","map":{"version":3,"names":["_","require","Contract","kip13JsonInterface","interfaceIds","isAddress","KIP13","isImplementedKIP13Interface","contractAddress","kip13","isTrue","sendQuery","preCondition","true","isFalse","false","constructor","abi","isString","Error","undefined","interfaceId","supported","methods","supportsInterface","call","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-kct/src/kip13.js"],"sourcesContent":["/*\r\n    Copyright 2021 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\n\r\nconst Contract = require('../../caver-contract')\r\nconst { kip13JsonInterface, interfaceIds } = require('./kctHelper')\r\nconst { isAddress } = require('../../caver-utils')\r\n\r\n/**\r\n * The KIP13 class allows you to easily check whether a SmartContract implements the KIP-13 standard.\r\n * It also provides the ability to query whether an interface id is implemented as a parameter.\r\n *\r\n * @class\r\n */\r\nclass KIP13 extends Contract {\r\n    /**\r\n     * Checks if the contract implements the KIP-13 standard.\r\n     *\r\n     * @example\r\n     * const isImplemented = await caver.kct.kip13.isImplementedKIP13Interface('0x{address in hex}')\r\n     *\r\n     * @param {string} contractAddress The address of the contract to check.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    static async isImplementedKIP13Interface(contractAddress) {\r\n        const kip13 = new KIP13(contractAddress)\r\n        const isTrue = await kip13.sendQuery(interfaceIds.preCondition.true)\r\n        const isFalse = await kip13.sendQuery(interfaceIds.preCondition.false)\r\n        return isTrue && !isFalse\r\n    }\r\n\r\n    /**\r\n     * KIP13 class represents the KIP-13 contract.\r\n     *\r\n     * @example\r\n     * const kip13 = new caver.kct.kip13('0x{address in hex}')\r\n     *\r\n     * @constructor\r\n     * @param {string} [contractAddress] - The smart contract address.\r\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-13.\r\n     */\r\n    constructor(contractAddress, abi = kip13JsonInterface) {\r\n        if (contractAddress) {\r\n            if (_.isString(contractAddress)) {\r\n                if (!isAddress(contractAddress)) throw new Error(`Invalid contract address ${contractAddress}`)\r\n            } else {\r\n                abi = contractAddress\r\n                contractAddress = undefined\r\n            }\r\n        }\r\n\r\n        super(abi, contractAddress)\r\n    }\r\n\r\n    /**\r\n     * Sends query to check whether the interface is supported or not.\r\n     * Using `supportsInterface` method supported in the each KCT class is recommended to use instead of the `kip13.sendQuery`.\r\n     *\r\n     * @example\r\n     * const isImplemented = await kip13.sendQuery('0x{interface id}')\r\n     *\r\n     * @param {string} interfaceId The interface id to check.\r\n     * @return {Promise<boolean>}\r\n     */\r\n    async sendQuery(interfaceId) {\r\n        const supported = await this.methods.supportsInterface(interfaceId).call()\r\n        return supported\r\n    }\r\n}\r\n\r\nmodule.exports = KIP13\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAM;EAAEE,kBAAF;EAAsBC;AAAtB,IAAuCH,OAAO,CAAC,aAAD,CAApD;;AACA,MAAM;EAAEI;AAAF,IAAgBJ,OAAO,CAAC,mBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,KAAN,SAAoBJ,QAApB,CAA6B;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAC4C,aAA3BK,2BAA2B,CAACC,eAAD,EAAkB;IACtD,MAAMC,KAAK,GAAG,IAAIH,KAAJ,CAAUE,eAAV,CAAd;IACA,MAAME,MAAM,GAAG,MAAMD,KAAK,CAACE,SAAN,CAAgBP,YAAY,CAACQ,YAAb,CAA0BC,IAA1C,CAArB;IACA,MAAMC,OAAO,GAAG,MAAML,KAAK,CAACE,SAAN,CAAgBP,YAAY,CAACQ,YAAb,CAA0BG,KAA1C,CAAtB;IACA,OAAOL,MAAM,IAAI,CAACI,OAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,WAAW,CAACR,eAAD,EAA4C;IAAA,IAA1BS,GAA0B,uEAApBd,kBAAoB;;IACnD,IAAIK,eAAJ,EAAqB;MACjB,IAAIR,CAAC,CAACkB,QAAF,CAAWV,eAAX,CAAJ,EAAiC;QAC7B,IAAI,CAACH,SAAS,CAACG,eAAD,CAAd,EAAiC,MAAM,IAAIW,KAAJ,CAAW,4BAA2BX,eAAgB,EAAtD,CAAN;MACpC,CAFD,MAEO;QACHS,GAAG,GAAGT,eAAN;QACAA,eAAe,GAAGY,SAAlB;MACH;IACJ;;IAED,MAAMH,GAAN,EAAWT,eAAX;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAATG,SAAS,CAACU,WAAD,EAAc;IACzB,MAAMC,SAAS,GAAG,MAAM,KAAKC,OAAL,CAAaC,iBAAb,CAA+BH,WAA/B,EAA4CI,IAA5C,EAAxB;IACA,OAAOH,SAAP;EACH;;AArDwB;;AAwD7BI,MAAM,CAACC,OAAP,GAAiBrB,KAAjB"},"metadata":{},"sourceType":"script"}