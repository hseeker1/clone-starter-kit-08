{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n\nvar proto = protons(require('./dag.proto'));\n\nvar DAGLink = require('./dag-link/dagLink');\n\nvar DAGNode = require('./dag-node/dagNode');\n\nvar _require = require('./serialize'),\n    serializeDAGNodeLike = _require.serializeDAGNodeLike;\n\nvar genCid = require('./genCid');\n\nexports = module.exports;\nexports.codec = genCid.codec;\nexports.defaultHashAlg = genCid.defaultHashAlg;\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\n\nvar cid = function cid(binaryBlob, userOptions) {\n  return genCid.cid(binaryBlob, userOptions);\n};\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\n\n\nvar serialize = function serialize(node) {\n  if (DAGNode.isDAGNode(node)) {\n    return node.serialize();\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n/**\r\n * Deserialize PB block into the internal representation.\r\n *\r\n * @param {Uint8Array} buffer - Binary representation of a PB block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\n\n\nvar deserialize = function deserialize(buffer) {\n  var pbn = proto.PBNode.decode(buffer);\n  var links = pbn.Links.map(function (link) {\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  var data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\n\nexports.serialize = serialize;\nexports.deserialize = deserialize;\nexports.cid = cid;","map":{"version":3,"names":["protons","require","proto","DAGLink","DAGNode","serializeDAGNodeLike","genCid","exports","module","codec","defaultHashAlg","cid","binaryBlob","userOptions","serialize","node","isDAGNode","Data","Links","deserialize","buffer","pbn","PBNode","decode","links","map","link","Name","Tsize","Hash","data","Uint8Array","byteLength"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/src/util.js"],"sourcesContent":["'use strict'\r\n\r\nconst protons = require('protons')\r\nconst proto = protons(require('./dag.proto'))\r\nconst DAGLink = require('./dag-link/dagLink')\r\nconst DAGNode = require('./dag-node/dagNode')\r\nconst { serializeDAGNodeLike } = require('./serialize')\r\nconst genCid = require('./genCid')\r\n\r\nexports = module.exports\r\n\r\nexports.codec = genCid.codec\r\nexports.defaultHashAlg = genCid.defaultHashAlg\r\n\r\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\r\nconst cid = (binaryBlob, userOptions) => {\r\n  return genCid.cid(binaryBlob, userOptions)\r\n}\r\n\r\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\r\nconst serialize = (node) => {\r\n  if (DAGNode.isDAGNode(node)) {\r\n    return node.serialize()\r\n  } else {\r\n    return serializeDAGNodeLike(node.Data, node.Links)\r\n  }\r\n}\r\n\r\n/**\r\n * Deserialize PB block into the internal representation.\r\n *\r\n * @param {Uint8Array} buffer - Binary representation of a PB block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\r\nconst deserialize = (buffer) => {\r\n  const pbn = proto.PBNode.decode(buffer)\r\n\r\n  const links = pbn.Links.map((link) => {\r\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\r\n  })\r\n\r\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data\r\n\r\n  return new DAGNode(data, links, buffer.byteLength)\r\n}\r\n\r\nexports.serialize = serialize\r\nexports.deserialize = deserialize\r\nexports.cid = cid\r\n"],"mappings":"AAAA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAACC,OAAO,CAAC,aAAD,CAAR,CAArB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAAvB;;AACA,eAAiCA,OAAO,CAAC,aAAD,CAAxC;AAAA,IAAQI,oBAAR,YAAQA,oBAAR;;AACA,IAAMC,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AAEAM,OAAO,GAAGC,MAAM,CAACD,OAAjB;AAEAA,OAAO,CAACE,KAAR,GAAgBH,MAAM,CAACG,KAAvB;AACAF,OAAO,CAACG,cAAR,GAAyBJ,MAAM,CAACI,cAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,UAAD,EAAaC,WAAb,EAA6B;EACvC,OAAOP,MAAM,CAACK,GAAP,CAAWC,UAAX,EAAuBC,WAAvB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;EAC1B,IAAIX,OAAO,CAACY,SAAR,CAAkBD,IAAlB,CAAJ,EAA6B;IAC3B,OAAOA,IAAI,CAACD,SAAL,EAAP;EACD,CAFD,MAEO;IACL,OAAOT,oBAAoB,CAACU,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,KAAjB,CAA3B;EACD;AACF,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;EAC9B,IAAMC,GAAG,GAAGnB,KAAK,CAACoB,MAAN,CAAaC,MAAb,CAAoBH,MAApB,CAAZ;EAEA,IAAMI,KAAK,GAAGH,GAAG,CAACH,KAAJ,CAAUO,GAAV,CAAc,UAACC,IAAD,EAAU;IACpC,OAAO,IAAIvB,OAAJ,CAAYuB,IAAI,CAACC,IAAjB,EAAuBD,IAAI,CAACE,KAA5B,EAAmCF,IAAI,CAACG,IAAxC,CAAP;EACD,CAFa,CAAd;EAIA,IAAMC,IAAI,GAAGT,GAAG,CAACJ,IAAJ,IAAY,IAAZ,GAAmB,IAAIc,UAAJ,CAAe,CAAf,CAAnB,GAAuCV,GAAG,CAACJ,IAAxD;EAEA,OAAO,IAAIb,OAAJ,CAAY0B,IAAZ,EAAkBN,KAAlB,EAAyBJ,MAAM,CAACY,UAAhC,CAAP;AACD,CAVD;;AAYAzB,OAAO,CAACO,SAAR,GAAoBA,SAApB;AACAP,OAAO,CAACY,WAAR,GAAsBA,WAAtB;AACAZ,OAAO,CAACI,GAAR,GAAcA,GAAd"},"metadata":{},"sourceType":"script"}