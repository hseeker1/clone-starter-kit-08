{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\r\n * Representing an AccountKeyPublic.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar AccountKeyPublic = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Creates an instance of AccountKeyPublic.\r\n   * @param {string} publicKey - a public key\r\n   */\n  function AccountKeyPublic(publicKey) {\n    _classCallCheck(this, AccountKeyPublic);\n\n    this.publicKey = publicKey;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(AccountKeyPublic, [{\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n    /**\r\n     * Returns an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyPublic.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n    }\n    /**\r\n     * Returns the x and y coordinates of publicKey.\r\n     *\r\n     * @example\r\n     * const xyPoint = accountKeyPublic.getXYPoint()\r\n     *\r\n     * @return {Array.<string>}\r\n     */\n\n  }, {\n    key: \"getXYPoint\",\n    value: function getXYPoint() {\n      return utils.xyPointFromPublicKey(this.publicKey);\n    }\n  }], [{\n    key: \"decode\",\n    value:\n    /**\r\n     * Decodes an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\r\n     * @return {AccountKeyPublic}\r\n     */\n    function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) throw new Error(\"Cannot decode to AccountKeyPublic. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG, \": \").concat(rlpEncodedKey));\n      var publicKey = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)));\n      return new AccountKeyPublic(publicKey);\n    }\n    /**\r\n     * Creates AccountKeyPublic instance from x, y point\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const [ x, y ] = caver.utils.xyPointFromPublicKey(pubKey)\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromXYPoint(x, y)\r\n     *\r\n     * @param {string} x - The x point.\r\n     * @param {string} y - The y point.\r\n     * @return {AccountKeyPublic}\r\n     */\n\n  }, {\n    key: \"fromXYPoint\",\n    value: function fromXYPoint(x, y) {\n      var xPoint = utils.leftPad(utils.stripHexPrefix(x), 64);\n      var yPoint = utils.leftPad(utils.stripHexPrefix(y), 64);\n      var pubKey = \"0x\".concat(xPoint + yPoint);\n      return new AccountKeyPublic(pubKey);\n    }\n    /**\r\n     * Creates AccountKeyPublic instance from public key string\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromPublicKey(pubKey)\r\n     *\r\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\r\n     * @return {AccountKeyPublic}\r\n     */\n\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(pubKey) {\n      return new AccountKeyPublic(pubKey);\n    }\n  }]);\n\n  return AccountKeyPublic;\n}();\n\nmodule.exports = AccountKeyPublic;","map":{"version":3,"names":["RLP","require","utils","ACCOUNT_KEY_TAG","AccountKeyPublic","publicKey","_publicKey","p","isValidPublicKey","Error","addHexPrefix","compressedPublicKey","compressPublicKey","ACCOUNT_KEY_PUBLIC_TAG","encode","slice","xyPointFromPublicKey","rlpEncodedKey","startsWith","decode","length","x","y","xPoint","leftPad","stripHexPrefix","yPoint","pubKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyPublic.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\n\r\n/**\r\n * Representing an AccountKeyPublic.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyPublic {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG))\r\n            throw new Error(\r\n                `Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`\r\n            )\r\n\r\n        const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`)\r\n        return new AccountKeyPublic(publicKey)\r\n    }\r\n\r\n    /**\r\n     * Creates AccountKeyPublic instance from x, y point\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const [ x, y ] = caver.utils.xyPointFromPublicKey(pubKey)\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromXYPoint(x, y)\r\n     *\r\n     * @param {string} x - The x point.\r\n     * @param {string} y - The y point.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static fromXYPoint(x, y) {\r\n        const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64)\r\n        const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64)\r\n        const pubKey = `0x${xPoint + yPoint}`\r\n        return new AccountKeyPublic(pubKey)\r\n    }\r\n\r\n    /**\r\n     * Creates AccountKeyPublic instance from public key string\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromPublicKey(pubKey)\r\n     *\r\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static fromPublicKey(pubKey) {\r\n        return new AccountKeyPublic(pubKey)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AccountKeyPublic.\r\n     * @param {string} publicKey - a public key\r\n     */\r\n    constructor(publicKey) {\r\n        this.publicKey = publicKey\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get publicKey() {\r\n        return this._publicKey\r\n    }\r\n\r\n    set publicKey(p) {\r\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\r\n        this._publicKey = utils.addHexPrefix(p)\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyPublic.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncoding() {\r\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\r\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\r\n    }\r\n\r\n    /**\r\n     * Returns the x and y coordinates of publicKey.\r\n     *\r\n     * @example\r\n     * const xyPoint = accountKeyPublic.getXYPoint()\r\n     *\r\n     * @return {Array.<string>}\r\n     */\r\n    getXYPoint() {\r\n        return utils.xyPointFromPublicKey(this.publicKey)\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyPublic\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,eAA4BA,OAAO,CAAC,oBAAD,CAAnC;AAAA,IAAQE,eAAR,YAAQA,eAAR;AAEA;AACA;AACA;AACA;AACA;;;IACMC,gB;;;EAsDF;AACJ;AACA;AACA;EACI,0BAAYC,SAAZ,EAAuB;IAAA;;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;EACH;EAED;AACJ;AACA;;;;;SACI,eAAgB;MACZ,OAAO,KAAKC,UAAZ;IACH,C;SAED,aAAcC,CAAd,EAAiB;MACb,IAAI,CAACL,KAAK,CAACM,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIE,KAAJ,+BAAiCF,CAAjC,EAAN;MAChC,KAAKD,UAAL,GAAkBJ,KAAK,CAACQ,YAAN,CAAmBH,CAAnB,CAAlB;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiB;MACb,IAAMI,mBAAmB,GAAGT,KAAK,CAACU,iBAAN,CAAwB,KAAKP,SAA7B,CAA5B;MACA,OAAOF,eAAe,CAACU,sBAAhB,GAAyCb,GAAG,CAACc,MAAJ,CAAWH,mBAAX,EAAgCI,KAAhC,CAAsC,CAAtC,CAAhD;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAa;MACT,OAAOb,KAAK,CAACc,oBAAN,CAA2B,KAAKX,SAAhC,CAAP;IACH;;;;IAhGD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,gBAAcY,aAAd,EAA6B;MACzBA,aAAa,GAAGf,KAAK,CAACQ,YAAN,CAAmBO,aAAnB,CAAhB;MACA,IAAI,CAACA,aAAa,CAACC,UAAd,CAAyBf,eAAe,CAACU,sBAAzC,CAAL,EACI,MAAM,IAAIJ,KAAJ,iEACuDN,eAAe,CAACU,sBADvE,eACkGI,aADlG,EAAN;MAIJ,IAAMZ,SAAS,GAAGL,GAAG,CAACmB,MAAJ,aAAgBF,aAAa,CAACF,KAAd,CAAoBZ,eAAe,CAACU,sBAAhB,CAAuCO,MAA3D,CAAhB,EAAlB;MACA,OAAO,IAAIhB,gBAAJ,CAAqBC,SAArB,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,qBAAmBgB,CAAnB,EAAsBC,CAAtB,EAAyB;MACrB,IAAMC,MAAM,GAAGrB,KAAK,CAACsB,OAAN,CAActB,KAAK,CAACuB,cAAN,CAAqBJ,CAArB,CAAd,EAAuC,EAAvC,CAAf;MACA,IAAMK,MAAM,GAAGxB,KAAK,CAACsB,OAAN,CAActB,KAAK,CAACuB,cAAN,CAAqBH,CAArB,CAAd,EAAuC,EAAvC,CAAf;MACA,IAAMK,MAAM,eAAQJ,MAAM,GAAGG,MAAjB,CAAZ;MACA,OAAO,IAAItB,gBAAJ,CAAqBuB,MAArB,CAAP;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAqBA,MAArB,EAA6B;MACzB,OAAO,IAAIvB,gBAAJ,CAAqBuB,MAArB,CAAP;IACH;;;;;;AAgDLC,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB"},"metadata":{},"sourceType":"script"}