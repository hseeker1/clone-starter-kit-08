{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _require = require('multiformats/basics'),\n    bases = _require.bases;\n/**\r\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\r\n */\n\n/**\r\n * @param {string} name\r\n * @param {string} prefix\r\n * @param {(buf: Uint8Array) => string} encode\r\n * @param {(str: string) => Uint8Array} decode\r\n * @returns {MultibaseCodec}\r\n */\n\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name: name,\n    prefix: prefix,\n    encoder: {\n      name: name,\n      prefix: prefix,\n      encode: encode\n    },\n    decoder: {\n      decode: decode\n    }\n  };\n}\n\nvar string = createCodec('utf8', 'u', function (buf) {\n  var decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, function (str) {\n  var encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nvar ascii = createCodec('ascii', 'a', function (buf) {\n  var string = 'a';\n\n  for (var i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n\n  return string;\n}, function (str) {\n  str = str.substring(1);\n  var buf = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n});\n/**\r\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\r\n */\n\n/**\r\n * @type {Record<SupportedEncodings, MultibaseCodec>}\r\n */\n\nvar BASES = _objectSpread({\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii\n}, bases);\n\nmodule.exports = BASES;","map":{"version":3,"names":["require","bases","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","Uint8Array","charCodeAt","BASES","base16","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/uint8arrays/util/bases.js"],"sourcesContent":["  'use strict'\r\n\r\nconst { bases } = require('multiformats/basics')\r\n\r\n/**\r\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\r\n */\r\n\r\n/**\r\n * @param {string} name\r\n * @param {string} prefix\r\n * @param {(buf: Uint8Array) => string} encode\r\n * @param {(str: string) => Uint8Array} decode\r\n * @returns {MultibaseCodec}\r\n */\r\nfunction createCodec (name, prefix, encode, decode) {\r\n  return {\r\n    name,\r\n    prefix,\r\n    encoder: {\r\n      name,\r\n      prefix,\r\n      encode\r\n    },\r\n    decoder: {\r\n      decode\r\n    }\r\n  }\r\n}\r\n\r\nconst string = createCodec('utf8', 'u', (buf) => {\r\n  const decoder = new TextDecoder('utf8')\r\n  return 'u' + decoder.decode(buf)\r\n}, (str) => {\r\n  const encoder = new TextEncoder()\r\n  return encoder.encode(str.substring(1))\r\n})\r\n\r\nconst ascii = createCodec('ascii', 'a', (buf) => {\r\n  let string = 'a'\r\n\r\n  for (let i = 0; i < buf.length; i++) {\r\n    string += String.fromCharCode(buf[i])\r\n  }\r\n  return string\r\n}, (str) => {\r\n  str = str.substring(1)\r\n  const buf = new Uint8Array(str.length)\r\n\r\n  for (let i = 0; i < str.length; i++) {\r\n    buf[i] = str.charCodeAt(i)\r\n  }\r\n\r\n  return buf\r\n})\r\n\r\n/**\r\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\r\n */\r\n\r\n/**\r\n * @type {Record<SupportedEncodings, MultibaseCodec>}\r\n */\r\nconst BASES = {\r\n  'utf8': string,\r\n  'utf-8': string,\r\n  'hex': bases.base16,\r\n  'latin1': ascii,\r\n  'ascii': ascii,\r\n  'binary': ascii,\r\n\r\n  ...bases\r\n}\r\n\r\nmodule.exports = BASES\r\n"],"mappings":"AAAE;;;;AAEF,eAAkBA,OAAO,CAAC,qBAAD,CAAzB;AAAA,IAAQC,KAAR,YAAQA,KAAR;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;EAClD,OAAO;IACLH,IAAI,EAAJA,IADK;IAELC,MAAM,EAANA,MAFK;IAGLG,OAAO,EAAE;MACPJ,IAAI,EAAJA,IADO;MAEPC,MAAM,EAANA,MAFO;MAGPC,MAAM,EAANA;IAHO,CAHJ;IAQLG,OAAO,EAAE;MACPF,MAAM,EAANA;IADO;EARJ,CAAP;AAYD;;AAED,IAAMG,MAAM,GAAGP,WAAW,CAAC,MAAD,EAAS,GAAT,EAAc,UAACQ,GAAD,EAAS;EAC/C,IAAMF,OAAO,GAAG,IAAIG,WAAJ,CAAgB,MAAhB,CAAhB;EACA,OAAO,MAAMH,OAAO,CAACF,MAAR,CAAeI,GAAf,CAAb;AACD,CAHyB,EAGvB,UAACE,GAAD,EAAS;EACV,IAAML,OAAO,GAAG,IAAIM,WAAJ,EAAhB;EACA,OAAON,OAAO,CAACF,MAAR,CAAeO,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAf,CAAP;AACD,CANyB,CAA1B;AAQA,IAAMC,KAAK,GAAGb,WAAW,CAAC,OAAD,EAAU,GAAV,EAAe,UAACQ,GAAD,EAAS;EAC/C,IAAID,MAAM,GAAG,GAAb;;EAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;IACnCP,MAAM,IAAIS,MAAM,CAACC,YAAP,CAAoBT,GAAG,CAACM,CAAD,CAAvB,CAAV;EACD;;EACD,OAAOP,MAAP;AACD,CAPwB,EAOtB,UAACG,GAAD,EAAS;EACVA,GAAG,GAAGA,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAN;EACA,IAAMJ,GAAG,GAAG,IAAIU,UAAJ,CAAeR,GAAG,CAACK,MAAnB,CAAZ;;EAEA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;IACnCN,GAAG,CAACM,CAAD,CAAH,GAASJ,GAAG,CAACS,UAAJ,CAAeL,CAAf,CAAT;EACD;;EAED,OAAON,GAAP;AACD,CAhBwB,CAAzB;AAkBA;AACA;AACA;;AAEA;AACA;AACA;;AACA,IAAMY,KAAK;EACT,QAAQb,MADC;EAET,SAASA,MAFA;EAGT,OAAOR,KAAK,CAACsB,MAHJ;EAIT,UAAUR,KAJD;EAKT,SAASA,KALA;EAMT,UAAUA;AAND,GAQNd,KARM,CAAX;;AAWAuB,MAAM,CAACC,OAAP,GAAiBH,KAAjB"},"metadata":{},"sourceType":"script"}