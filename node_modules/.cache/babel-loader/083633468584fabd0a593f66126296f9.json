{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\r\n    Copyright 2022 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG,\n    refineSignatures = _require.refineSignatures,\n    getTypeTagWithoutEthereumTxTypeEnvelopeTag = _require.getTypeTagWithoutEthereumTxTypeEnvelopeTag,\n    isNot = _require.isNot;\n\nvar utils = require('../../../../caver-utils/src');\n\nvar AccessList = require('../../utils/accessList');\n\nvar TransactionHasher = require('../../transactionHasher/transactionHasher');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeEthereumDynamicFee)) throw new Error(\"Cannot decode to EthereumDynamicFee. The prefix must be \".concat(TX_TYPE_TAG.TxTypeEthereumDynamicFee, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.replace(TX_TYPE_TAG.TxTypeEthereumDynamicFee, ''));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 12),\n      chainId = _RLP$decode2[0],\n      nonce = _RLP$decode2[1],\n      maxPriorityFeePerGas = _RLP$decode2[2],\n      maxFeePerGas = _RLP$decode2[3],\n      gas = _RLP$decode2[4],\n      to = _RLP$decode2[5],\n      value = _RLP$decode2[6],\n      input = _RLP$decode2[7],\n      encodedAccessList = _RLP$decode2[8],\n      v = _RLP$decode2[9],\n      r = _RLP$decode2[10],\n      s = _RLP$decode2[11];\n\n  return {\n    chainId: utils.trimLeadingZero(chainId),\n    nonce: utils.trimLeadingZero(nonce),\n    maxPriorityFeePerGas: utils.trimLeadingZero(maxPriorityFeePerGas),\n    maxFeePerGas: utils.trimLeadingZero(maxFeePerGas),\n    gas: utils.trimLeadingZero(gas),\n    to: to,\n    value: utils.trimLeadingZero(value),\n    input: input,\n    encodedAccessList: encodedAccessList,\n    signatures: [v, r, s]\n  };\n}\n/**\r\n * Represents a ethereum dynamic fee transaction.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\n\n\nvar EthereumDynamicFee = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(EthereumDynamicFee, _AbstractTransaction);\n\n  var _super = _createSuper(EthereumDynamicFee);\n\n  /**\r\n   * Creates a ethereum dynamic fee transaction.\r\n   * @constructor\r\n   * @param {object|string} createTxObj - The parameters to create a EthereumDynamicFee transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `maxPriorityFeePerGas`, `maxFeePerGas`, `accessList` and `chainId`.\r\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n   */\n  function EthereumDynamicFee(createTxObj, klaytnCall) {\n    var _this;\n\n    _classCallCheck(this, EthereumDynamicFee);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000';\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeEthereumDynamicFee, createTxObj, klaytnCall);\n    _this.to = createTxObj.to || '0x';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data || '0x';\n    _this.value = createTxObj.value || '0x0';\n    _this.accessList = createTxObj.accessList || [];\n    if (createTxObj.maxPriorityFeePerGas !== undefined) _this.maxPriorityFeePerGas = createTxObj.maxPriorityFeePerGas;\n    if (createTxObj.maxFeePerGas !== undefined) _this.maxFeePerGas = createTxObj.maxFeePerGas;\n    return _this;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  _createClass(EthereumDynamicFee, [{\n    key: \"to\",\n    get: function get() {\n      return this._to;\n    },\n    set: function set(address) {\n      if (address !== '0x' && !utils.isAddress(address)) throw new Error(\"Invalid address \".concat(address));\n      this._to = address.toLowerCase();\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = utils.numberToHex(val);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(data) {\n      this._input = data;\n    }\n    /**\r\n     * @type {AccessList}\r\n     */\n\n  }, {\n    key: \"accessList\",\n    get: function get() {\n      return this._accessList;\n    },\n    set: function set(list) {\n      if (!(list instanceof AccessList)) list = AccessList.create(list);\n      this._accessList = list;\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"maxPriorityFeePerGas\",\n    get: function get() {\n      return this._maxPriorityFeePerGas;\n    },\n    set: function set(mpf) {\n      this._maxPriorityFeePerGas = utils.numberToHex(mpf);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"maxFeePerGas\",\n    get: function get() {\n      return this._maxFeePerGas;\n    },\n    set: function set(mf) {\n      this._maxFeePerGas = utils.numberToHex(mf);\n    }\n    /**\r\n     * @type {SignatureData}\r\n     */\n\n  }, {\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    } // overrides signatures getter/setter to validate y-parity.\n    ,\n    set: function set(sigs) {\n      var refined = refineSignatures(sigs, this.type);\n\n      if (!utils.isEmptySig(refined)) {\n        var v = utils.hexToNumber(refined.v);\n\n        if (v !== 0 && v !== 1) {\n          throw new Error(\"Invalid signature: The y-parity of the transaction should either be 0 or 1.\");\n        }\n      }\n\n      this._signatures = refined;\n    }\n    /**\r\n     * Appends signatures array to transaction.\r\n     * EthereumDynamicFee transaction cannot have more than one signature, so an error will be occured if the transaction already has a signature or the `sig` parameter has more than one signatures.\r\n     *\r\n     * @example\r\n     * tx.appendSignatures([ '0x0fea', '0xade94...', '0x38160...' ])\r\n     *\r\n     * @override\r\n     * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - The `signatures` to be appended to the transaction. {@link SignatureData|SignatureData} instance or an array containing {@link SignatureData|SignatureData} instances.\r\n     *                                                                                                 An array in which each 'v', 'r', and 's' are sequentially defined as string formats or a 2D array containing those arrays can also be taken as parameters.\r\n     */\n\n  }, {\n    key: \"appendSignatures\",\n    value: function appendSignatures(sig) {\n      if (!utils.isEmptySig(this.signatures)) throw new Error(\"signatures already defined. \".concat(this.type, \" cannot include more than one signature. Please use tx.signatures = sigArr to replace.\"));\n\n      if (Array.isArray(sig[0])) {\n        if (sig.length > 1) throw new Error(\"signatures are too long. \".concat(this.type, \" cannot include more than one signature.\"));\n        sig = sig[0];\n      }\n\n      this.signatures = sig;\n    }\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     * This returns with `TxTypeEthereumDynamicFee` type prefix('0x7801').\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n\n      var _this$signatures$enco = this.signatures.encode(),\n          _this$signatures$enco2 = _slicedToArray(_this$signatures$enco, 3),\n          v = _this$signatures$enco2[0],\n          r = _this$signatures$enco2[1],\n          s = _this$signatures$enco2[2]; // TxTypeEthereumEnvelope(0x78) || 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, signatureYParity, signatureR, signatureS])\n\n\n      return TX_TYPE_TAG[this.type] + RLP.encode([Bytes.fromNat(this.chainId), Bytes.fromNat(this.nonce), Bytes.fromNat(this.maxPriorityFeePerGas), Bytes.fromNat(this.maxFeePerGas), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.accessList.encodeToBytes(), v, r, s]).slice(2);\n    }\n    /**\r\n     * Returns RLP-encoded string for making signature.\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncodingForSignature()\r\n     *\r\n     * @override\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getRLPEncodingForSignature\",\n    value: function getRLPEncodingForSignature() {\n      this.validateOptionalValues(); // sigRLP = 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList])\n\n      return getTypeTagWithoutEthereumTxTypeEnvelopeTag(this.type) + RLP.encode([Bytes.fromNat(this.chainId), Bytes.fromNat(this.nonce), Bytes.fromNat(this.maxPriorityFeePerGas), Bytes.fromNat(this.maxFeePerGas), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.accessList.encodeToBytes()]).slice(2);\n    }\n    /**\r\n     * EthereumDynamicFee does not have a common RLP encoding because no other type exists.\r\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      return this.getRLPEncodingForSignature();\n    }\n    /**\r\n     * Recovers the public key strings from `signatures` field in transaction object.\r\n     * If you want to derive an address from public key, please use {@link module:utils~publicKeyToAddress|caver.utils.publicKeyToAddress}.\r\n     *\r\n     * @example\r\n     * const publicKey = tx.recoverPublicKeys()\r\n     *\r\n     * @return {Array.<string>} An array containing public keys recovered from `signatures`.\r\n     */\n\n  }, {\n    key: \"recoverPublicKeys\",\n    value: function recoverPublicKeys() {\n      if (utils.isEmptySig(this.signatures)) throw new Error(\"Failed to recover public key from signatures: signatures is empty.\");\n      var recovery = Bytes.toNumber(this.signatures.v);\n      var signingDataHex = this.getRLPEncodingForSignature();\n      var hasedSigningData = Hash.keccak256(signingDataHex);\n      var publicKeys = [];\n      publicKeys.push(utils.recoverPublicKey(hasedSigningData, [utils.makeEven(utils.toHex(recovery)), this.signatures.r, this.signatures.s], true));\n      return publicKeys;\n    }\n    /**\r\n     * Signs the transaction as a transaction sender with the private key(s) in the `keyring` and appends `signatures` in the transaction object.\r\n     *\r\n     * If the user has not defined an `index`, `transaction.sign` signs the transaction using \"all the private keys\" used by the role.\r\n     * If `index` is defined, the `transaction.sign` signs the transaction using \"only one private key\" at the given index.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.create('0x{address in hex}', '0x{private key}')\r\n     * const signedTx = await tx.sign(keyring)\r\n     *\r\n     * const keyring = caver.wallet.keyring.create('0x{address in hex}', ['0x{private key}', '0x{private key}'])\r\n     * const signedTx = await tx.sign(keyring, 1) // sign the transaction with index. If omitted, sign with all private keys.\r\n     *\r\n     * @param {KeyringContainer.Keyring|string} key - A private key string ({@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} format is also allowed) or an instance of {@link KeyringContainer.Keyring|Keyring}. If a private key string or a KlaytnWalletKey is passed as a parameter, the keyring instance is created internally.\r\n     * @param {number} [index] - The index of the private key you want to use. The index must be less than the length of the array of the private keys defined for each role. If an index is not defined, this method will use all the private keys.\r\n     * @param {function} [hasher] - The hash function to get the hash of the transaction.\r\n     * @return {module:Transaction.Transaction} An instance of signed Transaction. The `signature` is appended to the `transaction.signatures`.\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, index) {\n        var hasher,\n            _yield$this$_sign,\n            keyring,\n            hash,\n            role,\n            sig,\n            _args = arguments;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                hasher = _args.length > 2 && _args[2] !== undefined ? _args[2] : TransactionHasher.getHashForSignature;\n\n                // User parameter input cases\n                // (key) / (key index) / (key hasher) / (key index hasher)\n                if (_.isFunction(index)) {\n                  hasher = index;\n                  index = undefined;\n                }\n\n                _context.next = 4;\n                return this._sign(key, hasher);\n\n              case 4:\n                _yield$this$_sign = _context.sent;\n                keyring = _yield$this$_sign.keyring;\n                hash = _yield$this$_sign.hash;\n                role = _yield$this$_sign.role;\n                sig = keyring.ecsign(hash, role, index);\n                this.appendSignatures(sig);\n                return _context.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sign(_x, _x2) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `maxPriorityFeePerGas`, `maxFeePerGas`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     * Also this uses {@link Klay#getHeaderByNumber|caver.rpc.klay.getHeaderByNumber} to get base fee per gas from the block header.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\n\n  }, {\n    key: \"fillTransaction\",\n    value: function () {\n      var _fillTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var isNotMaxPriorityFeePerGas, isNotMaxFeePerGas, _yield$Promise$all, _yield$Promise$all2, chainId, maxPriorityFeePerGas, nonce, maxFeePerGas;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isNotMaxPriorityFeePerGas = isNot(this.maxPriorityFeePerGas);\n                isNotMaxFeePerGas = isNot(this.maxFeePerGas);\n                _context2.next = 4;\n                return Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNotMaxPriorityFeePerGas ? this.getMaxPriorityFeePerGas() : this.maxPriorityFeePerGas, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce, isNotMaxFeePerGas ? this.suggestGasPrice() : this.maxFeePerGas]);\n\n              case 4:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 4);\n                chainId = _yield$Promise$all2[0];\n                maxPriorityFeePerGas = _yield$Promise$all2[1];\n                nonce = _yield$Promise$all2[2];\n                maxFeePerGas = _yield$Promise$all2[3];\n                this.chainId = chainId;\n                this.nonce = nonce;\n                this.maxPriorityFeePerGas = maxPriorityFeePerGas;\n                this.maxFeePerGas = maxFeePerGas;\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fillTransaction() {\n        return _fillTransaction.apply(this, arguments);\n      }\n\n      return fillTransaction;\n    }()\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"validateOptionalValues\",\n    value: function validateOptionalValues() {\n      _get(_getPrototypeOf(EthereumDynamicFee.prototype), \"validateOptionalValues\", this).call(this);\n\n      if (this.maxPriorityFeePerGas === undefined) throw new Error(\"maxPriorityFeePerGas is undefined. Define maxPriorityFeePerGas in transaction or use 'transaction.fillTransaction' to fill values.\");\n      if (this.maxFeePerGas === undefined) throw new Error(\"maxFeePerGas is undefined. Define maxFeePerGas in transaction or use 'transaction.fillTransaction' to fill values.\");\n      if (this.chainId === undefined) throw new Error(\"chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.\");\n    }\n    /**\r\n     * Returns a hash string of transaction.\r\n     *\r\n     * @example\r\n     * const result = tx.getTransactionHash()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTransactionHash\",\n    value: function getTransactionHash() {\n      var encoded = this.getRLPEncoding();\n      encoded = encoded.replace(TX_TYPE_TAG[this.type], getTypeTagWithoutEthereumTxTypeEnvelopeTag(this.type));\n      return Hash.keccak256(encoded);\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\r\n     * Creates a ethereum dynamic fee transaction.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.ethereumDynamicFee.create({ from: '0x{}', ... })\r\n     *\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a EthereumDynamicFee transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `maxPriorityFeePerGas`, `maxFeePerGas`, `accessList` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {EthereumDynamicFee}\r\n     */\n    function create(createTxObj, klaytnCall) {\n      return new EthereumDynamicFee(createTxObj, klaytnCall);\n    }\n    /**\r\n     * decodes the RLP-encoded string and returns an EthereumDynamicFee instance.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.ethereumDynamicFee.decode('0x{rlp encoded data}')\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded ethereum dynamic fee transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {EthereumDynamicFee}\r\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(rlpEncoded, klaytnCall) {\n      var decoded = _decode(rlpEncoded);\n\n      decoded.accessList = AccessList.decode(decoded.encodedAccessList);\n      return new EthereumDynamicFee(decoded, klaytnCall);\n    }\n  }]);\n\n  return EthereumDynamicFee;\n}(AbstractTransaction);\n\nmodule.exports = EthereumDynamicFee;","map":{"version":3,"names":["_","require","RLP","Bytes","Hash","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","refineSignatures","getTypeTagWithoutEthereumTxTypeEnvelopeTag","isNot","utils","AccessList","TransactionHasher","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeEthereumDynamicFee","Error","typeDettached","replace","decode","chainId","nonce","maxPriorityFeePerGas","maxFeePerGas","gas","to","value","input","encodedAccessList","v","r","s","trimLeadingZero","signatures","EthereumDynamicFee","createTxObj","klaytnCall","isString","from","data","accessList","undefined","_to","address","isAddress","toLowerCase","_value","val","numberToHex","_input","isHex","_accessList","list","create","_maxPriorityFeePerGas","mpf","_maxFeePerGas","mf","_signatures","sigs","refined","type","isEmptySig","hexToNumber","sig","Array","isArray","length","validateOptionalValues","encode","fromNat","encodeToBytes","slice","getRLPEncodingForSignature","recovery","toNumber","signingDataHex","hasedSigningData","keccak256","publicKeys","push","recoverPublicKey","makeEven","toHex","key","index","hasher","getHashForSignature","isFunction","_sign","keyring","hash","role","ecsign","appendSignatures","isNotMaxPriorityFeePerGas","isNotMaxFeePerGas","Promise","all","getChainId","getMaxPriorityFeePerGas","getNonce","suggestGasPrice","encoded","getRLPEncoding","decoded","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/ethereumTypedTransaction/ethereumDynamicFee.js"],"sourcesContent":["/*\r\n    Copyright 2022 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst Hash = require('eth-lib/lib/hash')\r\nconst AbstractTransaction = require('../abstractTransaction')\r\nconst {\r\n    TX_TYPE_STRING,\r\n    TX_TYPE_TAG,\r\n    refineSignatures,\r\n    getTypeTagWithoutEthereumTxTypeEnvelopeTag,\r\n    isNot,\r\n} = require('../../transactionHelper/transactionHelper')\r\nconst utils = require('../../../../caver-utils/src')\r\nconst AccessList = require('../../utils/accessList')\r\nconst TransactionHasher = require('../../transactionHasher/transactionHasher')\r\n\r\nfunction _decode(rlpEncoded) {\r\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\r\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeEthereumDynamicFee))\r\n        throw new Error(`Cannot decode to EthereumDynamicFee. The prefix must be ${TX_TYPE_TAG.TxTypeEthereumDynamicFee}: ${rlpEncoded}`)\r\n\r\n    const typeDettached = `0x${rlpEncoded.replace(TX_TYPE_TAG.TxTypeEthereumDynamicFee, '')}`\r\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, input, encodedAccessList, v, r, s] = RLP.decode(\r\n        typeDettached\r\n    )\r\n    return {\r\n        chainId: utils.trimLeadingZero(chainId),\r\n        nonce: utils.trimLeadingZero(nonce),\r\n        maxPriorityFeePerGas: utils.trimLeadingZero(maxPriorityFeePerGas),\r\n        maxFeePerGas: utils.trimLeadingZero(maxFeePerGas),\r\n        gas: utils.trimLeadingZero(gas),\r\n        to,\r\n        value: utils.trimLeadingZero(value),\r\n        input: input,\r\n        encodedAccessList,\r\n        signatures: [v, r, s],\r\n    }\r\n}\r\n/**\r\n * Represents a ethereum dynamic fee transaction.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractTransaction\r\n */\r\nclass EthereumDynamicFee extends AbstractTransaction {\r\n    /**\r\n     * Creates a ethereum dynamic fee transaction.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.ethereumDynamicFee.create({ from: '0x{}', ... })\r\n     *\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a EthereumDynamicFee transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `maxPriorityFeePerGas`, `maxFeePerGas`, `accessList` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {EthereumDynamicFee}\r\n     */\r\n    static create(createTxObj, klaytnCall) {\r\n        return new EthereumDynamicFee(createTxObj, klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * decodes the RLP-encoded string and returns an EthereumDynamicFee instance.\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.ethereumDynamicFee.decode('0x{rlp encoded data}')\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded ethereum dynamic fee transaction.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     * @return {EthereumDynamicFee}\r\n     */\r\n    static decode(rlpEncoded, klaytnCall) {\r\n        const decoded = _decode(rlpEncoded)\r\n        decoded.accessList = AccessList.decode(decoded.encodedAccessList)\r\n        return new EthereumDynamicFee(decoded, klaytnCall)\r\n    }\r\n\r\n    /**\r\n     * Creates a ethereum dynamic fee transaction.\r\n     * @constructor\r\n     * @param {object|string} createTxObj - The parameters to create a EthereumDynamicFee transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `maxPriorityFeePerGas`, `maxFeePerGas`, `accessList` and `chainId`.\r\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\r\n     */\r\n    constructor(createTxObj, klaytnCall) {\r\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\r\n\r\n        createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000'\r\n\r\n        super(TX_TYPE_STRING.TxTypeEthereumDynamicFee, createTxObj, klaytnCall)\r\n        this.to = createTxObj.to || '0x'\r\n\r\n        if (createTxObj.input && createTxObj.data)\r\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\r\n        this.input = createTxObj.input || createTxObj.data || '0x'\r\n\r\n        this.value = createTxObj.value || '0x0'\r\n\r\n        this.accessList = createTxObj.accessList || []\r\n\r\n        if (createTxObj.maxPriorityFeePerGas !== undefined) this.maxPriorityFeePerGas = createTxObj.maxPriorityFeePerGas\r\n        if (createTxObj.maxFeePerGas !== undefined) this.maxFeePerGas = createTxObj.maxFeePerGas\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get to() {\r\n        return this._to\r\n    }\r\n\r\n    set to(address) {\r\n        if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`)\r\n        this._to = address.toLowerCase()\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n    set value(val) {\r\n        this._value = utils.numberToHex(val)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get input() {\r\n        return this._input\r\n    }\r\n\r\n    set input(input) {\r\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\r\n        this._input = utils.addHexPrefix(input)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get data() {\r\n        return this._input\r\n    }\r\n\r\n    set data(data) {\r\n        this._input = data\r\n    }\r\n\r\n    /**\r\n     * @type {AccessList}\r\n     */\r\n    get accessList() {\r\n        return this._accessList\r\n    }\r\n\r\n    set accessList(list) {\r\n        if (!(list instanceof AccessList)) list = AccessList.create(list)\r\n        this._accessList = list\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get maxPriorityFeePerGas() {\r\n        return this._maxPriorityFeePerGas\r\n    }\r\n\r\n    set maxPriorityFeePerGas(mpf) {\r\n        this._maxPriorityFeePerGas = utils.numberToHex(mpf)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get maxFeePerGas() {\r\n        return this._maxFeePerGas\r\n    }\r\n\r\n    set maxFeePerGas(mf) {\r\n        this._maxFeePerGas = utils.numberToHex(mf)\r\n    }\r\n\r\n    /**\r\n     * @type {SignatureData}\r\n     */\r\n    get signatures() {\r\n        return this._signatures\r\n    }\r\n\r\n    // overrides signatures getter/setter to validate y-parity.\r\n    set signatures(sigs) {\r\n        const refined = refineSignatures(sigs, this.type)\r\n        if (!utils.isEmptySig(refined)) {\r\n            const v = utils.hexToNumber(refined.v)\r\n            if (v !== 0 && v !== 1) {\r\n                throw new Error(`Invalid signature: The y-parity of the transaction should either be 0 or 1.`)\r\n            }\r\n        }\r\n        this._signatures = refined\r\n    }\r\n\r\n    /**\r\n     * Appends signatures array to transaction.\r\n     * EthereumDynamicFee transaction cannot have more than one signature, so an error will be occured if the transaction already has a signature or the `sig` parameter has more than one signatures.\r\n     *\r\n     * @example\r\n     * tx.appendSignatures([ '0x0fea', '0xade94...', '0x38160...' ])\r\n     *\r\n     * @override\r\n     * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - The `signatures` to be appended to the transaction. {@link SignatureData|SignatureData} instance or an array containing {@link SignatureData|SignatureData} instances.\r\n     *                                                                                                 An array in which each 'v', 'r', and 's' are sequentially defined as string formats or a 2D array containing those arrays can also be taken as parameters.\r\n     */\r\n    appendSignatures(sig) {\r\n        if (!utils.isEmptySig(this.signatures))\r\n            throw new Error(\r\n                `signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`\r\n            )\r\n\r\n        if (Array.isArray(sig[0])) {\r\n            if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`)\r\n            sig = sig[0]\r\n        }\r\n\r\n        this.signatures = sig\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     * This returns with `TxTypeEthereumDynamicFee` type prefix('0x7801').\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\r\n    getRLPEncoding() {\r\n        this.validateOptionalValues()\r\n\r\n        const [v, r, s] = this.signatures.encode()\r\n        // TxTypeEthereumEnvelope(0x78) || 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, signatureYParity, signatureR, signatureS])\r\n        return (\r\n            TX_TYPE_TAG[this.type] +\r\n            RLP.encode([\r\n                Bytes.fromNat(this.chainId),\r\n                Bytes.fromNat(this.nonce),\r\n                Bytes.fromNat(this.maxPriorityFeePerGas),\r\n                Bytes.fromNat(this.maxFeePerGas),\r\n                Bytes.fromNat(this.gas),\r\n                this.to.toLowerCase(),\r\n                Bytes.fromNat(this.value),\r\n                this.input,\r\n                this.accessList.encodeToBytes(),\r\n                v,\r\n                r,\r\n                s,\r\n            ]).slice(2)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns RLP-encoded string for making signature.\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncodingForSignature()\r\n     *\r\n     * @override\r\n     * @return {string}\r\n     */\r\n    getRLPEncodingForSignature() {\r\n        this.validateOptionalValues()\r\n\r\n        // sigRLP = 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList])\r\n        return (\r\n            getTypeTagWithoutEthereumTxTypeEnvelopeTag(this.type) +\r\n            RLP.encode([\r\n                Bytes.fromNat(this.chainId),\r\n                Bytes.fromNat(this.nonce),\r\n                Bytes.fromNat(this.maxPriorityFeePerGas),\r\n                Bytes.fromNat(this.maxFeePerGas),\r\n                Bytes.fromNat(this.gas),\r\n                this.to.toLowerCase(),\r\n                Bytes.fromNat(this.value),\r\n                this.input,\r\n                this.accessList.encodeToBytes(),\r\n            ]).slice(2)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * EthereumDynamicFee does not have a common RLP encoding because no other type exists.\r\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\r\n     *\r\n     * @return {string}\r\n     */\r\n    getCommonRLPEncodingForSignature() {\r\n        return this.getRLPEncodingForSignature()\r\n    }\r\n\r\n    /**\r\n     * Recovers the public key strings from `signatures` field in transaction object.\r\n     * If you want to derive an address from public key, please use {@link module:utils~publicKeyToAddress|caver.utils.publicKeyToAddress}.\r\n     *\r\n     * @example\r\n     * const publicKey = tx.recoverPublicKeys()\r\n     *\r\n     * @return {Array.<string>} An array containing public keys recovered from `signatures`.\r\n     */\r\n    recoverPublicKeys() {\r\n        if (utils.isEmptySig(this.signatures)) throw new Error(`Failed to recover public key from signatures: signatures is empty.`)\r\n\r\n        const recovery = Bytes.toNumber(this.signatures.v)\r\n        const signingDataHex = this.getRLPEncodingForSignature()\r\n        const hasedSigningData = Hash.keccak256(signingDataHex)\r\n\r\n        const publicKeys = []\r\n        publicKeys.push(\r\n            utils.recoverPublicKey(hasedSigningData, [utils.makeEven(utils.toHex(recovery)), this.signatures.r, this.signatures.s], true)\r\n        )\r\n\r\n        return publicKeys\r\n    }\r\n\r\n    /**\r\n     * Signs the transaction as a transaction sender with the private key(s) in the `keyring` and appends `signatures` in the transaction object.\r\n     *\r\n     * If the user has not defined an `index`, `transaction.sign` signs the transaction using \"all the private keys\" used by the role.\r\n     * If `index` is defined, the `transaction.sign` signs the transaction using \"only one private key\" at the given index.\r\n     *\r\n     * @example\r\n     * const keyring = caver.wallet.keyring.create('0x{address in hex}', '0x{private key}')\r\n     * const signedTx = await tx.sign(keyring)\r\n     *\r\n     * const keyring = caver.wallet.keyring.create('0x{address in hex}', ['0x{private key}', '0x{private key}'])\r\n     * const signedTx = await tx.sign(keyring, 1) // sign the transaction with index. If omitted, sign with all private keys.\r\n     *\r\n     * @param {KeyringContainer.Keyring|string} key - A private key string ({@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} format is also allowed) or an instance of {@link KeyringContainer.Keyring|Keyring}. If a private key string or a KlaytnWalletKey is passed as a parameter, the keyring instance is created internally.\r\n     * @param {number} [index] - The index of the private key you want to use. The index must be less than the length of the array of the private keys defined for each role. If an index is not defined, this method will use all the private keys.\r\n     * @param {function} [hasher] - The hash function to get the hash of the transaction.\r\n     * @return {module:Transaction.Transaction} An instance of signed Transaction. The `signature` is appended to the `transaction.signatures`.\r\n     */\r\n    async sign(key, index, hasher = TransactionHasher.getHashForSignature) {\r\n        // User parameter input cases\r\n        // (key) / (key index) / (key hasher) / (key index hasher)\r\n        if (_.isFunction(index)) {\r\n            hasher = index\r\n            index = undefined\r\n        }\r\n\r\n        const { keyring, hash, role } = await this._sign(key, hasher)\r\n\r\n        const sig = keyring.ecsign(hash, role, index)\r\n\r\n        this.appendSignatures(sig)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Fills in the optional variables in transaction.\r\n     *\r\n     * If the `maxPriorityFeePerGas`, `maxFeePerGas`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\r\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\r\n     * Also this uses {@link Klay#getHeaderByNumber|caver.rpc.klay.getHeaderByNumber} to get base fee per gas from the block header.\r\n     *\r\n     * @example\r\n     * await tx.fillTransaction()\r\n     */\r\n    async fillTransaction() {\r\n        const isNotMaxPriorityFeePerGas = isNot(this.maxPriorityFeePerGas)\r\n        const isNotMaxFeePerGas = isNot(this.maxFeePerGas)\r\n        const [chainId, maxPriorityFeePerGas, nonce, maxFeePerGas] = await Promise.all([\r\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\r\n            isNotMaxPriorityFeePerGas ? this.getMaxPriorityFeePerGas() : this.maxPriorityFeePerGas,\r\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\r\n            isNotMaxFeePerGas ? this.suggestGasPrice() : this.maxFeePerGas,\r\n        ])\r\n\r\n        this.chainId = chainId\r\n        this.nonce = nonce\r\n        this.maxPriorityFeePerGas = maxPriorityFeePerGas\r\n        this.maxFeePerGas = maxFeePerGas\r\n    }\r\n\r\n    /**\r\n     * Checks that member variables that can be defined by the user are defined.\r\n     * If there is an undefined variable, an error occurs.\r\n     *\r\n     * @ignore\r\n     */\r\n    validateOptionalValues() {\r\n        super.validateOptionalValues()\r\n        if (this.maxPriorityFeePerGas === undefined)\r\n            throw new Error(\r\n                `maxPriorityFeePerGas is undefined. Define maxPriorityFeePerGas in transaction or use 'transaction.fillTransaction' to fill values.`\r\n            )\r\n        if (this.maxFeePerGas === undefined)\r\n            throw new Error(\r\n                `maxFeePerGas is undefined. Define maxFeePerGas in transaction or use 'transaction.fillTransaction' to fill values.`\r\n            )\r\n        if (this.chainId === undefined)\r\n            throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`)\r\n    }\r\n\r\n    /**\r\n     * Returns a hash string of transaction.\r\n     *\r\n     * @example\r\n     * const result = tx.getTransactionHash()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getTransactionHash() {\r\n        let encoded = this.getRLPEncoding()\r\n        encoded = encoded.replace(TX_TYPE_TAG[this.type], getTypeTagWithoutEthereumTxTypeEnvelopeTag(this.type))\r\n        return Hash.keccak256(encoded)\r\n    }\r\n}\r\n\r\nmodule.exports = EthereumDynamicFee\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}