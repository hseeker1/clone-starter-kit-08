{"ast":null,"code":"'use strict';\n\nconst {\n  encodeText\n} = require('./util');\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\r\n * Class to encode/decode in the supported Bases\r\n *\r\n */\n\n\nclass Base {\n  /**\r\n   * @param {BaseName} name\r\n   * @param {BaseCode} code\r\n   * @param {CodecFactory} factory\r\n   * @param {string} alphabet\r\n   */\n  constructor(name, code, factory, alphabet) {\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n  /**\r\n   * @param {Uint8Array} buf\r\n   * @returns {string}\r\n   */\n\n\n  encode(buf) {\n    return this.codec.encode(buf);\n  }\n  /**\r\n   * @param {string} string\r\n   * @returns {Uint8Array}\r\n   */\n\n\n  decode(string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`);\n      }\n    }\n\n    return this.codec.decode(string);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"names":["encodeText","require","Base","constructor","name","code","factory","alphabet","codeBuf","codec","encode","buf","decode","string","char","indexOf","Error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-raw/node_modules/multibase/src/base.js"],"sourcesContent":["'use strict'\r\n\r\nconst { encodeText } = require('./util')\r\n\r\n/** @typedef {import('./types').CodecFactory} CodecFactory */\r\n/** @typedef {import(\"./types\").BaseName} BaseName */\r\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\r\n\r\n/**\r\n * Class to encode/decode in the supported Bases\r\n *\r\n */\r\nclass Base {\r\n  /**\r\n   * @param {BaseName} name\r\n   * @param {BaseCode} code\r\n   * @param {CodecFactory} factory\r\n   * @param {string} alphabet\r\n   */\r\n  constructor (name, code, factory, alphabet) {\r\n    this.name = name\r\n    this.code = code\r\n    this.codeBuf = encodeText(this.code)\r\n    this.alphabet = alphabet\r\n    this.codec = factory(alphabet)\r\n  }\r\n\r\n  /**\r\n   * @param {Uint8Array} buf\r\n   * @returns {string}\r\n   */\r\n  encode (buf) {\r\n    return this.codec.encode(buf)\r\n  }\r\n\r\n  /**\r\n   * @param {string} string\r\n   * @returns {Uint8Array}\r\n   */\r\n  decode (string) {\r\n    for (const char of string) {\r\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\r\n        throw new Error(`invalid character '${char}' in '${string}'`)\r\n      }\r\n    }\r\n    return this.codec.decode(string)\r\n  }\r\n}\r\n\r\nmodule.exports = Base\r\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,QAAD,CAA9B;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;EACT;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,OAAd,EAAuBC,QAAvB,EAAiC;IAC1C,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKG,OAAL,GAAeR,UAAU,CAAC,KAAKK,IAAN,CAAzB;IACA,KAAKE,QAAL,GAAgBA,QAAhB;IACA,KAAKE,KAAL,GAAaH,OAAO,CAACC,QAAD,CAApB;EACD;EAED;AACF;AACA;AACA;;;EACEG,MAAM,CAAEC,GAAF,EAAO;IACX,OAAO,KAAKF,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,MAAM,CAAEC,MAAF,EAAU;IACd,KAAK,MAAMC,IAAX,IAAmBD,MAAnB,EAA2B;MACzB,IAAI,KAAKN,QAAL,IAAiB,KAAKA,QAAL,CAAcQ,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;QACpD,MAAM,IAAIE,KAAJ,CAAW,sBAAqBF,IAAK,SAAQD,MAAO,GAApD,CAAN;MACD;IACF;;IACD,OAAO,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAP;EACD;;AAlCQ;;AAqCXI,MAAM,CAACC,OAAP,GAAiBhB,IAAjB"},"metadata":{},"sourceType":"script"}