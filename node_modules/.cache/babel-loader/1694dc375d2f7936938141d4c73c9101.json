{"ast":null,"code":"var _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/* eslint-disable class-methods-use-this */\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar lodash = require('lodash');\n\nvar fs = require('fs');\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar multihash = require('multihashes');\n/**\r\n * Representing a class for uploading and loading files to IPFS.\r\n * @hideconstructor\r\n * @class\r\n */\n\n\nvar IPFS = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Create an IPFS instance.\r\n   * @param {string} [host] The IPFS Node url to connect with.\r\n   * @param {number} [port] The port number to use.\r\n   * @param {boolean} [ssl] With or without SSL. If true, the https protocol is used. Otherwise, the http protocol is used.\r\n   */\n  function IPFS(host, port, ssl) {\n    _classCallCheck(this, IPFS);\n\n    if (host !== undefined && port !== undefined && ssl !== undefined) {\n      this.setIPFSNode(host, port, ssl);\n    }\n  }\n  /**\r\n   * Initializes a connection with an IPFS Node.\r\n   * When an IPFS Node information is set through this function, you can upload files to IPFS or load files from IPFS.\r\n   *\r\n   * @example\r\n   * caver.ipfs.setIPFSNode('localhost', 5001, false)\r\n   *\r\n   * @param {string} host The IPFS Node url to connect with.\r\n   * @param {number} port The port number to use.\r\n   * @param {boolean} ssl With or without SSL. If true, the https protocol is used. Otherwise, the http protocol is used.\r\n   * @return {void}\r\n   */\n\n\n  _createClass(IPFS, [{\n    key: \"setIPFSNode\",\n    value: function setIPFSNode(host, port, ssl) {\n      var protocol = ssl ? 'https' : 'http';\n      this.ipfs = ipfsClient({\n        host: host,\n        port: port,\n        protocol: protocol\n      });\n    }\n    /**\r\n     * Adds a file to IPFS. The {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} of the uploaded file is returned.\r\n     * If the path of a file is passed, the contents of the file are loaded from the path and uploaded to IPFS. If a buffer is passed, it is uploaded to IPFS directly.\r\n     *\r\n     * If the `data` parameter is a `Buffer` or `ArrayBuffer`, upload to IPFS directly without using `fs`.\r\n     * If the `data` parameter is a string, use `fs` to read the file.\r\n     * Since `fs` is a module that can only be used on the server side, if it is client-side code,\r\n     * it must read the file in advance and pass the file contents in the format of `ArrayBuffer`.\r\n     *\r\n     * If you get a \"Error: Can't resolve 'fs'\" error when building your client code, add the following to your \"webpack.config.json\" file.\r\n     * ```\r\n     * module.exports = {\r\n     *     ...\r\n     *     node: {\r\n     *         fs: 'empty',\r\n     *     },\r\n     *     ...\r\n     * }\r\n     * ```\r\n     *\r\n     * If you use Next.js web framework(https://nextjs.org/), add the following to your \"next.config.json\" file.\r\n     * ```\r\n     * module.exports = {\r\n     *     ...\r\n     *     webpack: (config, { isServer }) => {\r\n     *         // Fixes npm packages that depend on `fs` module\r\n     *         if (!isServer) {\r\n     *             config.node = {\r\n     *                 fs: 'empty'\r\n     *             }\r\n     *         }\r\n     *         return config\r\n     *     },\r\n     *     ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @example\r\n     * const cid = await caver.ipfs.add('./test.txt')\r\n     * const cid = await caver.ipfs.add(Buffer.from('test data'))\r\n     *\r\n     * @param {string|Buffer|ArrayBuffer} data The file path string or file contents.\r\n     * @return {Promise<string>}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n        var ret;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.ipfs) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\");\n\n              case 2:\n                if (!lodash.isString(data)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                if (!(typeof window !== 'undefined')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Cannot use fs module: Please pass the file contents as a parameter of type Buffer or ArrayBuffer.\");\n\n              case 5:\n                data = fs.readFileSync(data);\n\n              case 6:\n                if (!(!lodash.isBuffer(data) && !lodash.isArrayBuffer(data))) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Invalid data: \".concat(data));\n\n              case 8:\n                _context.next = 10;\n                return this.ipfs.add(Buffer.from(data));\n\n              case 10:\n                ret = _context.sent;\n                return _context.abrupt(\"return\", ret.path);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\r\n     * Returns a file addressed by a valid IPFS path.\r\n     *\r\n     * @example\r\n     * const fileContents = await caver.ipfs.get('Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC')\r\n     *\r\n     * @param {string} hash An {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} of the file to download.\r\n     * @return {Promise<Buffer>}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hash) {\n        var ret;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.ipfs) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\");\n\n              case 2:\n                _context2.next = 4;\n                return this.ipfs.cat(hash);\n\n              case 4:\n                ret = _context2.sent;\n                _context2.next = 7;\n                return ret.next(0);\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent.value);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\r\n     * Converts a {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} to a {@link https://multiformats.io/multihash/|Multihash}.\r\n     *\r\n     * @example\r\n     * // This will return '0x1220dc1dbe0bcf1e5f6cce80bd3d7e7d873801c5a1732add889c0f25391d53470dc3'\r\n     * const multihash = caver.ipfs.toHex('Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC')\r\n     *\r\n     * @param {string} hash A {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} to convert.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(hash) {\n      var buf = multihash.fromB58String(hash);\n      return \"0x\".concat(multihash.toHexString(buf));\n    }\n    /**\r\n     * Converts to {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} from a {@link https://multiformats.io/multihash/|Multihash}.\r\n     *\r\n     * @example\r\n     * // This will return 'Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC'\r\n     * const multihash = caver.ipfs.fromHex('0x1220dc1dbe0bcf1e5f6cce80bd3d7e7d873801c5a1732add889c0f25391d53470dc3')\r\n     *\r\n     * @param {string} hash A {@link https://multiformats.io/multihash/|Multihash} to convert.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(contentHash) {\n      var hex = contentHash.substring(2);\n      var buf = multihash.fromHexString(hex);\n      return multihash.toB58String(buf);\n    }\n  }]);\n\n  return IPFS;\n}();\n\nmodule.exports = IPFS;","map":{"version":3,"names":["lodash","require","fs","ipfsClient","multihash","IPFS","host","port","ssl","undefined","setIPFSNode","protocol","ipfs","data","Error","isString","window","readFileSync","isBuffer","isArrayBuffer","add","Buffer","from","ret","path","hash","cat","next","value","buf","fromB58String","toHexString","contentHash","hex","substring","fromHexString","toB58String","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-ipfs/src/index.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\r\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst lodash = require('lodash')\r\nconst fs = require('fs')\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst multihash = require('multihashes')\r\n\r\n/**\r\n * Representing a class for uploading and loading files to IPFS.\r\n * @hideconstructor\r\n * @class\r\n */\r\nclass IPFS {\r\n    /**\r\n     * Create an IPFS instance.\r\n     * @param {string} [host] The IPFS Node url to connect with.\r\n     * @param {number} [port] The port number to use.\r\n     * @param {boolean} [ssl] With or without SSL. If true, the https protocol is used. Otherwise, the http protocol is used.\r\n     */\r\n    constructor(host, port, ssl) {\r\n        if (host !== undefined && port !== undefined && ssl !== undefined) {\r\n            this.setIPFSNode(host, port, ssl)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes a connection with an IPFS Node.\r\n     * When an IPFS Node information is set through this function, you can upload files to IPFS or load files from IPFS.\r\n     *\r\n     * @example\r\n     * caver.ipfs.setIPFSNode('localhost', 5001, false)\r\n     *\r\n     * @param {string} host The IPFS Node url to connect with.\r\n     * @param {number} port The port number to use.\r\n     * @param {boolean} ssl With or without SSL. If true, the https protocol is used. Otherwise, the http protocol is used.\r\n     * @return {void}\r\n     */\r\n    setIPFSNode(host, port, ssl) {\r\n        const protocol = ssl ? 'https' : 'http'\r\n        this.ipfs = ipfsClient({ host, port, protocol })\r\n    }\r\n\r\n    /**\r\n     * Adds a file to IPFS. The {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} of the uploaded file is returned.\r\n     * If the path of a file is passed, the contents of the file are loaded from the path and uploaded to IPFS. If a buffer is passed, it is uploaded to IPFS directly.\r\n     *\r\n     * If the `data` parameter is a `Buffer` or `ArrayBuffer`, upload to IPFS directly without using `fs`.\r\n     * If the `data` parameter is a string, use `fs` to read the file.\r\n     * Since `fs` is a module that can only be used on the server side, if it is client-side code,\r\n     * it must read the file in advance and pass the file contents in the format of `ArrayBuffer`.\r\n     *\r\n     * If you get a \"Error: Can't resolve 'fs'\" error when building your client code, add the following to your \"webpack.config.json\" file.\r\n     * ```\r\n     * module.exports = {\r\n     *     ...\r\n     *     node: {\r\n     *         fs: 'empty',\r\n     *     },\r\n     *     ...\r\n     * }\r\n     * ```\r\n     *\r\n     * If you use Next.js web framework(https://nextjs.org/), add the following to your \"next.config.json\" file.\r\n     * ```\r\n     * module.exports = {\r\n     *     ...\r\n     *     webpack: (config, { isServer }) => {\r\n     *         // Fixes npm packages that depend on `fs` module\r\n     *         if (!isServer) {\r\n     *             config.node = {\r\n     *                 fs: 'empty'\r\n     *             }\r\n     *         }\r\n     *         return config\r\n     *     },\r\n     *     ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @example\r\n     * const cid = await caver.ipfs.add('./test.txt')\r\n     * const cid = await caver.ipfs.add(Buffer.from('test data'))\r\n     *\r\n     * @param {string|Buffer|ArrayBuffer} data The file path string or file contents.\r\n     * @return {Promise<string>}\r\n     */\r\n    async add(data) {\r\n        if (!this.ipfs) throw new Error(`Please set IPFS Node through 'caver.ipfs.setIPFSNode'.`)\r\n\r\n        // Read file\r\n        if (lodash.isString(data)) {\r\n            if (typeof window !== 'undefined')\r\n                throw new Error(`Cannot use fs module: Please pass the file contents as a parameter of type Buffer or ArrayBuffer.`)\r\n            data = fs.readFileSync(data)\r\n        }\r\n        if (!lodash.isBuffer(data) && !lodash.isArrayBuffer(data)) throw new Error(`Invalid data: ${data}`)\r\n\r\n        const ret = await this.ipfs.add(Buffer.from(data))\r\n        return ret.path\r\n    }\r\n\r\n    /**\r\n     * Returns a file addressed by a valid IPFS path.\r\n     *\r\n     * @example\r\n     * const fileContents = await caver.ipfs.get('Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC')\r\n     *\r\n     * @param {string} hash An {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} of the file to download.\r\n     * @return {Promise<Buffer>}\r\n     */\r\n    async get(hash) {\r\n        if (!this.ipfs) throw new Error(`Please set IPFS Node through 'caver.ipfs.setIPFSNode'.`)\r\n\r\n        const ret = await this.ipfs.cat(hash)\r\n\r\n        return (await ret.next(0)).value\r\n    }\r\n\r\n    /**\r\n     * Converts a {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} to a {@link https://multiformats.io/multihash/|Multihash}.\r\n     *\r\n     * @example\r\n     * // This will return '0x1220dc1dbe0bcf1e5f6cce80bd3d7e7d873801c5a1732add889c0f25391d53470dc3'\r\n     * const multihash = caver.ipfs.toHex('Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC')\r\n     *\r\n     * @param {string} hash A {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} to convert.\r\n     * @return {string}\r\n     */\r\n    toHex(hash) {\r\n        const buf = multihash.fromB58String(hash)\r\n        return `0x${multihash.toHexString(buf)}`\r\n    }\r\n\r\n    /**\r\n     * Converts to {@link https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids|CID(Content Identifier)} from a {@link https://multiformats.io/multihash/|Multihash}.\r\n     *\r\n     * @example\r\n     * // This will return 'Qmd9thymMS6mejhEDZfwXPowSDunzgma9ex4ezpCSRZGwC'\r\n     * const multihash = caver.ipfs.fromHex('0x1220dc1dbe0bcf1e5f6cce80bd3d7e7d873801c5a1732add889c0f25391d53470dc3')\r\n     *\r\n     * @param {string} hash A {@link https://multiformats.io/multihash/|Multihash} to convert.\r\n     * @return {string}\r\n     */\r\n    fromHex(contentHash) {\r\n        const hex = contentHash.substring(2)\r\n        const buf = multihash.fromHexString(hex)\r\n        return multihash.toB58String(buf)\r\n    }\r\n}\r\n\r\nmodule.exports = IPFS\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}