{"ast":null,"code":"/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nconst AccountKeyPublic = require('./accountKeyPublic');\n\nconst AccountKeyMultiSig = require('./accountKeyMultiSig');\n\nconst utils = require('../../../../caver-utils');\n\nclass AccountKeyRoleBased {\n  constructor() {\n    let keyObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys;\n    if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object');\n    validateKeyObject(keyObj);\n    this._transactionKey = makeAccountKey(keyObj.transactionKey);\n    this._updateKey = makeAccountKey(keyObj.updateKey);\n    this._feePayerKey = makeAccountKey(keyObj.feePayerKey);\n    this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED;\n  }\n\n  get defaultKey() {\n    const definedKey = this._transactionKey ? this._transactionKey : this._updateKey ? this._updateKey : this._feePayerKey ? this._feePayerKey : undefined;\n    if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.');\n    return definedKey.defaultKey;\n  }\n\n  get keys() {\n    const keys = {};\n    if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys;\n    if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys;\n    if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys;\n    return keys;\n  }\n\n  get transactionKey() {\n    if (!this._transactionKey) return undefined;\n    return this._transactionKey.keys;\n  }\n\n  get updateKey() {\n    if (!this._updateKey) return undefined;\n    return this._updateKey.keys;\n  }\n\n  get feePayerKey() {\n    if (!this._feePayerKey) return undefined;\n    return this._feePayerKey.keys;\n  }\n\n  toPublicKey(toPublicKeyFunc) {\n    const returnObject = {};\n    if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc);\n    if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc);\n    if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc);\n    return returnObject;\n  }\n\n  update(keys) {\n    // In the case of AccountKeyRoleBased, the key that does not update is not defined.\n    // To handle this case, when updating, only update the key for the defined role.\n    if (keys._transactionKey) this._transactionKey = keys._transactionKey;\n    if (keys._updateKey) this._updateKey = keys._updateKey;\n    if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey;\n  }\n\n}\n\nfunction makeAccountKey(key) {\n  if (key === undefined) return undefined;\n  if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key);\n  if (typeof key !== 'string') throw new Error('Invalid account key type');\n  return new AccountKeyPublic(key);\n}\n\nfunction validateKeyObject(keyObject) {\n  const key = Object.keys(keyObject);\n  if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object');\n  key.map(role => {\n    if (!utils.isValidRole(role)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid role is defined : ${role}`);\n\n    if (Array.isArray(keyObject[role])) {\n      for (let p of keyObject[role]) {\n        const parsed = utils.parsePrivateKey(p);\n        p = parsed.privateKey;\n        if (!utils.isValidPrivateKey(p)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${p}`);\n      }\n    } else if (!utils.isValidPrivateKey(keyObject[role])) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${keyObject[role]}`);\n  });\n}\n\nmodule.exports = AccountKeyRoleBased;","map":{"version":3,"names":["AccountKeyEnum","require","AccountKeyPublic","AccountKeyMultiSig","utils","AccountKeyRoleBased","constructor","keyObj","keys","Error","validateKeyObject","_transactionKey","makeAccountKey","transactionKey","_updateKey","updateKey","_feePayerKey","feePayerKey","type","ACCOUNT_KEY_ROLEBASED","defaultKey","definedKey","undefined","toPublicKey","toPublicKeyFunc","returnObject","update","key","Array","isArray","keyObject","Object","length","map","role","isValidRole","p","parsed","parsePrivateKey","privateKey","isValidPrivateKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/accountKey/accountKeyRoleBased.js"],"sourcesContent":["/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum\r\nconst AccountKeyPublic = require('./accountKeyPublic')\r\nconst AccountKeyMultiSig = require('./accountKeyMultiSig')\r\nconst utils = require('../../../../caver-utils')\r\n\r\nclass AccountKeyRoleBased {\r\n    constructor(keyObj = {}) {\r\n        if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys\r\n\r\n        if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object')\r\n\r\n        validateKeyObject(keyObj)\r\n\r\n        this._transactionKey = makeAccountKey(keyObj.transactionKey)\r\n        this._updateKey = makeAccountKey(keyObj.updateKey)\r\n        this._feePayerKey = makeAccountKey(keyObj.feePayerKey)\r\n        this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED\r\n    }\r\n\r\n    get defaultKey() {\r\n        const definedKey = this._transactionKey\r\n            ? this._transactionKey\r\n            : this._updateKey\r\n            ? this._updateKey\r\n            : this._feePayerKey\r\n            ? this._feePayerKey\r\n            : undefined\r\n\r\n        if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.')\r\n\r\n        return definedKey.defaultKey\r\n    }\r\n\r\n    get keys() {\r\n        const keys = {}\r\n\r\n        if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys\r\n        if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys\r\n        if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys\r\n\r\n        return keys\r\n    }\r\n\r\n    get transactionKey() {\r\n        if (!this._transactionKey) return undefined\r\n        return this._transactionKey.keys\r\n    }\r\n\r\n    get updateKey() {\r\n        if (!this._updateKey) return undefined\r\n        return this._updateKey.keys\r\n    }\r\n\r\n    get feePayerKey() {\r\n        if (!this._feePayerKey) return undefined\r\n        return this._feePayerKey.keys\r\n    }\r\n\r\n    toPublicKey(toPublicKeyFunc) {\r\n        const returnObject = {}\r\n\r\n        if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc)\r\n        if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc)\r\n        if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc)\r\n\r\n        return returnObject\r\n    }\r\n\r\n    update(keys) {\r\n        // In the case of AccountKeyRoleBased, the key that does not update is not defined.\r\n        // To handle this case, when updating, only update the key for the defined role.\r\n        if (keys._transactionKey) this._transactionKey = keys._transactionKey\r\n        if (keys._updateKey) this._updateKey = keys._updateKey\r\n        if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey\r\n    }\r\n}\r\n\r\nfunction makeAccountKey(key) {\r\n    if (key === undefined) return undefined\r\n    if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key)\r\n    if (typeof key !== 'string') throw new Error('Invalid account key type')\r\n\r\n    return new AccountKeyPublic(key)\r\n}\r\n\r\nfunction validateKeyObject(keyObject) {\r\n    const key = Object.keys(keyObject)\r\n    if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object')\r\n\r\n    key.map(role => {\r\n        if (!utils.isValidRole(role)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid role is defined : ${role}`)\r\n\r\n        if (Array.isArray(keyObject[role])) {\r\n            for (let p of keyObject[role]) {\r\n                const parsed = utils.parsePrivateKey(p)\r\n                p = parsed.privateKey\r\n                if (!utils.isValidPrivateKey(p)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${p}`)\r\n            }\r\n        } else if (!utils.isValidPrivateKey(keyObject[role]))\r\n            throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${keyObject[role]}`)\r\n    })\r\n}\r\n\r\nmodule.exports = AccountKeyRoleBased\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,cAAnD;;AACA,MAAME,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,yBAAD,CAArB;;AAEA,MAAMI,mBAAN,CAA0B;EACtBC,WAAW,GAAc;IAAA,IAAbC,MAAa,uEAAJ,EAAI;IACrB,IAAIA,MAAM,YAAYF,mBAAtB,EAA2CE,MAAM,GAAGA,MAAM,CAACC,IAAhB;IAE3C,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;IAEhCC,iBAAiB,CAACH,MAAD,CAAjB;IAEA,KAAKI,eAAL,GAAuBC,cAAc,CAACL,MAAM,CAACM,cAAR,CAArC;IACA,KAAKC,UAAL,GAAkBF,cAAc,CAACL,MAAM,CAACQ,SAAR,CAAhC;IACA,KAAKC,YAAL,GAAoBJ,cAAc,CAACL,MAAM,CAACU,WAAR,CAAlC;IACA,KAAKC,IAAL,GAAYlB,cAAc,CAACmB,qBAA3B;EACH;;EAEa,IAAVC,UAAU,GAAG;IACb,MAAMC,UAAU,GAAG,KAAKV,eAAL,GACb,KAAKA,eADQ,GAEb,KAAKG,UAAL,GACA,KAAKA,UADL,GAEA,KAAKE,YAAL,GACA,KAAKA,YADL,GAEAM,SANN;IAQA,IAAI,CAACD,UAAL,EAAiB,MAAM,IAAIZ,KAAJ,CAAU,iDAAV,CAAN;IAEjB,OAAOY,UAAU,CAACD,UAAlB;EACH;;EAEO,IAAJZ,IAAI,GAAG;IACP,MAAMA,IAAI,GAAG,EAAb;IAEA,IAAI,KAAKG,eAAL,KAAyBW,SAA7B,EAAwCd,IAAI,CAACK,cAAL,GAAsB,KAAKF,eAAL,CAAqBH,IAA3C;IACxC,IAAI,KAAKM,UAAL,KAAoBQ,SAAxB,EAAmCd,IAAI,CAACO,SAAL,GAAiB,KAAKD,UAAL,CAAgBN,IAAjC;IACnC,IAAI,KAAKQ,YAAL,KAAsBM,SAA1B,EAAqCd,IAAI,CAACS,WAAL,GAAmB,KAAKD,YAAL,CAAkBR,IAArC;IAErC,OAAOA,IAAP;EACH;;EAEiB,IAAdK,cAAc,GAAG;IACjB,IAAI,CAAC,KAAKF,eAAV,EAA2B,OAAOW,SAAP;IAC3B,OAAO,KAAKX,eAAL,CAAqBH,IAA5B;EACH;;EAEY,IAATO,SAAS,GAAG;IACZ,IAAI,CAAC,KAAKD,UAAV,EAAsB,OAAOQ,SAAP;IACtB,OAAO,KAAKR,UAAL,CAAgBN,IAAvB;EACH;;EAEc,IAAXS,WAAW,GAAG;IACd,IAAI,CAAC,KAAKD,YAAV,EAAwB,OAAOM,SAAP;IACxB,OAAO,KAAKN,YAAL,CAAkBR,IAAzB;EACH;;EAEDe,WAAW,CAACC,eAAD,EAAkB;IACzB,MAAMC,YAAY,GAAG,EAArB;IAEA,IAAI,KAAKd,eAAL,KAAyBW,SAA7B,EAAwCG,YAAY,CAACZ,cAAb,GAA8B,KAAKF,eAAL,CAAqBY,WAArB,CAAiCC,eAAjC,CAA9B;IACxC,IAAI,KAAKV,UAAL,KAAoBQ,SAAxB,EAAmCG,YAAY,CAACV,SAAb,GAAyB,KAAKD,UAAL,CAAgBS,WAAhB,CAA4BC,eAA5B,CAAzB;IACnC,IAAI,KAAKR,YAAL,KAAsBM,SAA1B,EAAqCG,YAAY,CAACR,WAAb,GAA2B,KAAKD,YAAL,CAAkBO,WAAlB,CAA8BC,eAA9B,CAA3B;IAErC,OAAOC,YAAP;EACH;;EAEDC,MAAM,CAAClB,IAAD,EAAO;IACT;IACA;IACA,IAAIA,IAAI,CAACG,eAAT,EAA0B,KAAKA,eAAL,GAAuBH,IAAI,CAACG,eAA5B;IAC1B,IAAIH,IAAI,CAACM,UAAT,EAAqB,KAAKA,UAAL,GAAkBN,IAAI,CAACM,UAAvB;IACrB,IAAIN,IAAI,CAACQ,YAAT,EAAuB,KAAKA,YAAL,GAAoBR,IAAI,CAACQ,YAAzB;EAC1B;;AArEqB;;AAwE1B,SAASJ,cAAT,CAAwBe,GAAxB,EAA6B;EACzB,IAAIA,GAAG,KAAKL,SAAZ,EAAuB,OAAOA,SAAP;EACvB,IAAIM,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,YAAYxB,kBAAzC,EAA6D,OAAO,IAAIA,kBAAJ,CAAuBwB,GAAvB,CAAP;EAC7D,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,MAAM,IAAIlB,KAAJ,CAAU,0BAAV,CAAN;EAE7B,OAAO,IAAIP,gBAAJ,CAAqByB,GAArB,CAAP;AACH;;AAED,SAASjB,iBAAT,CAA2BoB,SAA3B,EAAsC;EAClC,MAAMH,GAAG,GAAGI,MAAM,CAACvB,IAAP,CAAYsB,SAAZ,CAAZ;EACA,IAAIH,GAAG,CAACK,MAAJ,KAAe,CAAnB,EAAsB,MAAM,IAAIvB,KAAJ,CAAU,oDAAV,CAAN;EAEtBkB,GAAG,CAACM,GAAJ,CAAQC,IAAI,IAAI;IACZ,IAAI,CAAC9B,KAAK,CAAC+B,WAAN,CAAkBD,IAAlB,CAAL,EAA8B,MAAM,IAAIzB,KAAJ,CAAW,mEAAkEyB,IAAK,EAAlF,CAAN;;IAE9B,IAAIN,KAAK,CAACC,OAAN,CAAcC,SAAS,CAACI,IAAD,CAAvB,CAAJ,EAAoC;MAChC,KAAK,IAAIE,CAAT,IAAcN,SAAS,CAACI,IAAD,CAAvB,EAA+B;QAC3B,MAAMG,MAAM,GAAGjC,KAAK,CAACkC,eAAN,CAAsBF,CAAtB,CAAf;QACAA,CAAC,GAAGC,MAAM,CAACE,UAAX;QACA,IAAI,CAACnC,KAAK,CAACoC,iBAAN,CAAwBJ,CAAxB,CAAL,EAAiC,MAAM,IAAI3B,KAAJ,CAAW,+DAA8D2B,CAAE,EAA3E,CAAN;MACpC;IACJ,CAND,MAMO,IAAI,CAAChC,KAAK,CAACoC,iBAAN,CAAwBV,SAAS,CAACI,IAAD,CAAjC,CAAL,EACH,MAAM,IAAIzB,KAAJ,CAAW,+DAA8DqB,SAAS,CAACI,IAAD,CAAO,EAAzF,CAAN;EACP,CAXD;AAYH;;AAEDO,MAAM,CAACC,OAAP,GAAiBrC,mBAAjB"},"metadata":{},"sourceType":"script"}