{"ast":null,"code":"/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst isValidRole = require('../../../../caver-utils').isValidRole;\n\nconst isValidPublicKey = require('../../../../caver-utils').isValidPublicKey;\n\nclass AccountForUpdate {\n  constructor(address, keyForUpdate, options) {\n    this.address = address;\n    this.keyForUpdate = keyFormatter(keyForUpdate, options);\n  }\n\n  fillUpdateObject(updateObject) {\n    delete updateObject.key;\n    Object.assign(updateObject, this.keyForUpdate);\n  }\n\n}\n\nfunction keyFormatter(keyForUpdate, options) {\n  const keyObject = {};\n\n  if (typeof keyForUpdate === 'string') {\n    if (options) throw new Error('Failed to keyFormatter for AccountForUpdate: AccountKeyPublic/legacyKey/failKey cannot have options');\n\n    switch (keyForUpdate) {\n      case 'legacyKey':\n        keyObject.legacyKey = true;\n        break;\n\n      case 'failKey':\n        keyObject.failKey = true;\n        break;\n\n      default:\n        if (!isValidPublicKey(keyForUpdate)) throw new Error('Invalid public key');\n        keyObject.publicKey = keyForUpdate;\n        break;\n    }\n  } else if (Array.isArray(keyForUpdate)) {\n    if (!options || !options.threshold || !options.weight) throw new Error('For AccountKeyMultiSig, threshold and weight should be defined in options object.');\n    if (!Array.isArray(options.weight)) throw new Error('The weight should be defined as a array.');\n    if (options.weight.length !== keyForUpdate.length) throw new Error('The length of keys in AccountKeyMultiSig and the length of weight array do not match.');\n    keyObject.multisig = {\n      threshold: options.threshold,\n      keys: []\n    };\n    let weightSum = 0;\n\n    for (let i = 0; i < keyForUpdate.length; i++) {\n      const key = keyForUpdate[i];\n      if (!isValidPublicKey(key)) throw new Error('Invalid public key');\n      keyObject.multisig.keys.push({\n        weight: options.weight[i],\n        publicKey: key\n      });\n      weightSum += options.weight[i];\n    }\n\n    if (weightSum < options.threshold) throw new Error('Invalid options for AccountKeyMultiSig: The sum of weights is less than the threshold.');\n  } else {\n    for (const key in keyForUpdate) {\n      if (!isValidRole(key)) throw new Error(`Invalid role is defined: ${key}`);\n      options = options || {};\n\n      if (key === 'transactionKey') {\n        keyObject.roleTransactionKey = keyFormatter(keyForUpdate[key], options.transactionKey);\n      }\n\n      if (key === 'updateKey') {\n        keyObject.roleAccountUpdateKey = keyFormatter(keyForUpdate[key], options.updateKey);\n      }\n\n      if (key === 'feePayerKey') {\n        keyObject.roleFeePayerKey = keyFormatter(keyForUpdate[key], options.feePayerKey);\n      }\n    }\n  }\n\n  return keyObject;\n}\n\nmodule.exports = AccountForUpdate;","map":{"version":3,"names":["isValidRole","require","isValidPublicKey","AccountForUpdate","constructor","address","keyForUpdate","options","keyFormatter","fillUpdateObject","updateObject","key","Object","assign","keyObject","Error","legacyKey","failKey","publicKey","Array","isArray","threshold","weight","length","multisig","keys","weightSum","i","push","roleTransactionKey","transactionKey","roleAccountUpdateKey","updateKey","roleFeePayerKey","feePayerKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/account/accountForUpdate.js"],"sourcesContent":["/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst isValidRole = require('../../../../caver-utils').isValidRole\r\nconst isValidPublicKey = require('../../../../caver-utils').isValidPublicKey\r\n\r\nclass AccountForUpdate {\r\n    constructor(address, keyForUpdate, options) {\r\n        this.address = address\r\n        this.keyForUpdate = keyFormatter(keyForUpdate, options)\r\n    }\r\n\r\n    fillUpdateObject(updateObject) {\r\n        delete updateObject.key\r\n        Object.assign(updateObject, this.keyForUpdate)\r\n    }\r\n}\r\n\r\nfunction keyFormatter(keyForUpdate, options) {\r\n    const keyObject = {}\r\n\r\n    if (typeof keyForUpdate === 'string') {\r\n        if (options) throw new Error('Failed to keyFormatter for AccountForUpdate: AccountKeyPublic/legacyKey/failKey cannot have options')\r\n        switch (keyForUpdate) {\r\n            case 'legacyKey':\r\n                keyObject.legacyKey = true\r\n                break\r\n            case 'failKey':\r\n                keyObject.failKey = true\r\n                break\r\n            default:\r\n                if (!isValidPublicKey(keyForUpdate)) throw new Error('Invalid public key')\r\n                keyObject.publicKey = keyForUpdate\r\n                break\r\n        }\r\n    } else if (Array.isArray(keyForUpdate)) {\r\n        if (!options || !options.threshold || !options.weight)\r\n            throw new Error('For AccountKeyMultiSig, threshold and weight should be defined in options object.')\r\n        if (!Array.isArray(options.weight)) throw new Error('The weight should be defined as a array.')\r\n        if (options.weight.length !== keyForUpdate.length)\r\n            throw new Error('The length of keys in AccountKeyMultiSig and the length of weight array do not match.')\r\n\r\n        keyObject.multisig = {\r\n            threshold: options.threshold,\r\n            keys: [],\r\n        }\r\n\r\n        let weightSum = 0\r\n\r\n        for (let i = 0; i < keyForUpdate.length; i++) {\r\n            const key = keyForUpdate[i]\r\n            if (!isValidPublicKey(key)) throw new Error('Invalid public key')\r\n            keyObject.multisig.keys.push({\r\n                weight: options.weight[i],\r\n                publicKey: key,\r\n            })\r\n            weightSum += options.weight[i]\r\n        }\r\n\r\n        if (weightSum < options.threshold)\r\n            throw new Error('Invalid options for AccountKeyMultiSig: The sum of weights is less than the threshold.')\r\n    } else {\r\n        for (const key in keyForUpdate) {\r\n            if (!isValidRole(key)) throw new Error(`Invalid role is defined: ${key}`)\r\n            options = options || {}\r\n            if (key === 'transactionKey') {\r\n                keyObject.roleTransactionKey = keyFormatter(keyForUpdate[key], options.transactionKey)\r\n            }\r\n            if (key === 'updateKey') {\r\n                keyObject.roleAccountUpdateKey = keyFormatter(keyForUpdate[key], options.updateKey)\r\n            }\r\n            if (key === 'feePayerKey') {\r\n                keyObject.roleFeePayerKey = keyFormatter(keyForUpdate[key], options.feePayerKey)\r\n            }\r\n        }\r\n    }\r\n\r\n    return keyObject\r\n}\r\n\r\nmodule.exports = AccountForUpdate\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}