{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nvar MAX_MULTISIG_KEY_LENGTH = 10;\n\nvar AccountKeyMultiSig = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyMultiSig(keys) {\n    _classCallCheck(this, AccountKeyMultiSig);\n\n    if (keys instanceof AccountKeyMultiSig) keys = keys.keys;\n    if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.');\n    if (keys.length === 0) throw new Error('Empty array.');\n    if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(\"The maximum number of keys is \".concat(MAX_MULTISIG_KEY_LENGTH, \".\"));\n    if (isDuple(keys)) throw new Error('There is a duplicate key.');\n    this._keys = keys;\n    this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG;\n  }\n\n  _createClass(AccountKeyMultiSig, [{\n    key: \"defaultKey\",\n    get: function get() {\n      return this._keys[0];\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      var keys = [];\n\n      for (var i = 0; i < this._keys.length; i++) {\n        var key = this._keys[i];\n        keys.push(toPublicKeyFunc(key));\n      }\n\n      return keys;\n    }\n  }, {\n    key: \"update\",\n    value: function update(keys) {\n      this._keys = keys.keys;\n    }\n  }]);\n\n  return AccountKeyMultiSig;\n}();\n\nfunction isDuple(keys) {\n  var map = new Map();\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (map.get(key) !== undefined) return true;\n      map.set(key, true);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n\nmodule.exports = AccountKeyMultiSig;","map":{"version":3,"names":["AccountKeyEnum","require","MAX_MULTISIG_KEY_LENGTH","AccountKeyMultiSig","keys","Array","isArray","Error","length","isDuple","_keys","type","ACCOUNT_KEY_MULTISIG","toPublicKeyFunc","i","key","push","map","Map","get","undefined","set","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/accountKey/accountKeyMultiSig.js"],"sourcesContent":["/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum\r\n\r\nconst MAX_MULTISIG_KEY_LENGTH = 10\r\n\r\nclass AccountKeyMultiSig {\r\n    constructor(keys) {\r\n        if (keys instanceof AccountKeyMultiSig) keys = keys.keys\r\n\r\n        if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.')\r\n        if (keys.length === 0) throw new Error('Empty array.')\r\n        if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(`The maximum number of keys is ${MAX_MULTISIG_KEY_LENGTH}.`)\r\n        if (isDuple(keys)) throw new Error('There is a duplicate key.')\r\n\r\n        this._keys = keys\r\n        this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG\r\n    }\r\n\r\n    get defaultKey() {\r\n        return this._keys[0]\r\n    }\r\n\r\n    get keys() {\r\n        return this._keys\r\n    }\r\n\r\n    get transactionKey() {\r\n        return this._keys\r\n    }\r\n\r\n    get updateKey() {\r\n        return this._keys\r\n    }\r\n\r\n    get feePayerKey() {\r\n        return this._keys\r\n    }\r\n\r\n    toPublicKey(toPublicKeyFunc) {\r\n        const keys = []\r\n\r\n        for (let i = 0; i < this._keys.length; i++) {\r\n            const key = this._keys[i]\r\n            keys.push(toPublicKeyFunc(key))\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    update(keys) {\r\n        this._keys = keys.keys\r\n    }\r\n}\r\n\r\nfunction isDuple(keys) {\r\n    const map = new Map()\r\n    for (const key of keys) {\r\n        if (map.get(key) !== undefined) return true\r\n        map.set(key, true)\r\n    }\r\n    return false\r\n}\r\n\r\nmodule.exports = AccountKeyMultiSig\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,cAAnD;;AAEA,IAAME,uBAAuB,GAAG,EAAhC;;IAEMC,kB;;;EACF,4BAAYC,IAAZ,EAAkB;IAAA;;IACd,IAAIA,IAAI,YAAYD,kBAApB,EAAwCC,IAAI,GAAGA,IAAI,CAACA,IAAZ;IAExC,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B,MAAM,IAAIG,KAAJ,CAAU,4EAAV,CAAN;IAC1B,IAAIH,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB,MAAM,IAAID,KAAJ,CAAU,cAAV,CAAN;IACvB,IAAIH,IAAI,CAACI,MAAL,GAAcN,uBAAlB,EAA2C,MAAM,IAAIK,KAAJ,yCAA2CL,uBAA3C,OAAN;IAC3C,IAAIO,OAAO,CAACL,IAAD,CAAX,EAAmB,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;IAEnB,KAAKG,KAAL,GAAaN,IAAb;IACA,KAAKO,IAAL,GAAYX,cAAc,CAACY,oBAA3B;EACH;;;;SAED,eAAiB;MACb,OAAO,KAAKF,KAAL,CAAW,CAAX,CAAP;IACH;;;SAED,eAAW;MACP,OAAO,KAAKA,KAAZ;IACH;;;SAED,eAAqB;MACjB,OAAO,KAAKA,KAAZ;IACH;;;SAED,eAAgB;MACZ,OAAO,KAAKA,KAAZ;IACH;;;SAED,eAAkB;MACd,OAAO,KAAKA,KAAZ;IACH;;;WAED,qBAAYG,eAAZ,EAA6B;MACzB,IAAMT,IAAI,GAAG,EAAb;;MAEA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWF,MAA/B,EAAuCM,CAAC,EAAxC,EAA4C;QACxC,IAAMC,GAAG,GAAG,KAAKL,KAAL,CAAWI,CAAX,CAAZ;QACAV,IAAI,CAACY,IAAL,CAAUH,eAAe,CAACE,GAAD,CAAzB;MACH;;MAED,OAAOX,IAAP;IACH;;;WAED,gBAAOA,IAAP,EAAa;MACT,KAAKM,KAAL,GAAaN,IAAI,CAACA,IAAlB;IACH;;;;;;AAGL,SAASK,OAAT,CAAiBL,IAAjB,EAAuB;EACnB,IAAMa,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EADmB,2CAEDd,IAFC;EAAA;;EAAA;IAEnB,oDAAwB;MAAA,IAAbW,GAAa;MACpB,IAAIE,GAAG,CAACE,GAAJ,CAAQJ,GAAR,MAAiBK,SAArB,EAAgC,OAAO,IAAP;MAChCH,GAAG,CAACI,GAAJ,CAAQN,GAAR,EAAa,IAAb;IACH;EALkB;IAAA;EAAA;IAAA;EAAA;;EAMnB,OAAO,KAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB"},"metadata":{},"sourceType":"script"}