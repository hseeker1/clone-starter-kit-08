{"ast":null,"code":"/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\n\n/**\r\n * @file errors.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2017\r\n */\nvar hasErrorMessage = function hasErrorMessage(result) {\n  return !!result && !!result.error && !!result.error.message;\n};\n\nvar txErrorTable = {\n  '0x2': 'VM error occurs while running smart contract',\n  '0x3': 'max call depth exceeded',\n  '0x4': 'contract address collision',\n  '0x5': 'contract creation code storage out of gas',\n  '0x6': 'evm: max code size exceeded',\n  '0x7': 'out of gas',\n  '0x8': 'evm: write protection',\n  '0x9': 'evm: execution reverted',\n  '0xa': 'reached the opcode count limit',\n  '0xb': 'account already exists',\n  '0xc': 'not a program account (e.g., an account having code and storage)',\n  '0xd': 'Human-readable address is not supported now',\n  '0xe': 'fee ratio is out of range [1, 99]',\n  '0xf': 'AccountKeyFail is not updatable',\n  '0x10': 'different account key type',\n  '0x11': 'AccountKeyNil cannot be initialized to an account',\n  '0x12': 'public key is not on curve',\n  '0x13': 'key weight is zero',\n  '0x14': 'key is not serializable',\n  '0x15': 'duplicated key',\n  '0x16': 'weighted sum overflow',\n  '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n  '0x18': 'length is zero',\n  '0x19': 'length too long',\n  '0x1a': 'nested role-based key',\n  '0x1b': 'a legacy transaction must be with a legacy account key',\n  '0x1c': 'deprecated feature',\n  '0x1d': 'not supported',\n  '0x1e': 'smart contract code format is invalid'\n};\nmodule.exports = {\n  InvalidConnection: function InvalidConnection(host) {\n    return new Error(\"CONNECTION ERROR: Couldn't connect to node \".concat(host, \".\"));\n  },\n  RequestFailed: function RequestFailed(err) {\n    return new Error(\"Request failed: \".concat(err));\n  },\n  ConnectionTimeout: function ConnectionTimeout(ms) {\n    return new Error(\"CONNECTION TIMEOUT: timeout of \".concat(ms, \"ms achived\"));\n  },\n  ConnectionNotOpenError: function ConnectionNotOpenError(event) {\n    var error = new Error('connection not open on send()');\n\n    if (event) {\n      error.code = event.code;\n      error.reason = event.reason;\n    }\n\n    return error;\n  },\n  MaxAttemptsReachedOnReconnectingError: function MaxAttemptsReachedOnReconnectingError() {\n    return new Error('Maximum number of reconnect attempts reached!');\n  },\n  PendingRequestsOnReconnectingError: function PendingRequestsOnReconnectingError() {\n    return new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n  },\n  InvalidProvider: function InvalidProvider() {\n    return new Error('Provider not set or invalid');\n  },\n  InvalidNumberOfParams: function InvalidNumberOfParams(got, expected, method) {\n    return new Error(\"\\n    Invalid number of parameters for \\\"\".concat(method, \"\\\". Got \").concat(got, \" expected \").concat(expected, \"!\\n    \"));\n  },\n  ErrorResponse: function ErrorResponse(result) {\n    var message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result);\n    return new Error(\"Returned error: \".concat(message));\n  },\n  InvalidResponse: function InvalidResponse(result) {\n    if (result === null) return new Error('Invalid response: null');\n    var message = hasErrorMessage(result) ? result.error.message : \"Invalid JSON RPC response: \".concat(JSON.stringify(result));\n    return new Error(message);\n  },\n  needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n  blockHashNull: new Error('blockHash null'),\n  contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n  receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n  transactionReverted: function transactionReverted(receiptJSON) {\n    return new Error(\"Transaction has been reverted by the EVM:\\n\".concat(receiptJSON));\n  },\n  transactionRanOutOfGas: function transactionRanOutOfGas(receiptJSON) {\n    return new Error(\"Transaction ran out of gas. Please provide more gas:\\n\".concat(receiptJSON));\n  },\n  invalidGasLimit: function invalidGasLimit() {\n    return new Error('Invalid gas limit. Please provide valid gas.');\n  },\n  invalidData: function invalidData() {\n    return new Error('Invalid data. Please provide valid hex-strict data.');\n  },\n  notAllowedZeroGas: function notAllowedZeroGas() {\n    return new Error(\"gas can't be 0. Please provide more gas.\");\n  },\n  txErrorTable: txErrorTable\n};","map":{"version":3,"names":["hasErrorMessage","result","error","message","txErrorTable","module","exports","InvalidConnection","host","Error","RequestFailed","err","ConnectionTimeout","ms","ConnectionNotOpenError","event","code","reason","MaxAttemptsReachedOnReconnectingError","PendingRequestsOnReconnectingError","InvalidProvider","InvalidNumberOfParams","got","expected","method","ErrorResponse","JSON","stringify","InvalidResponse","needNameCallPropertyToCreateMethod","blockHashNull","contractCouldntBeStored","receiptDidntContainContractAddress","transactionReverted","receiptJSON","transactionRanOutOfGas","invalidGasLimit","invalidData","notAllowedZeroGas"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-core-helpers/src/errors.js"],"sourcesContent":["/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\r\n/**\r\n * @file errors.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2017\r\n */\r\n\r\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message\r\n\r\nconst txErrorTable = {\r\n    '0x2': 'VM error occurs while running smart contract',\r\n    '0x3': 'max call depth exceeded',\r\n    '0x4': 'contract address collision',\r\n    '0x5': 'contract creation code storage out of gas',\r\n    '0x6': 'evm: max code size exceeded',\r\n    '0x7': 'out of gas',\r\n    '0x8': 'evm: write protection',\r\n    '0x9': 'evm: execution reverted',\r\n    '0xa': 'reached the opcode count limit',\r\n    '0xb': 'account already exists',\r\n    '0xc': 'not a program account (e.g., an account having code and storage)',\r\n    '0xd': 'Human-readable address is not supported now',\r\n    '0xe': 'fee ratio is out of range [1, 99]',\r\n    '0xf': 'AccountKeyFail is not updatable',\r\n    '0x10': 'different account key type',\r\n    '0x11': 'AccountKeyNil cannot be initialized to an account',\r\n    '0x12': 'public key is not on curve',\r\n    '0x13': 'key weight is zero',\r\n    '0x14': 'key is not serializable',\r\n    '0x15': 'duplicated key',\r\n    '0x16': 'weighted sum overflow',\r\n    '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\r\n    '0x18': 'length is zero',\r\n    '0x19': 'length too long',\r\n    '0x1a': 'nested role-based key',\r\n    '0x1b': 'a legacy transaction must be with a legacy account key',\r\n    '0x1c': 'deprecated feature',\r\n    '0x1d': 'not supported',\r\n    '0x1e': 'smart contract code format is invalid',\r\n}\r\n\r\nmodule.exports = {\r\n    InvalidConnection: host => new Error(`CONNECTION ERROR: Couldn't connect to node ${host}.`),\r\n    RequestFailed: err => new Error(`Request failed: ${err}`),\r\n    ConnectionTimeout: ms => new Error(`CONNECTION TIMEOUT: timeout of ${ms}ms achived`),\r\n    ConnectionNotOpenError: event => {\r\n        const error = new Error('connection not open on send()')\r\n        if (event) {\r\n            error.code = event.code\r\n            error.reason = event.reason\r\n        }\r\n\r\n        return error\r\n    },\r\n    MaxAttemptsReachedOnReconnectingError: () => new Error('Maximum number of reconnect attempts reached!'),\r\n    PendingRequestsOnReconnectingError: () =>\r\n        new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!'),\r\n    InvalidProvider: () => new Error('Provider not set or invalid'),\r\n    InvalidNumberOfParams: (got, expected, method) =>\r\n        new Error(`\r\n    Invalid number of parameters for \"${method}\". Got ${got} expected ${expected}!\r\n    `),\r\n    ErrorResponse: result => {\r\n        const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result)\r\n        return new Error(`Returned error: ${message}`)\r\n    },\r\n    InvalidResponse: result => {\r\n        if (result === null) return new Error('Invalid response: null')\r\n        const message = hasErrorMessage(result) ? result.error.message : `Invalid JSON RPC response: ${JSON.stringify(result)}`\r\n        return new Error(message)\r\n    },\r\n    needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\r\n    blockHashNull: new Error('blockHash null'),\r\n    contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\r\n    receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\r\n    transactionReverted: receiptJSON => new Error(`Transaction has been reverted by the EVM:\\n${receiptJSON}`),\r\n    transactionRanOutOfGas: receiptJSON => new Error(`Transaction ran out of gas. Please provide more gas:\\n${receiptJSON}`),\r\n    invalidGasLimit: () => new Error('Invalid gas limit. Please provide valid gas.'),\r\n    invalidData: () => new Error('Invalid data. Please provide valid hex-strict data.'),\r\n    notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\"),\r\n    txErrorTable,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}