{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar errCode = require('err-code');\n\nvar CID = require('cids');\n/**\r\n * Transform one of:\r\n *\r\n * ```ts\r\n * CID\r\n * String\r\n * { cid: CID recursive, metadata }\r\n * { path: String recursive, metadata }\r\n * Iterable<CID>\r\n * Iterable<String>\r\n * Iterable<{ cid: CID recursive, metadata }>\r\n * Iterable<{ path: String recursive, metadata }>\r\n * AsyncIterable<CID>\r\n * AsyncIterable<String>\r\n * AsyncIterable<{ cid: CID recursive, metadata }>\r\n * AsyncIterable<{ path: String recursive, metadata }>\r\n * ```\r\n * Into:\r\n *\r\n * ```ts\r\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\r\n * ```\r\n *\r\n * @param {Source} input\r\n * @returns {AsyncIterable<Pin>}\r\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var iterator, first, _iterator3, _step3, cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!CID.isCID(input)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toPin({\n              cid: input\n            });\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toPin({\n              path: input\n            });\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return toPin(input);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            if (!input[Symbol.iterator]) {\n              _context.next = 62;\n              break;\n            }\n\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 19:\n            if (!(CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 22;\n            return toPin({\n              cid: first.value\n            });\n\n          case 22:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 23;\n\n            _iterator3.s();\n\n          case 25:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 31;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 29;\n            return toPin({\n              cid: cid\n            });\n\n          case 29:\n            _context.next = 25;\n            break;\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](23);\n\n            _iterator3.e(_context.t0);\n\n          case 36:\n            _context.prev = 36;\n\n            _iterator3.f();\n\n            return _context.finish(36);\n\n          case 39:\n            return _context.abrupt(\"return\");\n\n          case 40:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 61;\n              break;\n            }\n\n            _context.next = 43;\n            return toPin(first.value);\n\n          case 43:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 44;\n\n            _iterator4.s();\n\n          case 46:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 52;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 50;\n            return toPin(obj);\n\n          case 50:\n            _context.next = 46;\n            break;\n\n          case 52:\n            _context.next = 57;\n            break;\n\n          case 54:\n            _context.prev = 54;\n            _context.t1 = _context[\"catch\"](44);\n\n            _iterator4.e(_context.t1);\n\n          case 57:\n            _context.prev = 57;\n\n            _iterator4.f();\n\n            return _context.finish(57);\n\n          case 60:\n            return _context.abrupt(\"return\");\n\n          case 61:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 62:\n            if (!input[Symbol.asyncIterator]) {\n              _context.next = 136;\n              break;\n            }\n\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 66;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 66:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 69;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 69:\n            if (!(CID.isCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 102;\n              break;\n            }\n\n            _context.next = 72;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 72:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 74;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 76:\n            _context.next = 78;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 78:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 85;\n              break;\n            }\n\n            _cid = _step.value;\n            _context.next = 82;\n            return toPin({\n              cid: _cid\n            });\n\n          case 82:\n            _iteratorAbruptCompletion = false;\n            _context.next = 76;\n            break;\n\n          case 85:\n            _context.next = 91;\n            break;\n\n          case 87:\n            _context.prev = 87;\n            _context.t2 = _context[\"catch\"](74);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 91:\n            _context.prev = 91;\n            _context.prev = 92;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 96;\n              break;\n            }\n\n            _context.next = 96;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 96:\n            _context.prev = 96;\n\n            if (!_didIteratorError) {\n              _context.next = 99;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 99:\n            return _context.finish(96);\n\n          case 100:\n            return _context.finish(91);\n\n          case 101:\n            return _context.abrupt(\"return\");\n\n          case 102:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 135;\n              break;\n            }\n\n            _context.next = 105;\n            return toPin(_first.value);\n\n          case 105:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 107;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 109:\n            _context.next = 111;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 111:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 118;\n              break;\n            }\n\n            _obj = _step2.value;\n            _context.next = 115;\n            return toPin(_obj);\n\n          case 115:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 109;\n            break;\n\n          case 118:\n            _context.next = 124;\n            break;\n\n          case 120:\n            _context.prev = 120;\n            _context.t3 = _context[\"catch\"](107);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 124:\n            _context.prev = 124;\n            _context.prev = 125;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 129;\n              break;\n            }\n\n            _context.next = 129;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 129:\n            _context.prev = 129;\n\n            if (!_didIteratorError2) {\n              _context.next = 132;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 132:\n            return _context.finish(129);\n\n          case 133:\n            return _context.finish(124);\n\n          case 134:\n            return _context.abrupt(\"return\");\n\n          case 135:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 136:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 137:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[23, 33, 36, 39], [44, 54, 57, 60], [74, 87, 91, 101], [92,, 96, 100], [107, 120, 124, 134], [125,, 129, 133]]);\n  }));\n\n  function normaliseInput(_x) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\r\n * @param {ToPinWithPath|ToPinWithCID} input\r\n * @returns {Pin}\r\n */\n\n\nfunction toPin(input) {\n  var pin = {\n    path: input.path == null ? input.cid : \"\".concat(input.path),\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n/**\r\n * @typedef {Object} ToPinWithPath\r\n * @property {string | InstanceType<typeof window.String> | CID} path\r\n * @property {undefined} [cid]\r\n * @property {boolean} [recursive]\r\n * @property {any} [metadata]\r\n *\r\n * @typedef {Object} ToPinWithCID\r\n * @property {undefined} [path]\r\n * @property {CID} cid\r\n * @property {boolean} [recursive]\r\n * @property {any} [metadata]\r\n *\r\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\r\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\r\n *\r\n * @typedef {Object} Pin\r\n * @property {string|CID} path\r\n * @property {boolean} recursive\r\n * @property {any} [metadata]\r\n */","map":{"version":3,"names":["errCode","require","CID","module","exports","input","undefined","Error","isCID","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","normaliseInput","pin","recursive","metadata"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["'use strict'\r\n\r\nconst errCode = require('err-code')\r\nconst CID = require('cids')\r\n\r\n/**\r\n * Transform one of:\r\n *\r\n * ```ts\r\n * CID\r\n * String\r\n * { cid: CID recursive, metadata }\r\n * { path: String recursive, metadata }\r\n * Iterable<CID>\r\n * Iterable<String>\r\n * Iterable<{ cid: CID recursive, metadata }>\r\n * Iterable<{ path: String recursive, metadata }>\r\n * AsyncIterable<CID>\r\n * AsyncIterable<String>\r\n * AsyncIterable<{ cid: CID recursive, metadata }>\r\n * AsyncIterable<{ path: String recursive, metadata }>\r\n * ```\r\n * Into:\r\n *\r\n * ```ts\r\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\r\n * ```\r\n *\r\n * @param {Source} input\r\n * @returns {AsyncIterable<Pin>}\r\n */\r\n// eslint-disable-next-line complexity\r\nmodule.exports = async function * normaliseInput (input) {\r\n  // must give us something\r\n  if (input === null || input === undefined) {\r\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\r\n  }\r\n\r\n  // CID|String\r\n  if (CID.isCID(input)) {\r\n    yield toPin({ cid: input })\r\n    return\r\n  }\r\n\r\n  if (input instanceof String || typeof input === 'string') {\r\n    yield toPin({ path: input })\r\n    return\r\n  }\r\n\r\n  // { cid: CID recursive, metadata }\r\n  // @ts-ignore - it still could be iterable or async iterable\r\n  if (input.cid != null || input.path != null) {\r\n    // @ts-ignore\r\n    return yield toPin(input)\r\n  }\r\n\r\n  // Iterable<?>\r\n  if (input[Symbol.iterator]) {\r\n    const iterator = input[Symbol.iterator]()\r\n    const first = iterator.next()\r\n    if (first.done) return iterator\r\n\r\n    // Iterable<CID|String>\r\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\r\n      yield toPin({ cid: first.value })\r\n      for (const cid of iterator) {\r\n        yield toPin({ cid })\r\n      }\r\n      return\r\n    }\r\n\r\n    // Iterable<{ cid: CID recursive, metadata }>\r\n    if (first.value.cid != null || first.value.path != null) {\r\n      yield toPin(first.value)\r\n      for (const obj of iterator) {\r\n        yield toPin(obj)\r\n      }\r\n      return\r\n    }\r\n\r\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\r\n  }\r\n\r\n  // AsyncIterable<?>\r\n  if (input[Symbol.asyncIterator]) {\r\n    const iterator = input[Symbol.asyncIterator]()\r\n    const first = await iterator.next()\r\n    if (first.done) return iterator\r\n\r\n    // AsyncIterable<CID|String>\r\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\r\n      yield toPin({ cid: first.value })\r\n      for await (const cid of iterator) {\r\n        yield toPin({ cid })\r\n      }\r\n      return\r\n    }\r\n\r\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\r\n    if (first.value.cid != null || first.value.path != null) {\r\n      yield toPin(first.value)\r\n      for await (const obj of iterator) {\r\n        yield toPin(obj)\r\n      }\r\n      return\r\n    }\r\n\r\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\r\n  }\r\n\r\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\r\n}\r\n\r\n/**\r\n * @param {ToPinWithPath|ToPinWithCID} input\r\n * @returns {Pin}\r\n */\r\nfunction toPin (input) {\r\n  const pin = {\r\n    path: input.path == null ? input.cid : `${input.path}`,\r\n    recursive: input.recursive !== false\r\n  }\r\n\r\n  if (input.metadata != null) {\r\n    pin.metadata = input.metadata\r\n  }\r\n\r\n  return pin\r\n}\r\n\r\n/**\r\n * @typedef {Object} ToPinWithPath\r\n * @property {string | InstanceType<typeof window.String> | CID} path\r\n * @property {undefined} [cid]\r\n * @property {boolean} [recursive]\r\n * @property {any} [metadata]\r\n *\r\n * @typedef {Object} ToPinWithCID\r\n * @property {undefined} [path]\r\n * @property {CID} cid\r\n * @property {boolean} [recursive]\r\n * @property {any} [metadata]\r\n *\r\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\r\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\r\n *\r\n * @typedef {Object} Pin\r\n * @property {string|CID} path\r\n * @property {boolean} recursive\r\n * @property {any} [metadata]\r\n */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}