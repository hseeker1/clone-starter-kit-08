{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar Client = require('./core'); // Set default configuration and call create function with them\n\n/**\r\n * @typedef { import(\"./core\").ClientOptions } ClientOptions\r\n */\n\n/**\r\n * @template T\r\n * @typedef {(client: Client, clientOptions: ClientOptions) => T} Fn\r\n */\n\n/**\r\n * @template T\r\n * @typedef {(clientOptions: ClientOptions) => T} Factory\r\n */\n\n/**\r\n * @template T\r\n * @param {Fn<T>} fn\r\n * @returns {Factory<T>}\r\n */\n\n\nvar configure = function configure(fn) {\n  return function (options) {\n    return fn(new Client(options), options);\n  };\n};\n\nmodule.exports = configure;","map":{"version":3,"names":["Client","require","configure","fn","options","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/lib/configure.js"],"sourcesContent":["'use strict'\r\n/* eslint-env browser */\r\n\r\nconst Client = require('./core')\r\n\r\n// Set default configuration and call create function with them\r\n/**\r\n * @typedef { import(\"./core\").ClientOptions } ClientOptions\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {(client: Client, clientOptions: ClientOptions) => T} Fn\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {(clientOptions: ClientOptions) => T} Factory\r\n */\r\n\r\n/**\r\n * @template T\r\n * @param {Fn<T>} fn\r\n * @returns {Factory<T>}\r\n */\r\nconst configure = (fn) => {\r\n  return (options) => {\r\n    return fn(new Client(options), options)\r\n  }\r\n}\r\nmodule.exports = configure\r\n"],"mappings":"AAAA;AACA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAQ;EACxB,OAAO,UAACC,OAAD,EAAa;IAClB,OAAOD,EAAE,CAAC,IAAIH,MAAJ,CAAWI,OAAX,CAAD,EAAsBA,OAAtB,CAAT;EACD,CAFD;AAGD,CAJD;;AAKAC,MAAM,CAACC,OAAP,GAAiBJ,SAAjB"},"metadata":{},"sourceType":"script"}