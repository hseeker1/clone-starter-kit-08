{"ast":null,"code":"'use strict';\n/**\r\n * A CBOR tagged item, where the tag does not have semantics specified at the\r\n * moment, or those semantics threw an error during parsing. Typically this will\r\n * be an extension point you're not yet expecting.\r\n */\n\nclass Tagged {\n  /**\r\n   * Creates an instance of Tagged.\r\n   *\r\n   * @param {Number} tag - the number of the tag\r\n   * @param {any} value - the value inside the tag\r\n   * @param {Error} err - the error that was thrown parsing the tag, or null\r\n   */\n  constructor(tag, value, err) {\n    this.tag = tag;\n    this.value = value;\n    this.err = err;\n\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + typeof this.tag + ')');\n    }\n\n    if (this.tag < 0 || (this.tag | 0) !== this.tag) {\n      throw new Error('Tag must be a positive integer: ' + this.tag);\n    }\n  }\n  /**\r\n   * Convert to a String\r\n   *\r\n   * @returns {String} string of the form '1(2)'\r\n   */\n\n\n  toString() {\n    return `${this.tag}(${JSON.stringify(this.value)})`;\n  }\n  /**\r\n   * Push the simple value onto the CBOR stream\r\n   *\r\n   * @param {cbor.Encoder} gen The generator to push onto\r\n   * @returns {number}\r\n   */\n\n\n  encodeCBOR(gen) {\n    gen._pushTag(this.tag);\n\n    return gen.pushAny(this.value);\n  }\n  /**\r\n   * If we have a converter for this type, do the conversion.  Some converters\r\n   * are built-in.  Additional ones can be passed in.  If you want to remove\r\n   * a built-in converter, pass a converter in whose value is 'null' instead\r\n   * of a function.\r\n   *\r\n   * @param {Object} converters - keys in the object are a tag number, the value\r\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\r\n   *   of the appropriate type.  Throw an exception in the function on errors.\r\n   * @returns {any} - the converted item\r\n   */\n\n\n  convert(converters) {\n    var er, f;\n    f = converters != null ? converters[this.tag] : undefined;\n\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag];\n\n      if (typeof f !== 'function') {\n        return this;\n      }\n    }\n\n    try {\n      return f.call(Tagged, this.value);\n    } catch (error) {\n      er = error;\n      this.err = er;\n      return this;\n    }\n  }\n\n}\n\nmodule.exports = Tagged;","map":{"version":3,"names":["Tagged","constructor","tag","value","err","Error","toString","JSON","stringify","encodeCBOR","gen","_pushTag","pushAny","convert","converters","er","f","undefined","call","error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/borc/src/tagged.js"],"sourcesContent":["'use strict'\r\n\r\n/**\r\n * A CBOR tagged item, where the tag does not have semantics specified at the\r\n * moment, or those semantics threw an error during parsing. Typically this will\r\n * be an extension point you're not yet expecting.\r\n */\r\nclass Tagged {\r\n  /**\r\n   * Creates an instance of Tagged.\r\n   *\r\n   * @param {Number} tag - the number of the tag\r\n   * @param {any} value - the value inside the tag\r\n   * @param {Error} err - the error that was thrown parsing the tag, or null\r\n   */\r\n  constructor (tag, value, err) {\r\n    this.tag = tag\r\n    this.value = value\r\n    this.err = err\r\n    if (typeof this.tag !== 'number') {\r\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\r\n    }\r\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\r\n      throw new Error('Tag must be a positive integer: ' + this.tag)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert to a String\r\n   *\r\n   * @returns {String} string of the form '1(2)'\r\n   */\r\n  toString () {\r\n    return `${this.tag}(${JSON.stringify(this.value)})`\r\n  }\r\n\r\n  /**\r\n   * Push the simple value onto the CBOR stream\r\n   *\r\n   * @param {cbor.Encoder} gen The generator to push onto\r\n   * @returns {number}\r\n   */\r\n  encodeCBOR (gen) {\r\n    gen._pushTag(this.tag)\r\n    return gen.pushAny(this.value)\r\n  }\r\n\r\n  /**\r\n   * If we have a converter for this type, do the conversion.  Some converters\r\n   * are built-in.  Additional ones can be passed in.  If you want to remove\r\n   * a built-in converter, pass a converter in whose value is 'null' instead\r\n   * of a function.\r\n   *\r\n   * @param {Object} converters - keys in the object are a tag number, the value\r\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\r\n   *   of the appropriate type.  Throw an exception in the function on errors.\r\n   * @returns {any} - the converted item\r\n   */\r\n  convert (converters) {\r\n    var er, f\r\n    f = converters != null ? converters[this.tag] : undefined\r\n    if (typeof f !== 'function') {\r\n      f = Tagged['_tag' + this.tag]\r\n      if (typeof f !== 'function') {\r\n        return this\r\n      }\r\n    }\r\n    try {\r\n      return f.call(Tagged, this.value)\r\n    } catch (error) {\r\n      er = error\r\n      this.err = er\r\n      return this\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Tagged\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAAEC,GAAF,EAAOC,KAAP,EAAcC,GAAd,EAAmB;IAC5B,KAAKF,GAAL,GAAWA,GAAX;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,GAAL,GAAWA,GAAX;;IACA,IAAI,OAAO,KAAKF,GAAZ,KAAoB,QAAxB,EAAkC;MAChC,MAAM,IAAIG,KAAJ,CAAU,uBAAwB,OAAO,KAAKH,GAApC,GAA2C,GAArD,CAAN;IACD;;IACD,IAAK,KAAKA,GAAL,GAAW,CAAZ,IAAmB,CAAC,KAAKA,GAAL,GAAW,CAAZ,MAAmB,KAAKA,GAA/C,EAAqD;MACnD,MAAM,IAAIG,KAAJ,CAAU,qCAAqC,KAAKH,GAApD,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEI,QAAQ,GAAI;IACV,OAAQ,GAAE,KAAKJ,GAAI,IAAGK,IAAI,CAACC,SAAL,CAAe,KAAKL,KAApB,CAA2B,GAAjD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEM,UAAU,CAAEC,GAAF,EAAO;IACfA,GAAG,CAACC,QAAJ,CAAa,KAAKT,GAAlB;;IACA,OAAOQ,GAAG,CAACE,OAAJ,CAAY,KAAKT,KAAjB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEU,OAAO,CAAEC,UAAF,EAAc;IACnB,IAAIC,EAAJ,EAAQC,CAAR;IACAA,CAAC,GAAGF,UAAU,IAAI,IAAd,GAAqBA,UAAU,CAAC,KAAKZ,GAAN,CAA/B,GAA4Ce,SAAhD;;IACA,IAAI,OAAOD,CAAP,KAAa,UAAjB,EAA6B;MAC3BA,CAAC,GAAGhB,MAAM,CAAC,SAAS,KAAKE,GAAf,CAAV;;MACA,IAAI,OAAOc,CAAP,KAAa,UAAjB,EAA6B;QAC3B,OAAO,IAAP;MACD;IACF;;IACD,IAAI;MACF,OAAOA,CAAC,CAACE,IAAF,CAAOlB,MAAP,EAAe,KAAKG,KAApB,CAAP;IACD,CAFD,CAEE,OAAOgB,KAAP,EAAc;MACdJ,EAAE,GAAGI,KAAL;MACA,KAAKf,GAAL,GAAWW,EAAX;MACA,OAAO,IAAP;IACD;EACF;;AAnEU;;AAsEbK,MAAM,CAACC,OAAP,GAAiBrB,MAAjB"},"metadata":{},"sourceType":"script"}