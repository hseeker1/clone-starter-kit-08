{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar CID = require('cids');\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar multipartRequest = require('./lib/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar abortSignal = require('./lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n/**\r\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\r\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\r\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\r\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/add-all/index')>}\r\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          total,\n          parts,\n          _ref,\n          _ref2,\n          progressFn,\n          onUploadProgress,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                timeout: options.timeout,\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n\n            case 13:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 20:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 32;\n                break;\n              }\n\n              file = _step.value;\n              file = toCamel(file);\n\n              if (!(file.hash !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n\n              _context.next = 26;\n              return toCoreInterface(file);\n\n            case 26:\n              _context.next = 29;\n              break;\n\n            case 28:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context.next = 18;\n              break;\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n\n              _context.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 43:\n              _context.prev = 43;\n\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 46:\n              return _context.finish(43);\n\n            case 47:\n              return _context.finish(38);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});\n/**\r\n * Returns simple progress callback when content length isn't computable or a\r\n * progress event handler that calculates progress from upload progress events.\r\n *\r\n * @param {number} total\r\n * @param {{name:string, start:number, end:number}[]|null} parts\r\n * @param {IPFSCoreAddProgressFn} progress\r\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\r\n */\n\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n/**\r\n * Creates a progress handler that interpolates progress from upload progress\r\n * events and total size of the content that is added.\r\n *\r\n * @param {number} size - actual content size\r\n * @param {{name:string, start:number, end:number}[]} parts\r\n * @param {IPFSCoreAddProgressFn} progress\r\n * @returns {IPFSUtilsHttpUploadProgressFn}\r\n */\n\n\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n        total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      var _parts$index = parts[index],\n          start = _parts$index.start,\n          end = _parts$index.end,\n          name = _parts$index.name; // If within current part range report progress and break the loop\n\n      if (position < end) {\n        progress(position - start, name);\n        break; // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n/**\r\n * @param {any} input\r\n * @returns {import('ipfs-core-types/src/files').UnixFSEntry}\r\n */\n\n\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n      hash = _ref4.hash,\n      size = _ref4.size,\n      mode = _ref4.mode,\n      mtime = _ref4.mtime,\n      mtimeNsecs = _ref4.mtimeNsecs;\n  var output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  } // @ts-ignore\n\n\n  return output;\n}","map":{"version":3,"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progress","createProgressHandler","undefined","progressFn","onUploadProgress","post","searchParams","Boolean","timeout","res","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parseInt","secs","nsecs"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst toCamel = require('./lib/object-to-camel')\r\nconst configure = require('./lib/configure')\r\nconst multipartRequest = require('./lib/multipart-request')\r\nconst toUrlSearchParams = require('./lib/to-url-search-params')\r\nconst abortSignal = require('./lib/abort-signal')\r\nconst { AbortController } = require('native-abort-controller')\r\n\r\n/**\r\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\r\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\r\n */\r\n\r\nmodule.exports = configure((api) => {\r\n  /**\r\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/add-all/index')>}\r\n   */\r\n  async function * addAll (source, options = {}) {\r\n    // allow aborting requests on body errors\r\n    const controller = new AbortController()\r\n    const signal = abortSignal(controller.signal, options.signal)\r\n    const { headers, body, total, parts } =\r\n      await multipartRequest(source, controller, options.headers)\r\n\r\n    // In browser response body only starts streaming once upload is\r\n    // complete, at which point all the progress updates are invalid. If\r\n    // length of the content is computable we can interpret progress from\r\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\r\n    // in which case we disable progress updates to be written out.\r\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\r\n      ? createProgressHandler(total, parts, options.progress)\r\n      : [undefined, undefined]\r\n\r\n    const res = await api.post('add', {\r\n      searchParams: toUrlSearchParams({\r\n        'stream-channels': true,\r\n        ...options,\r\n        progress: Boolean(progressFn)\r\n      }),\r\n      timeout: options.timeout,\r\n      onUploadProgress,\r\n      signal,\r\n      headers,\r\n      body\r\n    })\r\n\r\n    for await (let file of res.ndjson()) {\r\n      file = toCamel(file)\r\n\r\n      if (file.hash !== undefined) {\r\n        yield toCoreInterface(file)\r\n      } else if (progressFn) {\r\n        progressFn(file.bytes || 0, file.name)\r\n      }\r\n    }\r\n  }\r\n  return addAll\r\n})\r\n\r\n/**\r\n * Returns simple progress callback when content length isn't computable or a\r\n * progress event handler that calculates progress from upload progress events.\r\n *\r\n * @param {number} total\r\n * @param {{name:string, start:number, end:number}[]|null} parts\r\n * @param {IPFSCoreAddProgressFn} progress\r\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\r\n */\r\nconst createProgressHandler = (total, parts, progress) =>\r\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\r\n\r\n/**\r\n * Creates a progress handler that interpolates progress from upload progress\r\n * events and total size of the content that is added.\r\n *\r\n * @param {number} size - actual content size\r\n * @param {{name:string, start:number, end:number}[]} parts\r\n * @param {IPFSCoreAddProgressFn} progress\r\n * @returns {IPFSUtilsHttpUploadProgressFn}\r\n */\r\nconst createOnUploadProgress = (size, parts, progress) => {\r\n  let index = 0\r\n  const count = parts.length\r\n  return ({ loaded, total }) => {\r\n    // Derive position from the current progress.\r\n    const position = Math.floor(loaded / total * size)\r\n    while (index < count) {\r\n      const { start, end, name } = parts[index]\r\n      // If within current part range report progress and break the loop\r\n      if (position < end) {\r\n        progress(position - start, name)\r\n        break\r\n      // If passed current part range report final byte for the chunk and\r\n      // move to next one.\r\n      } else {\r\n        progress(end - start, name)\r\n        index += 1\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {any} input\r\n * @returns {import('ipfs-core-types/src/files').UnixFSEntry}\r\n */\r\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\r\n  const output = {\r\n    path: name,\r\n    cid: new CID(hash),\r\n    size: parseInt(size)\r\n  }\r\n\r\n  if (mode != null) {\r\n    output.mode = parseInt(mode, 8)\r\n  }\r\n\r\n  if (mtime != null) {\r\n    output.mtime = {\r\n      secs: mtime,\r\n      nsecs: mtimeNsecs || 0\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  return output\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}