{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar CID = require('cids');\n\nvar util = require('./util');\n/**\r\n * Resolves a path within a PB block.\r\n *\r\n * Returns the value or a link and the partial mising path. This way the\r\n * IPLD Resolver can fetch the link and continue to resolve.\r\n *\r\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\r\n * @param {string} [path='/'] - Path that should be resolved\r\n * @returns {Object} result - Result of the path it it was resolved successfully\r\n * @returns {*} result.value - Value the path resolves to\r\n * @returns {string} result.remainderPath - If the path resolves half-way to a\r\n *   link, then the `remainderPath` is the part after the link that can be used\r\n *   for further resolving\r\n */\n\n\nexports.resolve = function (binaryBlob, path) {\n  var node = util.deserialize(binaryBlob);\n  var parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    var key = parts.shift();\n\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      var _iterator = _createForOfIteratorHelper(node.Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n\n          if (link.Name === key) {\n            return {\n              value: link.Hash,\n              remainderPath: parts.join('/')\n            };\n          }\n        } // There wasn't even a matching named link\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      throw new Error(\"Object has no property '\".concat(key, \"'\"));\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n/**\r\n * Return all available paths of a block.\r\n *\r\n * @generator\r\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\r\n * @yields {string} - A single path\r\n */\n\n\nexports.tree = /*#__PURE__*/_regeneratorRuntime().mark(function _callee(binaryBlob) {\n  var node, ii;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          node = util.deserialize(binaryBlob); // There is always a `Data` and `Links` property\n\n          _context.next = 3;\n          return 'Data';\n\n        case 3:\n          _context.next = 5;\n          return 'Links';\n\n        case 5:\n          ii = 0;\n\n        case 6:\n          if (!(ii < node.Links.length)) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 9;\n          return \"Links/\".concat(ii);\n\n        case 9:\n          _context.next = 11;\n          return \"Links/\".concat(ii, \"/Name\");\n\n        case 11:\n          _context.next = 13;\n          return \"Links/\".concat(ii, \"/Tsize\");\n\n        case 13:\n          _context.next = 15;\n          return \"Links/\".concat(ii, \"/Hash\");\n\n        case 15:\n          ii++;\n          _context.next = 6;\n          break;\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n});","map":{"version":3,"names":["CID","require","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","Links","link","Name","value","Hash","remainderPath","join","Error","isCID","tree","ii"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/src/resolver.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\n\r\nconst util = require('./util')\r\n\r\n/**\r\n * Resolves a path within a PB block.\r\n *\r\n * Returns the value or a link and the partial mising path. This way the\r\n * IPLD Resolver can fetch the link and continue to resolve.\r\n *\r\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\r\n * @param {string} [path='/'] - Path that should be resolved\r\n * @returns {Object} result - Result of the path it it was resolved successfully\r\n * @returns {*} result.value - Value the path resolves to\r\n * @returns {string} result.remainderPath - If the path resolves half-way to a\r\n *   link, then the `remainderPath` is the part after the link that can be used\r\n *   for further resolving\r\n */\r\nexports.resolve = (binaryBlob, path) => {\r\n  let node = util.deserialize(binaryBlob)\r\n\r\n  const parts = path.split('/').filter(Boolean)\r\n  while (parts.length) {\r\n    const key = parts.shift()\r\n    if (node[key] === undefined) {\r\n      // There might be a matching named link\r\n      for (const link of node.Links) {\r\n        if (link.Name === key) {\r\n          return {\r\n            value: link.Hash,\r\n            remainderPath: parts.join('/')\r\n          }\r\n        }\r\n      }\r\n\r\n      // There wasn't even a matching named link\r\n      throw new Error(`Object has no property '${key}'`)\r\n    }\r\n\r\n    node = node[key]\r\n    if (CID.isCID(node)) {\r\n      return {\r\n        value: node,\r\n        remainderPath: parts.join('/')\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: node,\r\n    remainderPath: ''\r\n  }\r\n}\r\n\r\n/**\r\n * Return all available paths of a block.\r\n *\r\n * @generator\r\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\r\n * @yields {string} - A single path\r\n */\r\nexports.tree = function * (binaryBlob) {\r\n  const node = util.deserialize(binaryBlob)\r\n\r\n  // There is always a `Data` and `Links` property\r\n  yield 'Data'\r\n  yield 'Links'\r\n  for (let ii = 0; ii < node.Links.length; ii++) {\r\n    yield `Links/${ii}`\r\n    yield `Links/${ii}/Name`\r\n    yield `Links/${ii}/Tsize`\r\n    yield `Links/${ii}/Hash`\r\n  }\r\n}\r\n"],"mappings":"AAAA;;;;+CACA,oJ;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,OAAR,GAAkB,UAACC,UAAD,EAAaC,IAAb,EAAsB;EACtC,IAAIC,IAAI,GAAGL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CAAX;EAEA,IAAMI,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;;EACA,OAAOH,KAAK,CAACI,MAAb,EAAqB;IACnB,IAAMC,GAAG,GAAGL,KAAK,CAACM,KAAN,EAAZ;;IACA,IAAIR,IAAI,CAACO,GAAD,CAAJ,KAAcE,SAAlB,EAA6B;MAC3B;MAD2B,2CAERT,IAAI,CAACU,KAFG;MAAA;;MAAA;QAE3B,oDAA+B;UAAA,IAApBC,IAAoB;;UAC7B,IAAIA,IAAI,CAACC,IAAL,KAAcL,GAAlB,EAAuB;YACrB,OAAO;cACLM,KAAK,EAAEF,IAAI,CAACG,IADP;cAELC,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;YAFV,CAAP;UAID;QACF,CAT0B,CAW3B;;MAX2B;QAAA;MAAA;QAAA;MAAA;;MAY3B,MAAM,IAAIC,KAAJ,mCAAqCV,GAArC,OAAN;IACD;;IAEDP,IAAI,GAAGA,IAAI,CAACO,GAAD,CAAX;;IACA,IAAId,GAAG,CAACyB,KAAJ,CAAUlB,IAAV,CAAJ,EAAqB;MACnB,OAAO;QACLa,KAAK,EAAEb,IADF;QAELe,aAAa,EAAEb,KAAK,CAACc,IAAN,CAAW,GAAX;MAFV,CAAP;IAID;EACF;;EAED,OAAO;IACLH,KAAK,EAAEb,IADF;IAELe,aAAa,EAAE;EAFV,CAAP;AAID,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACuB,IAAR,2CAAe,iBAAYrB,UAAZ;EAAA;EAAA;IAAA;MAAA;QAAA;UACPE,IADO,GACAL,IAAI,CAACM,WAAL,CAAiBH,UAAjB,CADA,EAGb;;UAHa;UAIb,OAAM,MAAN;;QAJa;UAAA;UAKb,OAAM,OAAN;;QALa;UAMJsB,EANI,GAMC,CAND;;QAAA;UAAA,MAMIA,EAAE,GAAGpB,IAAI,CAACU,KAAL,CAAWJ,MANpB;YAAA;YAAA;UAAA;;UAAA;UAOX,uBAAec,EAAf;;QAPW;UAAA;UAQX,uBAAeA,EAAf;;QARW;UAAA;UASX,uBAAeA,EAAf;;QATW;UAAA;UAUX,uBAAeA,EAAf;;QAVW;UAM4BA,EAAE,EAN9B;UAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAf"},"metadata":{},"sourceType":"script"}