{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n/**\r\n * Representing an AccountKeyPublic.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass AccountKeyPublic {\n  /**\r\n   * Decodes an RLP-encoded AccountKeyPublic string.\r\n   *\r\n   * @example\r\n   * const accountKey = caver.account.accountKey.accountKeyPublic.decode('0x{encoded account key}')\r\n   *\r\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\r\n   * @return {AccountKeyPublic}\r\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) throw new Error(`Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`);\n    const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`);\n    return new AccountKeyPublic(publicKey);\n  }\n  /**\r\n   * Creates AccountKeyPublic instance from x, y point\r\n   *\r\n   * @example\r\n   * const pubKey = '0x{public key string}'\r\n   * const [ x, y ] = caver.utils.xyPointFromPublicKey(pubKey)\r\n   * const accountKey = caver.account.accountKey.accountKeyPublic.fromXYPoint(x, y)\r\n   *\r\n   * @param {string} x - The x point.\r\n   * @param {string} y - The y point.\r\n   * @return {AccountKeyPublic}\r\n   */\n\n\n  static fromXYPoint(x, y) {\n    const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64);\n    const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64);\n    const pubKey = `0x${xPoint + yPoint}`;\n    return new AccountKeyPublic(pubKey);\n  }\n  /**\r\n   * Creates AccountKeyPublic instance from public key string\r\n   *\r\n   * @example\r\n   * const pubKey = '0x{public key string}'\r\n   * const accountKey = caver.account.accountKey.accountKeyPublic.fromPublicKey(pubKey)\r\n   *\r\n   * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\r\n   * @return {AccountKeyPublic}\r\n   */\n\n\n  static fromPublicKey(pubKey) {\n    return new AccountKeyPublic(pubKey);\n  }\n  /**\r\n   * Creates an instance of AccountKeyPublic.\r\n   * @param {string} publicKey - a public key\r\n   */\n\n\n  constructor(publicKey) {\n    this.publicKey = publicKey;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  set publicKey(p) {\n    if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`);\n    this._publicKey = utils.addHexPrefix(p);\n  }\n  /**\r\n   * Returns an RLP-encoded AccountKeyPublic string.\r\n   *\r\n   * @example\r\n   * const encoding = accountKeyPublic.getRLPEncoding()\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  getRLPEncoding() {\n    const compressedPublicKey = utils.compressPublicKey(this.publicKey);\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n  }\n  /**\r\n   * Returns the x and y coordinates of publicKey.\r\n   *\r\n   * @example\r\n   * const xyPoint = accountKeyPublic.getXYPoint()\r\n   *\r\n   * @return {Array.<string>}\r\n   */\n\n\n  getXYPoint() {\n    return utils.xyPointFromPublicKey(this.publicKey);\n  }\n\n}\n\nmodule.exports = AccountKeyPublic;","map":{"version":3,"names":["RLP","require","utils","ACCOUNT_KEY_TAG","AccountKeyPublic","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_PUBLIC_TAG","Error","publicKey","slice","length","fromXYPoint","x","y","xPoint","leftPad","stripHexPrefix","yPoint","pubKey","fromPublicKey","constructor","_publicKey","p","isValidPublicKey","getRLPEncoding","compressedPublicKey","compressPublicKey","encode","getXYPoint","xyPointFromPublicKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyPublic.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\n\r\n/**\r\n * Representing an AccountKeyPublic.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyPublic {\r\n    /**\r\n     * Decodes an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG))\r\n            throw new Error(\r\n                `Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`\r\n            )\r\n\r\n        const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`)\r\n        return new AccountKeyPublic(publicKey)\r\n    }\r\n\r\n    /**\r\n     * Creates AccountKeyPublic instance from x, y point\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const [ x, y ] = caver.utils.xyPointFromPublicKey(pubKey)\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromXYPoint(x, y)\r\n     *\r\n     * @param {string} x - The x point.\r\n     * @param {string} y - The y point.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static fromXYPoint(x, y) {\r\n        const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64)\r\n        const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64)\r\n        const pubKey = `0x${xPoint + yPoint}`\r\n        return new AccountKeyPublic(pubKey)\r\n    }\r\n\r\n    /**\r\n     * Creates AccountKeyPublic instance from public key string\r\n     *\r\n     * @example\r\n     * const pubKey = '0x{public key string}'\r\n     * const accountKey = caver.account.accountKey.accountKeyPublic.fromPublicKey(pubKey)\r\n     *\r\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\r\n     * @return {AccountKeyPublic}\r\n     */\r\n    static fromPublicKey(pubKey) {\r\n        return new AccountKeyPublic(pubKey)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AccountKeyPublic.\r\n     * @param {string} publicKey - a public key\r\n     */\r\n    constructor(publicKey) {\r\n        this.publicKey = publicKey\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get publicKey() {\r\n        return this._publicKey\r\n    }\r\n\r\n    set publicKey(p) {\r\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\r\n        this._publicKey = utils.addHexPrefix(p)\r\n    }\r\n\r\n    /**\r\n     * Returns an RLP-encoded AccountKeyPublic string.\r\n     *\r\n     * @example\r\n     * const encoding = accountKeyPublic.getRLPEncoding()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncoding() {\r\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\r\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\r\n    }\r\n\r\n    /**\r\n     * Returns the x and y coordinates of publicKey.\r\n     *\r\n     * @example\r\n     * const xyPoint = accountKeyPublic.getXYPoint()\r\n     *\r\n     * @return {Array.<string>}\r\n     */\r\n    getXYPoint() {\r\n        return utils.xyPointFromPublicKey(this.publicKey)\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyPublic\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;EAAEE;AAAF,IAAsBF,OAAO,CAAC,oBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAN,CAAuB;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACiB,OAANC,MAAM,CAACC,aAAD,EAAgB;IACzBA,aAAa,GAAGJ,KAAK,CAACK,YAAN,CAAmBD,aAAnB,CAAhB;IACA,IAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACM,sBAAzC,CAAL,EACI,MAAM,IAAIC,KAAJ,CACD,yDAAwDP,eAAe,CAACM,sBAAuB,KAAIH,aAAc,EADhH,CAAN;IAIJ,MAAMK,SAAS,GAAGX,GAAG,CAACK,MAAJ,CAAY,KAAIC,aAAa,CAACM,KAAd,CAAoBT,eAAe,CAACM,sBAAhB,CAAuCI,MAA3D,CAAmE,EAAnF,CAAlB;IACA,OAAO,IAAIT,gBAAJ,CAAqBO,SAArB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACsB,OAAXG,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACrB,MAAMC,MAAM,GAAGf,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACiB,cAAN,CAAqBJ,CAArB,CAAd,EAAuC,EAAvC,CAAf;IACA,MAAMK,MAAM,GAAGlB,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACiB,cAAN,CAAqBH,CAArB,CAAd,EAAuC,EAAvC,CAAf;IACA,MAAMK,MAAM,GAAI,KAAIJ,MAAM,GAAGG,MAAO,EAApC;IACA,OAAO,IAAIhB,gBAAJ,CAAqBiB,MAArB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwB,OAAbC,aAAa,CAACD,MAAD,EAAS;IACzB,OAAO,IAAIjB,gBAAJ,CAAqBiB,MAArB,CAAP;EACH;EAED;AACJ;AACA;AACA;;;EACIE,WAAW,CAACZ,SAAD,EAAY;IACnB,KAAKA,SAAL,GAAiBA,SAAjB;EACH;EAED;AACJ;AACA;;;EACiB,IAATA,SAAS,GAAG;IACZ,OAAO,KAAKa,UAAZ;EACH;;EAEY,IAATb,SAAS,CAACc,CAAD,EAAI;IACb,IAAI,CAACvB,KAAK,CAACwB,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIf,KAAJ,CAAW,uBAAsBe,CAAE,EAAnC,CAAN;IAChC,KAAKD,UAAL,GAAkBtB,KAAK,CAACK,YAAN,CAAmBkB,CAAnB,CAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,cAAc,GAAG;IACb,MAAMC,mBAAmB,GAAG1B,KAAK,CAAC2B,iBAAN,CAAwB,KAAKlB,SAA7B,CAA5B;IACA,OAAOR,eAAe,CAACM,sBAAhB,GAAyCT,GAAG,CAAC8B,MAAJ,CAAWF,mBAAX,EAAgChB,KAAhC,CAAsC,CAAtC,CAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACImB,UAAU,GAAG;IACT,OAAO7B,KAAK,CAAC8B,oBAAN,CAA2B,KAAKrB,SAAhC,CAAP;EACH;;AAjGkB;;AAoGvBsB,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB"},"metadata":{},"sourceType":"script"}