{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nvar multicodec = require('multicodec');\n\nvar loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure(function (api, opts) {\n  var load = loadFormat(opts.ipld);\n  /**\r\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\r\n   */\n\n  var put = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dagNode) {\n      var options,\n          encodingOptions,\n          cid,\n          settings,\n          format,\n          serialized,\n          controller,\n          signal,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n            case 5:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n            case 7:\n              if (options.cid) {\n                cid = new CID(options.cid);\n                encodingOptions = _objectSpread(_objectSpread({}, options), {}, {\n                  format: multicodec.getName(cid.code),\n                  hashAlg: multihash.decode(cid.multihash).name\n                });\n                delete options.cid;\n              } else {\n                encodingOptions = options;\n              }\n\n              settings = _objectSpread({\n                format: 'dag-cbor',\n                hashAlg: 'sha2-256',\n                inputEnc: 'raw'\n              }, encodingOptions);\n              _context.next = 11;\n              return load(settings.format);\n\n            case 11:\n              format = _context.sent;\n              serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, settings.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: settings.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(settings)\n              };\n              _context.next = 20;\n              return multipartRequest(serialized, controller, settings.headers);\n\n            case 20:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 24;\n              return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n            case 24:\n              res = _context.sent;\n              _context.next = 27;\n              return res.json();\n\n            case 27:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function put(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return put;\n});","map":{"version":3,"names":["CID","require","multihash","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","multicodec","loadFormat","module","exports","api","opts","load","ipld","put","dagNode","options","cid","format","hashAlg","Error","encodingOptions","getName","code","decode","name","settings","inputEnc","serialized","util","serialize","controller","signal","timeout","searchParams","headers","post","res","json","data","Cid"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst multihash = require('multihashes')\r\nconst configure = require('../lib/configure')\r\nconst multipartRequest = require('../lib/multipart-request')\r\nconst toUrlSearchParams = require('../lib/to-url-search-params')\r\nconst abortSignal = require('../lib/abort-signal')\r\nconst { AbortController } = require('native-abort-controller')\r\nconst multicodec = require('multicodec')\r\nconst loadFormat = require('../lib/ipld-formats')\r\n\r\nmodule.exports = configure((api, opts) => {\r\n  const load = loadFormat(opts.ipld)\r\n\r\n  /**\r\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\r\n   */\r\n  const put = async (dagNode, options = {}) => {\r\n    if (options.cid && (options.format || options.hashAlg)) {\r\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\r\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\r\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\r\n    }\r\n\r\n    let encodingOptions\r\n    if (options.cid) {\r\n      const cid = new CID(options.cid)\r\n      encodingOptions = {\r\n        ...options,\r\n        format: multicodec.getName(cid.code),\r\n        hashAlg: multihash.decode(cid.multihash).name\r\n      }\r\n      delete options.cid\r\n    } else {\r\n      encodingOptions = options\r\n    }\r\n\r\n    const settings = {\r\n      format: 'dag-cbor',\r\n      hashAlg: 'sha2-256',\r\n      inputEnc: 'raw',\r\n      ...encodingOptions\r\n    }\r\n\r\n    const format = await load(settings.format)\r\n    const serialized = format.util.serialize(dagNode)\r\n\r\n    // allow aborting requests on body errors\r\n    const controller = new AbortController()\r\n    const signal = abortSignal(controller.signal, settings.signal)\r\n\r\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\r\n    const res = await api.post('dag/put', {\r\n      timeout: settings.timeout,\r\n      signal,\r\n      searchParams: toUrlSearchParams(settings),\r\n      ...(\r\n        await multipartRequest(serialized, controller, settings.headers)\r\n      )\r\n    })\r\n    const data = await res.json()\r\n\r\n    return new CID(data.Cid['/'])\r\n  }\r\n\r\n  return put\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}