{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n\nvar proto = protons(require('./dag.proto.js'));\n\nvar DAGLink = require('./dag-link/dagLink');\n\nexports = module.exports;\n\nvar toProtoBuf = function toProtoBuf(node) {\n  var pbn = {};\n\n  if (node.Data && node.Data.byteLength > 0) {\n    pbn.Data = node.Data;\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization\n    // `null !== new Uint8Array(0)`\n    pbn.Data = null;\n  }\n\n  if (node.Links && node.Links.length > 0) {\n    pbn.Links = node.Links.map(function (link) {\n      return {\n        Hash: link.Hash.bytes,\n        Name: link.Name,\n        Tsize: link.Tsize\n      };\n    });\n  } else {\n    pbn.Links = null;\n  }\n\n  return pbn;\n};\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a PB block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\n\n\nvar serializeDAGNode = function serializeDAGNode(node) {\n  var data = node.Data;\n  var links = node.Links || [];\n  var serialized = proto.PBNode.encode(toProtoBuf({\n    Data: data,\n    Links: links\n  }));\n  return serialized;\n}; // Serialize an object where the `Links` might not be a `DAGLink` instance yet\n\n\nvar serializeDAGNodeLike = function serializeDAGNodeLike(data) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var node = {\n    Data: data\n  };\n  node.Links = links.map(function (link) {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n  });\n  return serializeDAGNode(node);\n};\n\nexports.serializeDAGNode = serializeDAGNode;\nexports.serializeDAGNodeLike = serializeDAGNodeLike;","map":{"version":3,"names":["protons","require","proto","DAGLink","exports","module","toProtoBuf","node","pbn","Data","byteLength","Links","length","map","link","Hash","bytes","Name","Tsize","serializeDAGNode","data","links","serialized","PBNode","encode","serializeDAGNodeLike","isDAGLink","util","createDagLinkFromB58EncodedHash"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/src/serialize.js"],"sourcesContent":["'use strict'\r\n\r\nconst protons = require('protons')\r\nconst proto = protons(require('./dag.proto.js'))\r\nconst DAGLink = require('./dag-link/dagLink')\r\n\r\nexports = module.exports\r\n\r\nconst toProtoBuf = (node) => {\r\n  const pbn = {}\r\n\r\n  if (node.Data && node.Data.byteLength > 0) {\r\n    pbn.Data = node.Data\r\n  } else {\r\n    // NOTE: this has to be null in order to match go-ipfs serialization\r\n    // `null !== new Uint8Array(0)`\r\n    pbn.Data = null\r\n  }\r\n\r\n  if (node.Links && node.Links.length > 0) {\r\n    pbn.Links = node.Links\r\n      .map((link) => ({\r\n        Hash: link.Hash.bytes,\r\n        Name: link.Name,\r\n        Tsize: link.Tsize\r\n      }))\r\n  } else {\r\n    pbn.Links = null\r\n  }\r\n\r\n  return pbn\r\n}\r\n\r\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a PB block\r\n * @returns {Uint8Array} - The encoded binary representation\r\n */\r\nconst serializeDAGNode = (node) => {\r\n  const data = node.Data\r\n  const links = node.Links || []\r\n\r\n  const serialized = proto.PBNode.encode(toProtoBuf({\r\n    Data: data,\r\n    Links: links\r\n  }))\r\n\r\n  return serialized\r\n}\r\n\r\n// Serialize an object where the `Links` might not be a `DAGLink` instance yet\r\nconst serializeDAGNodeLike = (data, links = []) => {\r\n  const node = { Data: data }\r\n  node.Links = links.map((link) => {\r\n    return DAGLink.isDAGLink(link)\r\n      ? link\r\n      : DAGLink.util.createDagLinkFromB58EncodedHash(link)\r\n  })\r\n  return serializeDAGNode(node)\r\n}\r\n\r\nexports.serializeDAGNode = serializeDAGNode\r\nexports.serializeDAGNodeLike = serializeDAGNodeLike\r\n"],"mappings":"AAAA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAACC,OAAO,CAAC,gBAAD,CAAR,CAArB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEAG,OAAO,GAAGC,MAAM,CAACD,OAAjB;;AAEA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;EAC3B,IAAMC,GAAG,GAAG,EAAZ;;EAEA,IAAID,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUC,UAAV,GAAuB,CAAxC,EAA2C;IACzCF,GAAG,CAACC,IAAJ,GAAWF,IAAI,CAACE,IAAhB;EACD,CAFD,MAEO;IACL;IACA;IACAD,GAAG,CAACC,IAAJ,GAAW,IAAX;EACD;;EAED,IAAIF,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAoB,CAAtC,EAAyC;IACvCJ,GAAG,CAACG,KAAJ,GAAYJ,IAAI,CAACI,KAAL,CACTE,GADS,CACL,UAACC,IAAD;MAAA,OAAW;QACdC,IAAI,EAAED,IAAI,CAACC,IAAL,CAAUC,KADF;QAEdC,IAAI,EAAEH,IAAI,CAACG,IAFG;QAGdC,KAAK,EAAEJ,IAAI,CAACI;MAHE,CAAX;IAAA,CADK,CAAZ;EAMD,CAPD,MAOO;IACLV,GAAG,CAACG,KAAJ,GAAY,IAAZ;EACD;;EAED,OAAOH,GAAP;AACD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACZ,IAAD,EAAU;EACjC,IAAMa,IAAI,GAAGb,IAAI,CAACE,IAAlB;EACA,IAAMY,KAAK,GAAGd,IAAI,CAACI,KAAL,IAAc,EAA5B;EAEA,IAAMW,UAAU,GAAGpB,KAAK,CAACqB,MAAN,CAAaC,MAAb,CAAoBlB,UAAU,CAAC;IAChDG,IAAI,EAAEW,IAD0C;IAEhDT,KAAK,EAAEU;EAFyC,CAAD,CAA9B,CAAnB;EAKA,OAAOC,UAAP;AACD,CAVD,C,CAYA;;;AACA,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACL,IAAD,EAAsB;EAAA,IAAfC,KAAe,uEAAP,EAAO;EACjD,IAAMd,IAAI,GAAG;IAAEE,IAAI,EAAEW;EAAR,CAAb;EACAb,IAAI,CAACI,KAAL,GAAaU,KAAK,CAACR,GAAN,CAAU,UAACC,IAAD,EAAU;IAC/B,OAAOX,OAAO,CAACuB,SAAR,CAAkBZ,IAAlB,IACHA,IADG,GAEHX,OAAO,CAACwB,IAAR,CAAaC,+BAAb,CAA6Cd,IAA7C,CAFJ;EAGD,CAJY,CAAb;EAKA,OAAOK,gBAAgB,CAACZ,IAAD,CAAvB;AACD,CARD;;AAUAH,OAAO,CAACe,gBAAR,GAA2BA,gBAA3B;AACAf,OAAO,CAACqB,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}