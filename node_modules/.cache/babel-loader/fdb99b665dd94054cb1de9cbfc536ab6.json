{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar errcode = require('err-code');\n\nvar multihash = require('multihashes');\n\nvar crypto = require('./crypto');\n\nvar _require = require('uint8arrays/equals'),\n    equals = _require.equals;\n/**\r\n * @typedef {import(\"./types\").Digest} Digest\r\n * @typedef {import(\"multihashes\").HashName} HashName\r\n */\n\n/**\r\n * Hash the given `bytes` using the algorithm specified by `alg`.\r\n *\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\n\n\nfunction Multihashing(_x, _x2, _x3) {\n  return _Multihashing.apply(this, arguments);\n}\n/**\r\n * Expose multihash itself, to avoid silly double requires.\r\n */\n\n\nfunction _Multihashing() {\n  _Multihashing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(bytes, alg, length) {\n    var digest;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Multihashing.digest(bytes, alg, length);\n\n          case 2:\n            digest = _context3.sent;\n            return _context3.abrupt(\"return\", multihash.encode(digest, alg, length));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _Multihashing.apply(this, arguments);\n}\n\nMultihashing.multihash = multihash;\n/**\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\n\nMultihashing.digest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(bytes, alg, length) {\n    var hash, digest;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            hash = Multihashing.createHash(alg);\n            _context.next = 3;\n            return hash(bytes);\n\n          case 3:\n            digest = _context.sent;\n            return _context.abrupt(\"return\", length ? digest.slice(0, length) : digest);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\r\n * Creates a function that hashes with the given algorithm\r\n *\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @returns {Digest} - The hash function corresponding to `alg`\r\n */\n\n\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    var e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');\n    throw e;\n  }\n\n  var code = multihash.coerceCode(alg);\n\n  if (!Multihashing.functions[code]) {\n    throw errcode(new Error(\"multihash function '\".concat(alg, \"' not yet supported\")), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');\n  }\n\n  return Multihashing.functions[code];\n};\n/**\r\n * Mapping of multihash codes to their hashing functions.\r\n *\r\n * @type {Record<number, Digest>}\r\n */\n// @ts-ignore - most of those functions aren't typed\n\n\nMultihashing.functions = {\n  // identity\n  0x00: crypto.identity,\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}; // add blake functions\n\ncrypto.addBlake(Multihashing.functions);\n/**\r\n * @param {Uint8Array} bytes\r\n * @param {Uint8Array} hash\r\n * @returns {Promise<boolean>}\r\n */\n\nMultihashing.validate = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(bytes, hash) {\n    var newHash;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return Multihashing(bytes, multihash.decode(hash).name);\n\n          case 2:\n            newHash = _context2.sent;\n            return _context2.abrupt(\"return\", equals(hash, newHash));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = Multihashing;","map":{"version":3,"names":["errcode","require","multihash","crypto","equals","Multihashing","bytes","alg","length","digest","encode","hash","createHash","slice","e","Error","code","coerceCode","functions","identity","sha1","sha2256","sha2512","sha3512","sha3384","sha3256","sha3224","shake128","shake256","keccak224","keccak256","keccak384","keccak512","murmur3128","murmur332","dblSha2256","addBlake","validate","decode","name","newHash","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multihashing-async/src/index.js"],"sourcesContent":["'use strict'\r\n\r\nconst errcode = require('err-code')\r\nconst multihash = require('multihashes')\r\nconst crypto = require('./crypto')\r\nconst { equals } = require('uint8arrays/equals')\r\n\r\n/**\r\n * @typedef {import(\"./types\").Digest} Digest\r\n * @typedef {import(\"multihashes\").HashName} HashName\r\n */\r\n\r\n/**\r\n * Hash the given `bytes` using the algorithm specified by `alg`.\r\n *\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\r\nasync function Multihashing (bytes, alg, length) {\r\n  const digest = await Multihashing.digest(bytes, alg, length)\r\n  return multihash.encode(digest, alg, length)\r\n}\r\n\r\n/**\r\n * Expose multihash itself, to avoid silly double requires.\r\n */\r\nMultihashing.multihash = multihash\r\n\r\n/**\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\r\nMultihashing.digest = async (bytes, alg, length) => {\r\n  const hash = Multihashing.createHash(alg)\r\n  const digest = await hash(bytes)\r\n  return length ? digest.slice(0, length) : digest\r\n}\r\n\r\n/**\r\n * Creates a function that hashes with the given algorithm\r\n *\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @returns {Digest} - The hash function corresponding to `alg`\r\n */\r\nMultihashing.createHash = function (alg) {\r\n  if (!alg) {\r\n    const e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\r\n    throw e\r\n  }\r\n\r\n  const code = multihash.coerceCode(alg)\r\n  if (!Multihashing.functions[code]) {\r\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\r\n  }\r\n\r\n  return Multihashing.functions[code]\r\n}\r\n\r\n/**\r\n * Mapping of multihash codes to their hashing functions.\r\n *\r\n * @type {Record<number, Digest>}\r\n */\r\n// @ts-ignore - most of those functions aren't typed\r\nMultihashing.functions = {\r\n  // identity\r\n  0x00: crypto.identity,\r\n  // sha1\r\n  0x11: crypto.sha1,\r\n  // sha2-256\r\n  0x12: crypto.sha2256,\r\n  // sha2-512\r\n  0x13: crypto.sha2512,\r\n  // sha3-512\r\n  0x14: crypto.sha3512,\r\n  // sha3-384\r\n  0x15: crypto.sha3384,\r\n  // sha3-256\r\n  0x16: crypto.sha3256,\r\n  // sha3-224\r\n  0x17: crypto.sha3224,\r\n  // shake-128\r\n  0x18: crypto.shake128,\r\n  // shake-256\r\n  0x19: crypto.shake256,\r\n  // keccak-224\r\n  0x1A: crypto.keccak224,\r\n  // keccak-256\r\n  0x1B: crypto.keccak256,\r\n  // keccak-384\r\n  0x1C: crypto.keccak384,\r\n  // keccak-512\r\n  0x1D: crypto.keccak512,\r\n  // murmur3-128\r\n  0x22: crypto.murmur3128,\r\n  // murmur3-32\r\n  0x23: crypto.murmur332,\r\n  // dbl-sha2-256\r\n  0x56: crypto.dblSha2256\r\n}\r\n\r\n// add blake functions\r\ncrypto.addBlake(Multihashing.functions)\r\n\r\n/**\r\n * @param {Uint8Array} bytes\r\n * @param {Uint8Array} hash\r\n * @returns {Promise<boolean>}\r\n */\r\nMultihashing.validate = async (bytes, hash) => {\r\n  const newHash = await Multihashing(bytes, multihash.decode(hash).name)\r\n\r\n  return equals(hash, newHash)\r\n}\r\n\r\nmodule.exports = Multihashing\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}