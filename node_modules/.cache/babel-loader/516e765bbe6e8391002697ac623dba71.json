{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst multihash = require('multihashes');\n\nconst crypto = require('./crypto');\n\nconst {\n  equals\n} = require('uint8arrays/equals');\n/**\r\n * @typedef {import(\"./types\").Digest} Digest\r\n * @typedef {import(\"multihashes\").HashName} HashName\r\n */\n\n/**\r\n * Hash the given `bytes` using the algorithm specified by `alg`.\r\n *\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\n\n\nasync function Multihashing(bytes, alg, length) {\n  const digest = await Multihashing.digest(bytes, alg, length);\n  return multihash.encode(digest, alg, length);\n}\n/**\r\n * Expose multihash itself, to avoid silly double requires.\r\n */\n\n\nMultihashing.multihash = multihash;\n/**\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\n\nMultihashing.digest = async (bytes, alg, length) => {\n  const hash = Multihashing.createHash(alg);\n  const digest = await hash(bytes);\n  return length ? digest.slice(0, length) : digest;\n};\n/**\r\n * Creates a function that hashes with the given algorithm\r\n *\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @returns {Digest} - The hash function corresponding to `alg`\r\n */\n\n\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    const e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');\n    throw e;\n  }\n\n  const code = multihash.coerceCode(alg);\n\n  if (!Multihashing.functions[code]) {\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');\n  }\n\n  return Multihashing.functions[code];\n};\n/**\r\n * Mapping of multihash codes to their hashing functions.\r\n *\r\n * @type {Record<number, Digest>}\r\n */\n// @ts-ignore - most of those functions aren't typed\n\n\nMultihashing.functions = {\n  // identity\n  0x00: crypto.identity,\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}; // add blake functions\n\ncrypto.addBlake(Multihashing.functions);\n/**\r\n * @param {Uint8Array} bytes\r\n * @param {Uint8Array} hash\r\n * @returns {Promise<boolean>}\r\n */\n\nMultihashing.validate = async (bytes, hash) => {\n  const newHash = await Multihashing(bytes, multihash.decode(hash).name);\n  return equals(hash, newHash);\n};\n\nmodule.exports = Multihashing;","map":{"version":3,"names":["errcode","require","multihash","crypto","equals","Multihashing","bytes","alg","length","digest","encode","hash","createHash","slice","e","Error","code","coerceCode","functions","identity","sha1","sha2256","sha2512","sha3512","sha3384","sha3256","sha3224","shake128","shake256","keccak224","keccak256","keccak384","keccak512","murmur3128","murmur332","dblSha2256","addBlake","validate","newHash","decode","name","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multihashing-async/src/index.js"],"sourcesContent":["'use strict'\r\n\r\nconst errcode = require('err-code')\r\nconst multihash = require('multihashes')\r\nconst crypto = require('./crypto')\r\nconst { equals } = require('uint8arrays/equals')\r\n\r\n/**\r\n * @typedef {import(\"./types\").Digest} Digest\r\n * @typedef {import(\"multihashes\").HashName} HashName\r\n */\r\n\r\n/**\r\n * Hash the given `bytes` using the algorithm specified by `alg`.\r\n *\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\r\nasync function Multihashing (bytes, alg, length) {\r\n  const digest = await Multihashing.digest(bytes, alg, length)\r\n  return multihash.encode(digest, alg, length)\r\n}\r\n\r\n/**\r\n * Expose multihash itself, to avoid silly double requires.\r\n */\r\nMultihashing.multihash = multihash\r\n\r\n/**\r\n * @param {Uint8Array} bytes - The value to hash.\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @param {number} [length] - Optionally trim the result to this length.\r\n * @returns {Promise<Uint8Array>}\r\n */\r\nMultihashing.digest = async (bytes, alg, length) => {\r\n  const hash = Multihashing.createHash(alg)\r\n  const digest = await hash(bytes)\r\n  return length ? digest.slice(0, length) : digest\r\n}\r\n\r\n/**\r\n * Creates a function that hashes with the given algorithm\r\n *\r\n * @param {HashName} alg - The algorithm to use eg 'sha1'\r\n * @returns {Digest} - The hash function corresponding to `alg`\r\n */\r\nMultihashing.createHash = function (alg) {\r\n  if (!alg) {\r\n    const e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\r\n    throw e\r\n  }\r\n\r\n  const code = multihash.coerceCode(alg)\r\n  if (!Multihashing.functions[code]) {\r\n    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\r\n  }\r\n\r\n  return Multihashing.functions[code]\r\n}\r\n\r\n/**\r\n * Mapping of multihash codes to their hashing functions.\r\n *\r\n * @type {Record<number, Digest>}\r\n */\r\n// @ts-ignore - most of those functions aren't typed\r\nMultihashing.functions = {\r\n  // identity\r\n  0x00: crypto.identity,\r\n  // sha1\r\n  0x11: crypto.sha1,\r\n  // sha2-256\r\n  0x12: crypto.sha2256,\r\n  // sha2-512\r\n  0x13: crypto.sha2512,\r\n  // sha3-512\r\n  0x14: crypto.sha3512,\r\n  // sha3-384\r\n  0x15: crypto.sha3384,\r\n  // sha3-256\r\n  0x16: crypto.sha3256,\r\n  // sha3-224\r\n  0x17: crypto.sha3224,\r\n  // shake-128\r\n  0x18: crypto.shake128,\r\n  // shake-256\r\n  0x19: crypto.shake256,\r\n  // keccak-224\r\n  0x1A: crypto.keccak224,\r\n  // keccak-256\r\n  0x1B: crypto.keccak256,\r\n  // keccak-384\r\n  0x1C: crypto.keccak384,\r\n  // keccak-512\r\n  0x1D: crypto.keccak512,\r\n  // murmur3-128\r\n  0x22: crypto.murmur3128,\r\n  // murmur3-32\r\n  0x23: crypto.murmur332,\r\n  // dbl-sha2-256\r\n  0x56: crypto.dblSha2256\r\n}\r\n\r\n// add blake functions\r\ncrypto.addBlake(Multihashing.functions)\r\n\r\n/**\r\n * @param {Uint8Array} bytes\r\n * @param {Uint8Array} hash\r\n * @returns {Promise<boolean>}\r\n */\r\nMultihashing.validate = async (bytes, hash) => {\r\n  const newHash = await Multihashing(bytes, multihash.decode(hash).name)\r\n\r\n  return equals(hash, newHash)\r\n}\r\n\r\nmodule.exports = Multihashing\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}