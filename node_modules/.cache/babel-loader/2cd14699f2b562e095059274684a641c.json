{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar uint8ArrayEquals = require('uint8arrays/equals');\n\nvar rmLink = function rmLink(dagNode, nameOrCid) {\n  var predicate = null; // It's a name\n\n  if (typeof nameOrCid === 'string') {\n    predicate = function predicate(link) {\n      return link.Name === nameOrCid;\n    };\n  } else if (nameOrCid instanceof Uint8Array || CID.isCID(nameOrCid)) {\n    predicate = function predicate(link) {\n      return uint8ArrayEquals(link.Hash, nameOrCid);\n    };\n  }\n\n  if (predicate) {\n    var links = dagNode.Links;\n    var index = 0;\n\n    while (index < links.length) {\n      var link = links[index];\n\n      if (predicate(link)) {\n        links.splice(index, 1);\n      } else {\n        index++;\n      }\n    }\n  } else {\n    throw new Error('second arg needs to be a name or CID');\n  }\n};\n\nmodule.exports = rmLink;","map":{"version":3,"names":["CID","require","uint8ArrayEquals","rmLink","dagNode","nameOrCid","predicate","link","Name","Uint8Array","isCID","Hash","links","Links","index","length","splice","Error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-dag-pb/src/dag-node/rmLink.js"],"sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst uint8ArrayEquals = require('uint8arrays/equals')\r\n\r\nconst rmLink = (dagNode, nameOrCid) => {\r\n  let predicate = null\r\n\r\n  // It's a name\r\n  if (typeof nameOrCid === 'string') {\r\n    predicate = (link) => link.Name === nameOrCid\r\n  } else if (nameOrCid instanceof Uint8Array || CID.isCID(nameOrCid)) {\r\n    predicate = (link) => uint8ArrayEquals(link.Hash, nameOrCid)\r\n  }\r\n\r\n  if (predicate) {\r\n    const links = dagNode.Links\r\n    let index = 0\r\n    while (index < links.length) {\r\n      const link = links[index]\r\n      if (predicate(link)) {\r\n        links.splice(index, 1)\r\n      } else {\r\n        index++\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('second arg needs to be a name or CID')\r\n  }\r\n}\r\n\r\nmodule.exports = rmLink\r\n"],"mappings":"AAAA;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AAEA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACC,OAAD,EAAUC,SAAV,EAAwB;EACrC,IAAIC,SAAS,GAAG,IAAhB,CADqC,CAGrC;;EACA,IAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;IACjCC,SAAS,GAAG,mBAACC,IAAD;MAAA,OAAUA,IAAI,CAACC,IAAL,KAAcH,SAAxB;IAAA,CAAZ;EACD,CAFD,MAEO,IAAIA,SAAS,YAAYI,UAArB,IAAmCT,GAAG,CAACU,KAAJ,CAAUL,SAAV,CAAvC,EAA6D;IAClEC,SAAS,GAAG,mBAACC,IAAD;MAAA,OAAUL,gBAAgB,CAACK,IAAI,CAACI,IAAN,EAAYN,SAAZ,CAA1B;IAAA,CAAZ;EACD;;EAED,IAAIC,SAAJ,EAAe;IACb,IAAMM,KAAK,GAAGR,OAAO,CAACS,KAAtB;IACA,IAAIC,KAAK,GAAG,CAAZ;;IACA,OAAOA,KAAK,GAAGF,KAAK,CAACG,MAArB,EAA6B;MAC3B,IAAMR,IAAI,GAAGK,KAAK,CAACE,KAAD,CAAlB;;MACA,IAAIR,SAAS,CAACC,IAAD,CAAb,EAAqB;QACnBK,KAAK,CAACI,MAAN,CAAaF,KAAb,EAAoB,CAApB;MACD,CAFD,MAEO;QACLA,KAAK;MACN;IACF;EACF,CAXD,MAWO;IACL,MAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;EACD;AACF,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,GAAiBhB,MAAjB"},"metadata":{},"sourceType":"script"}