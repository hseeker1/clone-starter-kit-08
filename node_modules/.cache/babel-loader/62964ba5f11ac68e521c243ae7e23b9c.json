{"ast":null,"code":"/**\r\n * Implementation of the multicodec specification.\r\n *\r\n * @module multicodec\r\n * @example\r\n * const multicodec = require('multicodec')\r\n *\r\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\r\n * // prefixedProtobuf 0x50...\r\n *\r\n */\n'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst util = require('./util');\n\nconst {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n} = require('./maps');\n/**\r\n * Prefix a buffer with a multicodec-packed.\r\n *\r\n * @param {CodecName|Uint8Array} multicodecStrOrCode\r\n * @param {Uint8Array} data\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction addPrefix(multicodecStrOrCode, data) {\n  let prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n/**\r\n * Decapsulate the multicodec-packed prefix from the data.\r\n *\r\n * @param {Uint8Array} data\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction rmPrefix(data) {\n  varint.decode(\n  /** @type {Buffer} */\n  data);\n  return data.slice(varint.decode.bytes);\n}\n/**\r\n * Get the codec name of the prefixed data.\r\n *\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecName}\r\n */\n\n\nfunction getNameFromData(prefixedData) {\n  const code =\n  /** @type {CodecCode} */\n  varint.decode(\n  /** @type {Buffer} */\n  prefixedData);\n  const name = codeToName[code];\n\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`);\n  }\n\n  return name;\n}\n/**\r\n * Get the codec name from a code.\r\n *\r\n * @param {CodecCode} codec\r\n * @returns {CodecName}\r\n */\n\n\nfunction getNameFromCode(codec) {\n  return codeToName[codec];\n}\n/**\r\n * Get the code of the codec\r\n *\r\n * @param {CodecName} name\r\n * @returns {CodecCode}\r\n */\n\n\nfunction getCodeFromName(name) {\n  const code = nameToCode[name];\n\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`);\n  }\n\n  return code;\n}\n/**\r\n * Get the code of the prefixed data.\r\n *\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecCode}\r\n */\n\n\nfunction getCodeFromData(prefixedData) {\n  return (\n    /** @type {CodecCode} */\n    varint.decode(\n    /** @type {Buffer} */\n    prefixedData)\n  );\n}\n/**\r\n * Get the code as varint of a codec name.\r\n *\r\n * @param {CodecName} name\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction getVarintFromName(name) {\n  const code = nameToVarint[name];\n\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`);\n  }\n\n  return code;\n}\n/**\r\n * Get the varint of a code.\r\n *\r\n * @param {CodecCode} code\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction getVarintFromCode(code) {\n  return util.varintEncode(code);\n}\n/**\r\n * Get the codec name of the prefixed data.\r\n *\r\n * @deprecated use getNameFromData instead.\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecName}\r\n */\n\n\nfunction getCodec(prefixedData) {\n  return getNameFromData(prefixedData);\n}\n/**\r\n * Get the codec name from a code.\r\n *\r\n * @deprecated use getNameFromCode instead.\r\n * @param {CodecCode} codec\r\n * @returns {CodecName}\r\n */\n\n\nfunction getName(codec) {\n  return getNameFromCode(codec);\n}\n/**\r\n * Get the code of the codec\r\n *\r\n * @deprecated use getCodeFromName instead.\r\n * @param {CodecName} name\r\n * @returns {CodecCode}\r\n */\n\n\nfunction getNumber(name) {\n  return getCodeFromName(name);\n}\n/**\r\n * Get the code of the prefixed data.\r\n *\r\n * @deprecated use getCodeFromData instead.\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecCode}\r\n */\n\n\nfunction getCode(prefixedData) {\n  return getCodeFromData(prefixedData);\n}\n/**\r\n * Get the code as varint of a codec name.\r\n *\r\n * @deprecated use getVarintFromName instead.\r\n * @param {CodecName} name\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction getCodeVarint(name) {\n  return getVarintFromName(name);\n}\n/**\r\n * Get the varint of a code.\r\n *\r\n * @deprecated use getVarintFromCode instead.\r\n * @param {CodecCode} code\r\n * @returns {Array.<number>}\r\n */\n\n\nfunction getVarint(code) {\n  return Array.from(getVarintFromCode(code));\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n};","map":{"version":3,"names":["varint","require","concat","uint8ArrayConcat","util","nameToVarint","constantToCode","nameToCode","codeToName","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getNameFromData","prefixedData","code","name","undefined","getNameFromCode","codec","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","getCodec","getName","getNumber","getCode","getCodeVarint","getVarint","Array","from","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\r\n * Implementation of the multicodec specification.\r\n *\r\n * @module multicodec\r\n * @example\r\n * const multicodec = require('multicodec')\r\n *\r\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\r\n * // prefixedProtobuf 0x50...\r\n *\r\n */\r\n'use strict'\r\n\r\n/** @typedef {import('./generated-types').CodecName} CodecName */\r\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\r\n\r\nconst varint = require('varint')\r\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\r\nconst util = require('./util')\r\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\r\n\r\n/**\r\n * Prefix a buffer with a multicodec-packed.\r\n *\r\n * @param {CodecName|Uint8Array} multicodecStrOrCode\r\n * @param {Uint8Array} data\r\n * @returns {Uint8Array}\r\n */\r\nfunction addPrefix (multicodecStrOrCode, data) {\r\n  let prefix\r\n\r\n  if (multicodecStrOrCode instanceof Uint8Array) {\r\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\r\n  } else {\r\n    if (nameToVarint[multicodecStrOrCode]) {\r\n      prefix = nameToVarint[multicodecStrOrCode]\r\n    } else {\r\n      throw new Error('multicodec not recognized')\r\n    }\r\n  }\r\n\r\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\r\n}\r\n\r\n/**\r\n * Decapsulate the multicodec-packed prefix from the data.\r\n *\r\n * @param {Uint8Array} data\r\n * @returns {Uint8Array}\r\n */\r\nfunction rmPrefix (data) {\r\n  varint.decode(/** @type {Buffer} */(data))\r\n  return data.slice(varint.decode.bytes)\r\n}\r\n\r\n/**\r\n * Get the codec name of the prefixed data.\r\n *\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecName}\r\n */\r\nfunction getNameFromData (prefixedData) {\r\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\r\n  const name = codeToName[code]\r\n  if (name === undefined) {\r\n    throw new Error(`Code \"${code}\" not found`)\r\n  }\r\n  return name\r\n}\r\n\r\n/**\r\n * Get the codec name from a code.\r\n *\r\n * @param {CodecCode} codec\r\n * @returns {CodecName}\r\n */\r\nfunction getNameFromCode (codec) {\r\n  return codeToName[codec]\r\n}\r\n\r\n/**\r\n * Get the code of the codec\r\n *\r\n * @param {CodecName} name\r\n * @returns {CodecCode}\r\n */\r\nfunction getCodeFromName (name) {\r\n  const code = nameToCode[name]\r\n  if (code === undefined) {\r\n    throw new Error(`Codec \"${name}\" not found`)\r\n  }\r\n  return code\r\n}\r\n\r\n/**\r\n * Get the code of the prefixed data.\r\n *\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecCode}\r\n */\r\nfunction getCodeFromData (prefixedData) {\r\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\r\n}\r\n\r\n/**\r\n * Get the code as varint of a codec name.\r\n *\r\n * @param {CodecName} name\r\n * @returns {Uint8Array}\r\n */\r\nfunction getVarintFromName (name) {\r\n  const code = nameToVarint[name]\r\n  if (code === undefined) {\r\n    throw new Error(`Codec \"${name}\" not found`)\r\n  }\r\n  return code\r\n}\r\n\r\n/**\r\n * Get the varint of a code.\r\n *\r\n * @param {CodecCode} code\r\n * @returns {Uint8Array}\r\n */\r\nfunction getVarintFromCode (code) {\r\n  return util.varintEncode(code)\r\n}\r\n\r\n/**\r\n * Get the codec name of the prefixed data.\r\n *\r\n * @deprecated use getNameFromData instead.\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecName}\r\n */\r\nfunction getCodec (prefixedData) {\r\n  return getNameFromData(prefixedData)\r\n}\r\n\r\n/**\r\n * Get the codec name from a code.\r\n *\r\n * @deprecated use getNameFromCode instead.\r\n * @param {CodecCode} codec\r\n * @returns {CodecName}\r\n */\r\nfunction getName (codec) {\r\n  return getNameFromCode(codec)\r\n}\r\n\r\n/**\r\n * Get the code of the codec\r\n *\r\n * @deprecated use getCodeFromName instead.\r\n * @param {CodecName} name\r\n * @returns {CodecCode}\r\n */\r\nfunction getNumber (name) {\r\n  return getCodeFromName(name)\r\n}\r\n\r\n/**\r\n * Get the code of the prefixed data.\r\n *\r\n * @deprecated use getCodeFromData instead.\r\n * @param {Uint8Array} prefixedData\r\n * @returns {CodecCode}\r\n */\r\nfunction getCode (prefixedData) {\r\n  return getCodeFromData(prefixedData)\r\n}\r\n\r\n/**\r\n * Get the code as varint of a codec name.\r\n *\r\n * @deprecated use getVarintFromName instead.\r\n * @param {CodecName} name\r\n * @returns {Uint8Array}\r\n */\r\nfunction getCodeVarint (name) {\r\n  return getVarintFromName(name)\r\n}\r\n\r\n/**\r\n * Get the varint of a code.\r\n *\r\n * @deprecated use getVarintFromCode instead.\r\n * @param {CodecCode} code\r\n * @returns {Array.<number>}\r\n */\r\nfunction getVarint (code) {\r\n  return Array.from(getVarintFromCode(code))\r\n}\r\n\r\nmodule.exports = {\r\n  addPrefix,\r\n  rmPrefix,\r\n  getNameFromData,\r\n  getNameFromCode,\r\n  getCodeFromName,\r\n  getCodeFromData,\r\n  getVarintFromName,\r\n  getVarintFromCode,\r\n  // Deprecated\r\n  getCodec,\r\n  getName,\r\n  getNumber,\r\n  getCode,\r\n  getCodeVarint,\r\n  getVarint,\r\n  // Make the constants top-level constants\r\n  ...constantToCode,\r\n  // Export the maps\r\n  nameToVarint,\r\n  nameToCode,\r\n  codeToName\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}