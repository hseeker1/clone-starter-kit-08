{"ast":null,"code":"/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-eth/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\n/* eslint-disable max-classes-per-file */\nconst _ = require('lodash');\n\nconst core = require('../../caver-core');\n\nconst {\n  formatters\n} = require('../../caver-core-helpers');\n\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nconst MethodBase = require('../../caver-core-method');\n\nconst utils = require('../../caver-utils');\n\nconst AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction');\n/**\r\n * A class that can invoke Klay RPC Calls.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass Klay {\n  constructor() {\n    const _this = this; // sets _requestmanager\n\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    const setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      return true;\n    }; // overwrite setProvider\n\n\n    const setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        arg[_key2] = arguments[_key2];\n      }\n\n      setProvider.apply(_this, arg);\n\n      _this.setRequestManager(_this._requestManager);\n    };\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    class Method extends MethodBase {\n      constructor(options) {\n        options.outputFormatterDisable = true;\n        super(options);\n      }\n\n    }\n\n    const _klaytnCall = [\n    /**\r\n     * Returns the chain ID of the chain.\r\n     *\r\n     * @memberof Klay\r\n     * @method getChainId\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getChainId()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The chain ID of the chain.\r\n     */\n    new Method({\n      name: 'getChainId',\n      call: 'klay_chainID',\n      params: 0\n    }),\n    /**\r\n     * Returns the current price per gas in peb.\r\n     *\r\n     * @memberof Klay\r\n     * @method getGasPrice\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getGasPrice()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The current gas price in peb.\r\n     */\n    new Method({\n      name: 'getGasPrice',\n      call: 'klay_gasPrice',\n      params: 0\n    }),\n    /**\r\n     * Returns the total number of transactions sent from an address.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionCount\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionCount('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address to get the number of transactions from.\r\n     * @param {number|string} [blocNumber] A block number, the string pending for the pending nonce, or the string `earliest` or `latest` as in the default block parameter. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The number of transactions sent from the given address in hex.\r\n     */\n    new Method({\n      name: 'getTransactionCount',\n      call: 'klay_getTransactionCount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a block header by block number.\r\n     *\r\n     * @memberof Klay\r\n     * @method getHeaderByNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getHeaderByNumber(0)\r\n     * const result = await caver.rpc.klay.getHeaderByNumber('latest')\r\n     *\r\n     * @param {string|number|BN|BigNumber} blockNumberOrTag The block number or block tag string to query block header.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Header>} An object includes block header.\r\n     */\n    new Method({\n      name: 'getHeaderByNumber',\n      call: 'klay_getHeaderByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * An object defines the AccountKeyLegacy.\r\n     *\r\n     * @example\r\n     * { keyType: 1, key: {} }\r\n     *\r\n     * @typedef {object} Klay.AccountKeyLegacy\r\n     * @property {number} keyType - The key type number. The AccountKeyLegacy key type is `1`.\r\n     * @property {object} key - The key information object. For AccountKeyLegacy this field will be empty.\r\n     */\n\n    /**\r\n     * An object defines the public key.\r\n     *\r\n     * @typedef {object} Klay.PublicKeyObject\r\n     * @property {string} x - The x point of the public key.\r\n     * @property {string} y - The y point of the public key.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyPublic.\r\n     *\r\n     * @example\r\n     * {\r\n     *     keyType: 2,\r\n     *     key: { x:'0xb9a4b...', y:'0x7a285...' }\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.AccountKeyPublic\r\n     * @property {number} keyType - The key type number. The AccountKeyPublic key type is `2`.\r\n     * @property {Klay.PublicKeyObject} key - The key information object.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyFail.\r\n     *\r\n     * @example\r\n     * { keyType: 3, key:{} }\r\n     *\r\n     * @typedef {object} Klay.AccountKeyFail\r\n     * @property {number} keyType - The key type number. The AccountKeyFail key type is `3`.\r\n     * @property {object} key - The key information object. For AccountKeyFail this field will be empty.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyWeightedMultiSig.\r\n     *\r\n     * @typedef {object} Klay.WeightedPublicKey\r\n     * @property {number} weight - The weight of the key.\r\n     * @property {Klay.PublicKeyObject} key - The public key.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyWeightedMultiSig.\r\n     *\r\n     * @typedef {object} Klay.WeightedMultiSigKey\r\n     * @property {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n     * @property {Array.<Klay.WeightedPublicKey>} keys - An array that defines weighted public keys.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyWeightedMultiSig.\r\n     *\r\n     * @example\r\n     * {\r\n     *     keyType: 4,\r\n     *     key: {\r\n     *         threshold: 2,\r\n     *         keys: [\r\n     *             {\r\n     *                 weight: 1,\r\n     *                 key: { x: '0xae6b7...', y: '0x79ddf...' }\r\n     *             },\r\n     *             {\r\n     *                 weight: 1,\r\n     *                 key: { x: '0xd4256...', y: '0xfc5e7...' }\r\n     *             },\r\n     *             {\r\n     *                 weight: 1,\r\n     *                 key: { x: '0xd653e...', y: '0xe974e...' }\r\n     *             }\r\n     *         ]\r\n     *     }\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.AccountKeyWeightedMultiSig\r\n     * @property {number} keyType - The key type number. The AccountKeyWeightedMultiSig key type is `4`.\r\n     * @property {Klay.WeightedMultiSigKey} key - The key information object. For AccountKeyWeightedMultiSig this field will be defined with threshold and weighted public keys to use.\r\n     */\n\n    /**\r\n     * An object defines the AccountKeyRoleBased.\r\n     *\r\n     * @example\r\n     * {\r\n     *     keyType: 5,\r\n     *     key: [\r\n     *         {\r\n     *             key: { x: '0x81965...', y: '0x18242...' },\r\n     *             keyType: 2\r\n     *         },\r\n     *         {\r\n     *             key: { x: '0x73363...', y: '0xfc3e3...' },\r\n     *             keyType: 2\r\n     *         },\r\n     *         {\r\n     *             key: { x: '0x95c92...', y: '0xef783...' },\r\n     *             keyType: 2\r\n     *         }\r\n     *     ]\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.AccountKeyRoleBased\r\n     * @property {number} keyType - The key type number. The AccountKeyRoleBased key type is `5`.\r\n     * @property {Array.<Klay.AccountKeyLegacy|Klay.AccountKeyPublic|Klay.AccountKeyFail|Klay.AccountKeyWeightedMultiSig>} key - The key information object. AccountKeyRoleBased defines account key for each roles.\r\n     */\n\n    /**\r\n     * An account key type.\r\n     *\r\n     * @typedef {Klay.AccountKeyLegacy|Klay.AccountKeyPublic|Klay.AccountKeyFail|Klay.AccountKeyWeightedMultiSig|Klay.AccountKeyRoleBased} Klay.AccountKey\r\n     */\n\n    /**\r\n     * Returns AccountKey of a given address.\r\n     * If the account has {@link https://docs.klaytn.com/klaytn/design/accounts#accountkeylegacy|AccountKeyLegacy} or the account of the given address is a {@link https://docs.klaytn.com/klaytn/design/accounts#smart-contract-accounts-scas|Smart Contract Account}, it will return an empty key value.\r\n     * Please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|Account Key} for more details.\r\n     *\r\n     * @memberof Klay\r\n     * @method getAccountKey\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getAccountKey('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Klaytn account from which you want to get an object of AccountKey information.\r\n     * @param {number|string} [blocNumber] A block number, the string pending for the pending nonce, or the string `earliest` or `latest` as in the default block parameter. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.AccountKey>} An object that contains AccountKey information. Each AccountKey type has different attributes.\r\n     */\n    new Method({\n      name: 'getAccountKey',\n      call: 'klay_getAccountKey',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * An object defines the signature data from the Node.\r\n     *\r\n     * @typedef {object} Klay.SignatureData\r\n     * @property {string} V - V contains ECDSA recovery id.\r\n     * @property {string} R - R contains ECDSA signature r.\r\n     * @property {string} S - S contains ECDSA signature s.\r\n     */\n\n    /**\r\n     * An object defines the Transaction from the Node.\r\n     *\r\n     * @typedef {object} Klay.Transaction\r\n     * @property {string} blockHash - Hash of the block where this transaction was in.\r\n     * @property {string} blockNumber - Block number where this transaction was in.\r\n     * @property {string} [codeFormat] - The code format of smart contract code.\r\n     * @property {string} [feePayer] - Address of the fee payer.\r\n     * @property {Array.<Klay.SignatureData>} [feePayerSignatures] - An array of fee payer's signature objects. A signature object contains three fields (V, R, and S)\r\n     * @property {string} [feeRatio] - Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.\r\n     * @property {string} from - Address of the sender.\r\n     * @property {string} gas - Gas provided by the sender.\r\n     * @property {string} gasPrice - Gas price provided by the sender in peb.\r\n     * @property {string} hash - Hash of the transaction.\r\n     * @property {boolean} [humanReadable] - `true` if the address is humanReadable, `false` if the address is not humanReadable.\r\n     * @property {string} [key] - The RLP-encoded AccountKey used to update AccountKey of an Klaytn account. See {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|AccountKey} for more details.\r\n     * @property {string} [input] - The data sent along with the transaction.\r\n     * @property {string} nonce - The number of transactions made by the sender prior to this one.\r\n     * @property {string} senderTxHash - Hash of the tx without the fee payer's address and signature. This value is always the same as the value of `hash` for non-fee-delegated transactions.\r\n     * @property {Array.<Klay.SignatureData>} signatures - An array of signature objects. A signature object contains three fields (V, R, and S).\r\n     * @property {string} to - Address of the receiver. null when it is a contract deploying transaction.\r\n     * @property {string} transactionIndex - Integer of the transaction index position in the block.\r\n     * @property {string} type - A string representing the type of the transaction.\r\n     * @property {number} typeInt - An integer representing the type of the transaction.\r\n     * @property {string} value - Value transferred in peb.\r\n     */\n\n    /**\r\n     * Returns the information about a transaction requested by transaction hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionByHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n     *\r\n     * @param {string} transactionHash A transaction hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object, or null when no transaction was found.\r\n     */\n    new Method({\n      name: 'getTransactionByHash',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }),\n    /**\r\n     * Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.\r\n     * Since Klaytn has a fixed gas price, this `caver.rpc.klay.getMaxPriorityFeePerGas` returns the gas price set by Klaytn.\r\n     *\r\n     * @memberof Klay\r\n     * @method getMaxPriorityFeePerGas\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getMaxPriorityFeePerGas()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} As a suggested value for the gas tip cap, the current Klaytn uses a fixed gas price, so the gasPrice value is returned.\r\n     */\n    new Method({\n      name: 'getMaxPriorityFeePerGas',\n      call: 'klay_maxPriorityFeePerGas',\n      params: 0\n    })];\n    AbstractTransaction._klaytnCall = {};\n    this.klaytnCall = {};\n\n    _.each(_klaytnCall, function (method) {\n      method = new Method(method);\n      method.attachToObject(AbstractTransaction._klaytnCall);\n      method.attachToObject(_this.klaytnCall);\n      method.setRequestManager(_this._requestManager);\n    });\n\n    const methods = [..._klaytnCall, // Account\n\n    /**\r\n     * Returns `true` if the account associated with the address is created in the Klaytn blockchain platform. It returns `false` otherwise.\r\n     *\r\n     * @memberof Klay\r\n     * @method accountCreated\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.accountCreated('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of the account you want to query to see if it has been created on the network.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} The existence of an input address in the Klaytn.\r\n     */\n    new Method({\n      name: 'accountCreated',\n      call: 'klay_accountCreated',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a list of addresses owned by the Klaytn Node.\r\n     *\r\n     * @memberof Klay\r\n     * @method getAccounts\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getAccounts()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<string>>} An array of addresses owned by the Klaytn Node.\r\n     */\n    new Method({\n      name: 'getAccounts',\n      call: 'klay_accounts',\n      params: 0\n    }),\n    /**\r\n     * Encodes an object that contains AccountKey information using the Recursive Length Prefix (RLP) encoding scheme. Also you can use {@link Account#getRLPEncodingAccountKey|account.getRLPEncodingAccountKey} to get RLP-encoded AccountKey.\r\n     *\r\n     * @memberof Klay\r\n     * @method encodeAccountKey\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Using Klay.AccountKey(AccountKeyLegacy)\r\n     * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 1, key: {} })\r\n     * // Using Klay.AccountKey(AccountKeyPublic)\r\n     * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 2, key: { x: '0xdbac8...', y: '0x906d7...' } })\r\n     * // Using Klay.AccountKey(AccountKeyFail)\r\n     * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 3, key: {} })\r\n     * // Using Klay.AccountKey(AccountKeyWeightedMultiSig)\r\n     * const result = await caver.rpc.klay.encodeAccountKey({\r\n     *     keyType: 4,\r\n     *     key: {\r\n     *         threshold: 2,\r\n     *         keys: [\r\n     *             { weight: 1, key: { x: '0xc734b...', y: '0x61a44...' } }\r\n     *             { weight: 1, key: { x: '0x12d45...', y: '0x8ef35...' } }\r\n     *         ]\r\n     *     }\r\n     * })\r\n     * // Using Klay.AccountKey(AccountKeyLegacy)\r\n     * const result = await caver.rpc.klay.encodeAccountKey({\r\n     *     keyType: 5,\r\n     *     key: [\r\n     *         { keyType: 2, key: { x: '0xe4a01...', y: '0xa5735...' } },\r\n     *         {\r\n     *             keyType: 4,\r\n     *             key: {\r\n     *                 threshold: 2,\r\n     *                 keys: [\r\n     *                     { weight: 1, key: { x: '0xe4a01...', y: '0xa5735...' } },\r\n     *                     { weight: 1, key: { x: '0x36f63...', y: '0x6fdf9...' } },\r\n     *                 ],\r\n     *             },\r\n     *         },\r\n     *         { keyType: 2, key: { x: '0xc8785...', y: '0x94c27...' } },\r\n     *     ],\r\n     * })\r\n     *\r\n     * // Using Account.AccountKey\r\n     * const accountKey = caver.account.create('0x{address in hex}', '0xf1d2e...').accountKey\r\n     * const result = await caver.rpc.klay.encodeAccountKey(accountKey)\r\n     *\r\n     * @param {Klay.AccountKey|Account.AccountKey} accountKey An object defines `keyType` and `key` inside or an instance of AccountKey.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} An RLP-encoded AccountKey.\r\n     */\n    new Method({\n      name: 'encodeAccountKey',\n      call: 'klay_encodeAccountKey',\n      params: 1,\n      inputFormatter: [formatters.inputAccountKeyFormatter]\n    }),\n    /**\r\n     * Decodes An RLP-encoded AccountKey. Also you can use {@link AccountKeyDecoder.decode|caver.account.accountKey.decode} to decode An RLP-encoded AccountKey.\r\n     *\r\n     * @memberof Klay\r\n     * @method decodeAccountKey\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Decode an accountKeyLegacy\r\n     * const result = await caver.rpc.klay.decodeAccountKey('0x01c0')\r\n     * // Decode an accountKeyPublic\r\n     * const result = await caver.rpc.klay.decodeAccountKey('0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8')\r\n     * // Decode an accountKeyFail\r\n     * const result = await caver.rpc.klay.decodeAccountKey('0x03c0')\r\n     * // Decode an accountKeyWeightedMultiSig\r\n     * const result = await caver.rpc.klay.decodeAccountKey('0x04f84b02f848e301a102c734b50ddb229be5e929fc4aa8080ae8240a802d23d3290e5e6156ce029b110ee301a10212d45f1cc56fbd6cd8fc877ab63b5092ac77db907a8a42c41dad3e98d7c64dfb')\r\n     * // Decode an accountKeyRoleBased\r\n     * const result = await caver.rpc.klay.decodeAccountKey('0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c160')\r\n     *\r\n     * @param {string} encodedKey An RLP-encoded AccountKey.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.AccountKey>} An object defines `keyType` and `key` inside.\r\n     */\n    new Method({\n      name: 'decodeAccountKey',\n      call: 'klay_decodeAccountKey',\n      params: 1\n    }),\n    /**\r\n     * An object defines the detailed information for EOA.\r\n     *\r\n     * @example\r\n     * {\r\n     *     nonce: 0,\r\n     *     balance: '0x',\r\n     *     humanReadable: false,\r\n     *     key: { keyType: 1, key: {} }\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.EOA\r\n     * @property {number} nonce - A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value.\r\n     * @property {string} balance - The amount of KLAY the account has.\r\n     * @property {boolean} humanReadable - A boolean value indicating that the account is associated with a human-readable address. Since {@link https://docs.klaytn.com/klaytn/design/accounts#human-readable-address-hra|HRA} is under development, this value is false for all accounts.\r\n     * @property {Klay.AccountKey} key - The key associated with this account.\r\n     */\n\n    /**\r\n     * An object defines the detailed information for SCA.\r\n     *\r\n     * @example\r\n     * {\r\n     *     nonce: 1,\r\n     *     balance: '0x',\r\n     *     humanReadable: false,\r\n     *     key: { keyType: 3, key: {} },\r\n     *     storageRoot: '0xd0ce6b9ba63cf727d48833bcaf69f398bb353e9a5b6235ac5bb3a8e95ff90ecf',\r\n     *     codeHash: '7pemrmP8fcguH/ut/SYHJoUSecfUIcUyeCpMf0sBYVI=',\r\n     *     codeFormat: 0\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.SCA\r\n     * @property {number} nonce - A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value.\r\n     * @property {string} balance - The amount of KLAY the account has.\r\n     * @property {boolean} humanReadable - A boolean value indicating that the account is associated with a human-readable address. Since {@link https://docs.klaytn.com/klaytn/design/accounts#human-readable-address-hra|HRA} is under development, this value is false for all accounts.\r\n     * @property {Klay.AccountKey} key - The key associated with this account.\r\n     * @property {string} codeHash - The hash of the account's smart contract code. This value is immutable, which means it is set only when the smart contract is created.\r\n     * @property {string} storageRoot - A 256-bit hash of the root of the Merkle Patricia Trie that contains the values of all the storage variables in the account.\r\n     * @property {number} codeFormat - A format of the code in this account. Currently, it supports EVM(0x00) only.\r\n     */\n\n    /**\r\n     * An object defines the Klaytn account.\r\n     *\r\n     * @example\r\n     * // EOA\r\n     * {\r\n     *     accType: 1,\r\n     *     account: {\r\n     *         nonce: 0,\r\n     *         balance: '0x',\r\n     *         humanReadable: false,\r\n     *         key: { keyType: 1, key: {} }\r\n     *     }\r\n     * }\r\n     * // SCA\r\n     * {\r\n     *     accType: 2,\r\n     *     account: {\r\n     *         nonce: 1,\r\n     *         balance: '0x',\r\n     *         humanReadable: false,\r\n     *         key: { keyType: 3, key: {} },\r\n     *         storageRoot: '0xd0ce6b9ba63cf727d48833bcaf69f398bb353e9a5b6235ac5bb3a8e95ff90ecf',\r\n     *         codeHash: '7pemrmP8fcguH/ut/SYHJoUSecfUIcUyeCpMf0sBYVI=',\r\n     *         codeFormat: 0\r\n     *     }\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.Account\r\n     * @property {number} accType - The account type number.\r\n     * @property {Klay.EOA|Klay.SCA} account - The key information object. For AccountKeyLegacy this field will be empty.\r\n     */\n\n    /**\r\n     * Returns the account information of a given address in the Klaytn.\r\n     * For more details about the types of an account in Klaytn, please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-account-types|Klaytn Account Types}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getAccount\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getAccount('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of the account for which you want to get account information.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Account>} An object defines `keyType` and `key` inside.\r\n     */\n    new Method({\n      name: 'getAccount',\n      call: 'klay_getAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the balance of the account of the given address in Klaytn.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBalance\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBalance('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of the account for which you want to get balance.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The current balance for the given address in peb.\r\n     */\n    new Method({\n      name: 'getBalance',\n      call: 'klay_getBalance',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns code at a given address.\r\n     *\r\n     * @memberof Klay\r\n     * @method getCode\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getCode('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address to get the code from.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The code from the given address.\r\n     */\n    new Method({\n      name: 'getCode',\n      call: 'klay_getCode',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns `true` if an input account has a non-empty codeHash at the time of a specific block number.\r\n     * It returns `false` if the account is an EOA or a smart contract account which doesn't have codeHash.\r\n     * Please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#smart-contract-accounts-scas|Smart Contract Account} for more details.\r\n     *\r\n     * @memberof Klay\r\n     * @method isContractAccount\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.isContractAccount('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address you want to check for isContractAccount.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} `true` means the input parameter is an existing smart contract address.\r\n     */\n    new Method({\n      name: 'isContractAccount',\n      call: 'klay_isContractAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Generates signed data specific to the Klaytn.\r\n     * Refer to {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/account#klay_sign|Klaytn Platform API - klay_sign} to know how the signature is generated\r\n     *\r\n     * This API provides the function to sign a message using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n     * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign the message.\r\n     * To sign a transaction with imported account in your Klaytn node, use {@link signTransaction|caver.rpc.klay.signTransaction}.\r\n     *\r\n     * @memberof Klay\r\n     * @method sign\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.sign('0x{address in hex}', '0xdeadbeaf')\r\n     *\r\n     * @param {string} address The address of the imported account to sign the message.\r\n     * @param {string} message Message to sign.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The signature made from an imported account.\r\n     */\n    new Method({\n      name: 'sign',\n      call: 'klay_sign',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputSignFormatter]\n    }), // Block\n\n    /**\r\n     * Returns the number of the most recent block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockNumber()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The number of the most recent block in hex.\r\n     */\n    new Method({\n      name: 'getBlockNumber',\n      call: 'klay_blockNumber',\n      params: 0\n    }),\n    /**\r\n     * An object for block from Klaytn.\r\n     *\r\n     * @example\r\n     * {\r\n     *     blockscore: '0x1',\r\n     *     extraData: '0xd883010602846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841dd5a72e9f6af1f59f18efd9d205314bed1077be5083318274e6284adf82806f3339d0f88d8cb97f297b9f6a239149224a4f26e01a5692f2392ffb0ab73b10d9600f8c9b8417a43d087a58a32299f4d5a647371e31ecd1298c1cdb5921b5e575a93cfd7d65f470f2fbd936b1b80206c73daba3fec2038bc25d521bbc21b428d3067598bd95501b8411678bb3221f448d4f9e2dd3e7bda57b0da954eb5f1dff350751b6fd895b4643f3f14b56742fe091db68c162b3e1a9dd17676a9f4a95445e295f00d1d146f49e801b841df4fef80626bc00f2a0048d7718a499defece1ac3e849aefc5c04f2691ec7951377b7022d8d6b20fecce5e03f5ea891597e0d9aadbba0f2f82c5d7230806a62c01',\r\n     *     gasUsed: '0x3ea49',\r\n     *     governanceData: '0x',\r\n     *     hash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *     logsBloom: '0x00000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000008000000000000000000000000000000000000000000000000000200008000000000000000000000000000000000000004010000000020000000000000000000800000000000000002000000010000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000002000000000000000000020000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000',\r\n     *     number: '0x3f79aa7',\r\n     *     parentHash: '0x777d344c8c59c4d8d0041bb4c2ee66e95ec110303fb59d3e329f80e7a9c9c617',\r\n     *     receiptsRoot: '0xffbae3190f858531ff785bcbdc70278d91c3d9becdd8b134b0ab7974b9ef3641',\r\n     *     reward: '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d',\r\n     *     size: '0x507',\r\n     *     stateRoot: '0xa60d0868bd41b63b4fd67e5a8f801c5949e89a8994a13426747890b77d6bc0c4',\r\n     *     timestamp: '0x610b3164',\r\n     *     timestampFoS: '0xc',\r\n     *     totalBlockScore: '0x3f79aa8',\r\n     *     transactions: [\r\n     *         {\r\n     *             blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *             blockNumber: '0x3f79aa7',\r\n     *             feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n     *             feePayerSignatures: [{\r\n     *                 V: '0x7f5',\r\n     *                 R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n     *                 S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n     *             }],\r\n     *             from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *             gas: '0x2dc6c0',\r\n     *             gasPrice: '0x5d21dba00',\r\n     *             hash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *             input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n     *             nonce: '0x0',\r\n     *             senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n     *             signatures: [  {\r\n     *                 V: '0x7f6',\r\n     *                 R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n     *                 S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n     *             }],\r\n     *             to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *             transactionIndex: '0x0',\r\n     *             type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n     *             typeInt: 49,\r\n     *             value: '0x0'\r\n     *         }\r\n     *     ],\r\n     *     transactionsRoot: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *     voteData: '0x'\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.Block\r\n     * @property {string} blockscore - The difficulty of mining in the blockchain network. The use of `blockScore` differs from the consensus of the network. Always 1 in the BFT consensus engine.\r\n     * @property {string} extraData - The \"extra data\" field of this block.\r\n     * @property {string} gasUsed - The gas in total that was used by all transactions in this block.\r\n     * @property {string} governanceData - RLP encoded governance configuration\r\n     * @property {string} hash - Hash of the block. `null` when it is a pending block.\r\n     * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is a pending block.\r\n     * @property {string} number - The block number. `null` when it is a pending block.\r\n     * @property {string} parentHash - Hash of the parent block.\r\n     * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n     * @property {string} reward - The address of the beneficiary to whom the block rewards were given\r\n     * @property {string} size - Integer the size of this block in bytes.\r\n     * @property {string} stateRoot - The root of the final state trie of the block.\r\n     * @property {string} timestamp - The unix timestamp for when the block was collated.\r\n     * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n     * @property {string} totalBlockScore - Integer of the total blockScore of the chain until this block.\r\n     * @property {Array.<Klay.Transaction>} transactions - Array of transaction objects, or 32-byte transaction hashes depending on the `returnTransactionObjects` parameter.\r\n     * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n     * @property {string} voteData - RLP encoded governance vote of the proposer.\r\n     * @property {string} [baseFeePerGas] - Base fee per gas.\r\n     */\n\n    /**\r\n     * Returns information about a block.\r\n     * If parameter is hex string, this will use {@link Klay#getBlockByHash|caver.rpc.klay.getBlockByHash}, if paramter is number type, this will use {@link Klay#getBlockByNumber|caver.rpc.klay.getBlockByNumber}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlock\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Use `caver.rpc.klay.getBlockByNumber`\r\n     * const result = await caver.rpc.klay.getBlock(0)\r\n     * // Use `caver.rpc.klay.getBlockByHash`\r\n     * const result = await caver.rpc.klay.getBlock('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n     *\r\n     * @param {string|number} blockHashOrNumber The block hash or block number.\r\n     * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Block>} An object includes block.\r\n     */\n    new Method({\n      name: 'getBlock',\n      call: 'klay_getBlockByNumber',\n      hexCall: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }),\n    /**\r\n     * Returns information about a block by block number.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockByNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockByNumber(0)\r\n     *\r\n     * @param {number} blockNumber The block number.\r\n     * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Block>} An object includes block.\r\n     */\n    new Method({\n      name: 'getBlockByNumber',\n      call: 'klay_getBlockByNumber',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }),\n    /**\r\n     * Returns information about a block by block hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockByHash('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n     *\r\n     * @param {string} blockHash The block hash.\r\n     * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Block>} An object includes block.\r\n     */\n    new Method({\n      name: 'getBlockByHash',\n      call: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }),\n    /**\r\n     * An object for block header from Klaytn.\r\n     *\r\n     * @example\r\n     *\r\n     * @typedef {object} Klay.Header\r\n     * @property {string} parentHash - Hash of the parent block.\r\n     * @property {string} reward - The address of the beneficiary to whom the block rewards were given.\r\n     * @property {string} stateRoot - The root of the final state trie of the block.\r\n     * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n     * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n     * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is pending block.\r\n     * @property {string} blockScore - Former difficulty. Always 1 in the BFT consensus engine.\r\n     * @property {string} number - The block number. `null` when it is pending block.\r\n     * @property {string} gasUsed - The total used gas by all transactions in this block.\r\n     * @property {string} timestamp - The Unix timestamp for when the block was collated.\r\n     * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n     * @property {string} extraData - The \"extra data\" field of this block.\r\n     * @property {string} governanceData - RLP encoded governance configuration.\r\n     * @property {string} hash - Hash of the current block.\r\n     * @property {string} [baseFeePerGas] - Base fee per gas.\r\n     * @property {string} [voteData] - RLP encoded governance vote of the proposer.\r\n     */\n\n    /**\r\n     * Returns a block header.\r\n     * If parameter is hex string, this will use {@link Klay#getHeaderByHash|caver.rpc.klay.getHeaderByHash}, if paramter is number type, this will use {@link Klay#getHeaderByNumber|caver.rpc.klay.getHeaderByNumber}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getHeader\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Use `caver.rpc.klay.getHeaderByNumber`\r\n     * const result = await caver.rpc.klay.getHeader(0)\r\n     * // Use `caver.rpc.klay.getHeaderByHash`\r\n     * const result = await caver.rpc.klay.getHeader('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n     *\r\n     * @param {string|number|BN|BigNumber} blockHashOrNumber The block hash or block number to query block header.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Header>} An object includes block header.\r\n     */\n    new Method({\n      name: 'getHeader',\n      call: 'klay_getHeaderByNumber',\n      hexCall: 'klay_getHeaderByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a block header by block number.\r\n     *\r\n     * @memberof Klay\r\n     * @method getHeaderByNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getHeaderByNumber(0)\r\n     * const result = await caver.rpc.klay.getHeaderByNumber('latest')\r\n     *\r\n     * @param {string|number|BN|BigNumber} blockNumberOrTag The block number or block tag string to query block header.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Header>} An object includes block header.\r\n     */\n    new Method({\n      name: 'getHeaderByNumber',\n      call: 'klay_getHeaderByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a block header by block hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getHeaderByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getHeaderByHash('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n     *\r\n     * @param {string} blockHash The block hash to query block header.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Header>} An object includes block header.\r\n     */\n    new Method({\n      name: 'getHeaderByHash',\n      call: 'klay_getHeaderByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * An object for transaction receipt from Klaytn.\r\n     *\r\n     * @example\r\n     * {\r\n     *     blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *     blockNumber: '0x3f79aa7',\r\n     *     contractAddress: null,\r\n     *     feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n     *     feePayerSignatures: [{\r\n     *         V: '0x7f5',\r\n     *         R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n     *         S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n     *     }],\r\n     *     from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *     gas: '0x2dc6c0',\r\n     *     gasPrice: '0x5d21dba00',\r\n     *     gasUsed: '0x3ea49',\r\n     *     hash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *     input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n     *     logs: [{\r\n     *         address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *         topics: [\r\n     *             '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     *             '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n     *             '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *             '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n     *         ],\r\n     *         data: '0x',\r\n     *         blockNumber: '0x3f79aa7',\r\n     *         transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *         transactionIndex: '0x0',\r\n     *         blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *         logIndex: '0x0',\r\n     *         removed: false\r\n     *     }],\r\n     *     logsBloom: '0xr\n     *     nonce: '0x0',\r\n     *     senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n     *     signatures: [{\r\n     *         V: '0x7f6',\r\n     *         R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n     *         S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n     *     }],\r\n     *     to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *     transactionIndex: '0x0',\r\n     *     type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n     *     typeInt: 49,\r\n     *     value: '0x0'\r\n     * }\r\n     *\r\n     * @typedef {Klay.Transaction} Klay.TransactionReceipt\r\n     * @property {string} contractAddress - The contract address created, if the transaction was a contract creation, otherwise `null`.\r\n     * @property {string} gasUsed - The amount of gas used by this specific transaction alone.\r\n     * @property {Array.<Klay.Log>} logs - Array of log objects, which this transaction generated.\r\n     * @property {string} logsBloom - Bloom filter for light clients to quickly retrieve related logs.\r\n     * @property {string} status - `0x1` if the transaction was successful, `0x0` if the Klaytn Virtual Machine reverted the transaction.\r\n     * @property {string} transactionHash - Hash of the transaction.\r\n     */\n\n    /**\r\n     * An object for transaction receipt from Klaytn.\r\n     *\r\n     * @example\r\n     * {\r\n     *     address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *     topics: [\r\n     *         '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     *         '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n     *         '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *         '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n     *     ],\r\n     *     data: '0x',\r\n     *     blockNumber: '0x3f79aa7',\r\n     *     transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *     transactionIndex: '0x0',\r\n     *     blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *     logIndex: '0x0',\r\n     *     removed: false\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.Log\r\n     * @property {string} logIndex - The log index position in the block.\r\n     * @property {string} transactionIndex - The index position of transactions where this log was created from.\r\n     * @property {string} transactionHash - Hash of the transactions this log was created from. null when pending.\r\n     * @property {string} blockHash - Hash of the block where this log was in. `null` when pending.\r\n     * @property {string} blockNumber - The block number where this log was in. `null` when pending.\r\n     * @property {string} address - Address from which this log originated.\r\n     * @property {string} data - Contains the non-indexed arguments of the log.\r\n     * @property {Array.<string>} topics - Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity: The first topic is the hash of the signature of the event (e.g., `Deposit(address,bytes32,uint256)`), except you declared the event with the `anonymous` specifier.).\r\n     */\n\n    /**\r\n     * Returns receipts included in a block identified by block hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockReceipts\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockReceipts('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n     *\r\n     * @param {string} blockHash The block hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<Klay.TransactionReceipt>>} The transaction receipts included in a block. If the target block contains no transaction, an empty array `[]` is returned. For detailed description of transaction receipt, please refer to {@link Klay#getTransactionReceipt|caver.rpc.klay.getTransactionReceipt}.\r\n     */\n    new Method({\n      name: 'getBlockReceipts',\n      call: 'klay_getBlockReceipts',\n      params: 1\n    }),\n    /**\r\n     * Returns the number of transactions in a block.\r\n     * If parameter is hex string, this will use {@link Klay#getBlockTransactionCountByHash|caver.rpc.klay.getBlockTransactionCountByHash}, if paramter is number type, this will use {@link Klay#klay_getBlockTransactionCountByNumber|caver.rpc.klay.klay_getBlockTransactionCountByNumber}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockTransactionCount\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Use `caver.rpc.klay.getBlockTransactionCountByNumber`\r\n     * const result = await caver.rpc.klay.getBlockTransactionCount(21249)\r\n     * // Use `caver.rpc.klay.getBlockTransactionCountByHash`\r\n     * const result = await caver.rpc.klay.getBlockTransactionCount('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n     *\r\n     * @param {string|number} blockHashOrNumber The block hash, block number or the block tag string (`genesis` or `latest`).\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The number of transactions in the given block in hex.\r\n     */\n    new Method({\n      name: 'getBlockTransactionCount',\n      call: 'klay_getBlockTransactionCountByNumber',\n      hexCall: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the number of transactions in a block matching the given block number.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockTransactionCountByNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockTransactionCountByNumber(21249)\r\n     *\r\n     * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The number of transactions in the given block in hex.\r\n     */\n    new Method({\n      name: 'getBlockTransactionCountByNumber',\n      call: 'klay_getBlockTransactionCountByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the number of transactions in a block matching the given block hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockTransactionCountByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockTransactionCountByHash('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n     *\r\n     * @param {string} blockHash The block hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The number of transactions in the given block in hex.\r\n     */\n    new Method({\n      name: 'getBlockTransactionCountByHash',\n      call: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }),\n    /**\r\n     * An object for block from Klaytn with consensus information.\r\n     *\r\n     * @example\r\n     * {\r\n     *     blockscore: '0x1',\r\n     *     committee: [\r\n     *     '0x571e53df607be97431a5bbefca1dffe5aef56f4d',\r\n     *     '0x5cb1a7dccbd0dc446e3640898ede8820368554c8',\r\n     *     '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n     *     '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'\r\n     *     ],\r\n     *     extraData: '0xd883010602846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841dd5a72e9f6af1f59f18efd9d205314bed1077be5083318274e6284adf82806f3339d0f88d8cb97f297b9f6a239149224a4f26e01a5692f2392ffb0ab73b10d9600f8c9b8417a43d087a58a32299f4d5a647371e31ecd1298c1cdb5921b5e575a93cfd7d65f470f2fbd936b1b80206c73daba3fec2038bc25d521bbc21b428d3067598bd95501b8411678bb3221f448d4f9e2dd3e7bda57b0da954eb5f1dff350751b6fd895b4643f3f14b56742fe091db68c162b3e1a9dd17676a9f4a95445e295f00d1d146f49e801b841df4fef80626bc00f2a0048d7718a499defece1ac3e849aefc5c04f2691ec7951377b7022d8d6b20fecce5e03f5ea891597e0d9aadbba0f2f82c5d7230806a62c01',\r\n     *     gasUsed: '0x3ea49',\r\n     *     governanceData: '0x',\r\n     *     hash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *     logsBloom: '0xr\n     *     number: '0x3f79aa7',\r\n     *     originProposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n     *     parentHash: '0x777d344c8c59c4d8d0041bb4c2ee66e95ec110303fb59d3e329f80e7a9c9c617',\r\n     *     proposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n     *     receiptsRoot: '0xffbae3190f858531ff785bcbdc70278d91c3d9becdd8b134b0ab7974b9ef3641',\r\n     *     reward: '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d',\r\n     *     round: 0,\r\n     *     size: '0x507',\r\n     *     stateRoot: '0xa60d0868bd41b63b4fd67e5a8f801c5949e89a8994a13426747890b77d6bc0c4',\r\n     *     timestamp: '0x610b3164',\r\n     *     timestampFoS: '0xc',\r\n     *     totalBlockScore: '0x3f79aa8',\r\n     *     transactions: [\r\n     *        {\r\n     *             blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *             blockNumber: '0x3f79aa7',\r\n     *             contractAddress: null,\r\n     *             feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n     *             feePayerSignatures: [{\r\n     *                 V: '0x7f5',\r\n     *                 R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n     *                 S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n     *             }],\r\n     *             from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *             gas: '0x2dc6c0',\r\n     *             gasPrice: '0x5d21dba00',\r\n     *             gasUsed: '0x3ea49',\r\n     *             input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n     *             logs: [{\r\n     *                 address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *                 topics: [\r\n     *                     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n     *                     '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n     *                     '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n     *                     '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n     *                 ],\r\n     *                 data: '0x',\r\n     *                 blockNumber: '0x3f79aa7',\r\n     *                 transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *                 transactionIndex: '0x0',\r\n     *                 blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n     *                 logIndex: '0x0',\r\n     *                     removed: false\r\n     *             }],\r\n     *             logsBloom: '0xr\n     *             nonce: '0x0',\r\n     *             senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n     *             signatures: [{\r\n     *                     V: '0x7f6',\r\n     *                     R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n     *                     S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n     *             }],\r\n     *             status: '0x1',\r\n     *             to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n     *             transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *             transactionIndex: '0x0',\r\n     *             type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n     *             typeInt: 49,\r\n     *             value: '0x0'\r\n     *         }\r\n     *     ],\r\n     *     transactionsRoot: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n     *     voteData: '0x'\r\n     * }\r\n     *\r\n     * @typedef {object} Klay.BlockWithConsensusInfo\r\n     * @property {string} blockscore - The difficulty of mining in the blockchain network. The use of `blockScore` differs from the consensus of the network. Always 1 in the BFT consensus engine.\r\n     * @property {Array.<string>} committee - Array of addresses of committee members of this block. The committee is a subset of validators who participated in the consensus protocol for this block.\r\n     * @property {string} extraData - The \"extra data\" field of this block.\r\n     * @property {string} gasUsed - The gas in total that was used by all transactions in this block.\r\n     * @property {string} governanceData - RLP encoded governance configuration\r\n     * @property {string} hash - Hash of the block. `null` when it is a pending block.\r\n     * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is a pending block.\r\n     * @property {string} number - The block number. `null` when it is a pending block.\r\n     * @property {string} originProposer - The proposal of 0 round at the same block number.\r\n     * @property {string} parentHash - Hash of the parent block.\r\n     * @property {string} proposer - The address of the block proposer.\r\n     * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n     * @property {string} reward - The address of the beneficiary to whom the block rewards were given.\r\n     * @property {number} round - The round number.\r\n     * @property {string} size - Integer the size of this block in bytes.\r\n     * @property {string} stateRoot - The root of the final state trie of the block.\r\n     * @property {string} timestamp - The unix timestamp for when the block was collated.\r\n     * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n     * @property {string} totalBlockScore - Integer of the total blockScore of the chain until this block.\r\n     * @property {Array.<Klay.TransactionReceipt>} transactions - Array of transaction receipt objects.\r\n     * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n     * @property {string} voteData - RLP encoded governance vote of the proposer.\r\n     * @property {string} [baseFeePerGas] - Base fee per gas.\r\n     */\n\n    /**\r\n     * Returns a block with consensus information matched by the given hash.\r\n     * If parameter is hex string, this will use {@link Klay#getBlockWithConsensusInfoByHash|caver.rpc.klay.getBlockWithConsensusInfoByHash}, if paramter is number type, this will use {@link Klay#klay_getBlockWithConsensusInfoByNumber|caver.rpc.klay.klay_getBlockWithConsensusInfoByNumber}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockWithConsensusInfo\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Use `caver.rpc.klay.getBlockWithConsensusInfoByNumber`\r\n     * const result = await caver.rpc.klay.getBlockWithConsensusInfo(21249)\r\n     * // Use `caver.rpc.klay.getBlockWithConsensusInfoByHash`\r\n     * const result = await caver.rpc.klay.getBlockWithConsensusInfo('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n     *\r\n     * @param {string|number} blockHashOrNumber The block hash, block number or the block tag string (`genesis` or `latest`).\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n     */\n    new Method({\n      name: 'getBlockWithConsensusInfo',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      hexCall: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a block with consensus information matched by the given block number.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockWithConsensusInfoByNumber\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockWithConsensusInfoByNumber(21249)\r\n     *\r\n     * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n     */\n    new Method({\n      name: 'getBlockWithConsensusInfoByNumber',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a block with consensus information matched by the given hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getBlockWithConsensusInfoByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getBlockWithConsensusInfoByHash('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n     *\r\n     * @param {string} blockHash The block hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n     */\n    new Method({\n      name: 'getBlockWithConsensusInfoByHash',\n      call: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a list of all validators in the committee at the specified block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getCommittee\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getCommittee()\r\n     *\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<string>>} Addresses of all validators in the committee at the given block.\r\n     */\n    new Method({\n      name: 'getCommittee',\n      call: 'klay_getCommittee',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the size of the committee at the specified block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getCommitteeSize\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getCommitteeSize()\r\n     *\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<number>} The size of the committee at the given block.\r\n     */\n    new Method({\n      name: 'getCommitteeSize',\n      call: 'klay_getCommitteeSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns a list of all validators of the council at the specified block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getCouncil\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getCouncil()\r\n     *\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<string>>} An array of validator addresses of the council at the given block, or null when no council was found.\r\n     */\n    new Method({\n      name: 'getCouncil',\n      call: 'klay_getCouncil',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the size of the council at the specified block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getCouncilSize\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getCouncilSize()\r\n     *\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<number>} The size of the council at the given block.\r\n     */\n    new Method({\n      name: 'getCouncilSize',\n      call: 'klay_getCouncilSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns the value from a storage position at a given address.\r\n     *\r\n     * @memberof Klay\r\n     * @method getStorageAt\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1')\r\n     *\r\n     * @param {string} address The address to get the storage from.\r\n     * @param {number} position The index position of the storage. For more information on calculating the position, refer to {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/block#klay_getstorageat|klay_getStorageAt}.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The value at this storage position.\r\n     */\n    new Method({\n      name: 'getStorageAt',\n      call: 'klay_getStorageAt',\n      params: 3,\n      inputFormatter: [formatters.inputAddressFormatter, utils.numberToHex, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns `true` if client is actively mining new blocks.\r\n     *\r\n     * Currently, every node is on mining mode by default to resend transactions.\r\n     * Please note that actual \"mining\" process is only done by Consensus Nodes (CNs).\r\n     *\r\n     * @memberof Klay\r\n     * @method isMining\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.isMining()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} `true` if the client is mining, otherwise `false`.\r\n     */\n    new Method({\n      name: 'isMining',\n      call: 'klay_mining',\n      params: 0\n    }),\n    /**\r\n     * An object for block from Klaytn with consensus information.\r\n     *\r\n     * @example\r\n     * {\r\n     *     startingBlock: 100,\r\n     *     currentBlock: 312,\r\n     *     highestBlock: 512,\r\n     *     knownStates: 234566,\r\n     *     pulledStates: 123455\r\n     * }\r\n     *\r\n     * @typedef {Klay.Block} Klay.SyncObject\r\n     * @property {string} startingBlock - The block number in hex where the sync started.\r\n     * @property {string} currentBlock - The block number in hex where the node currently synced to.\r\n     * @property {string} highestBlock - The estimated block number in hex to sync to.\r\n     * @property {string} knownStates - The estimated states in hex to download.\r\n     * @property {string} pulledStates - The already downloaded states in hex.\r\n     */\n\n    /**\r\n     * Returns an object with data about the sync status or false.\r\n     *\r\n     * @memberof Klay\r\n     * @method isSyncing\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.isSyncing()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.SyncObject|boolean>} `false` if the Klaytn Node is not syncing. Otherwise, a sync object is returned.\r\n     */\n    new Method({\n      name: 'isSyncing',\n      call: 'klay_syncing',\n      params: 0\n    }), // Transaction\n\n    /**\r\n     * An object for block from Klaytn with consensus information.\r\n     *\r\n     * @example\r\n     * {\r\n     *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n     *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n     * }\r\n     *\r\n     * @typedef {Klay.Block} Klay.CallObject\r\n     * @property {string} [to] - The address the transaction is directed to. This can be omitted when testing the deployment of a new contract.\r\n     * @property {string} [input] - The hash of the method signature and encoded parameters. You can use {@link ABI#encodeFunctionCall|caver.abi.encodeFunctionCall}.\r\n     * @property {string} [from] - The address the transaction is sent from.\r\n     * @property {string} [gas] - The gas provided for the transaction execution. `klay_call`(which is called via `caver.rpc.klay.call`) consumes zero gas, but this parameter may be needed by some executions.\r\n     * @property {string} [gasPrice] - The gasPrice used for each paid gas.\r\n     * @property {string} [value] - The value sent with this transaction in `peb`.\r\n     */\n\n    /**\r\n     * Executes a new message call immediately without sending a transaction on the blockchain.\r\n     * It returns data or an error object of JSON RPC if an error occurs.\r\n     *\r\n     * @memberof Klay\r\n     * @method call\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.call({\r\n     *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n     *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n     * })\r\n     *\r\n     * @param {Klay.CallObject} callObject A transaction call object.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The returned data of the call. e.g., the return value of a smart contract function.\r\n     */\n    new Method({\n      name: 'call',\n      call: 'klay_call',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Generates and returns an estimate of how much `gas` is necessary to allow a transaction to complete.\r\n     * The transaction from this method will not be added to the blockchain.\r\n     *\r\n     * @memberof Klay\r\n     * @method estimateGas\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.estimateGas({\r\n     *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n     *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n     * })\r\n     *\r\n     * @param {Klay.CallObject} callObject A transaction call object.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The amount of gas used.\r\n     */\n    new Method({\n      name: 'estimateGas',\n      call: 'klay_estimateGas',\n      params: 1,\n      inputFormatter: [formatters.inputCallFormatter]\n    }),\n    /**\r\n     * Generates and returns an estimate of how much `computation cost` will be spent to execute the transaction.\r\n     * Klaytn limits the computation cost of a transaction to `100000000` currently not to take too much time by a single transaction.\r\n     * The transaction will not be added to the blockchain like {@link Klay#estimateGas|caver.rpc.klay.estimateGas}.\r\n     *\r\n     * @memberof Klay\r\n     * @method estimateComputationCost\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.estimateComputationCost({\r\n     *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n     *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n     * })\r\n     *\r\n     * @param {Klay.CallObject} callObject A transaction call object.\r\n     * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The amount of computation cost used.\r\n     */\n    new Method({\n      name: 'estimateComputationCost',\n      call: 'klay_estimateComputationCost',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns information about a transaction by `block` and `transaction index` position.\r\n     * If parameter is hex string, this will use {@link Klay#getTransactionByBlockHashAndIndex|caver.rpc.klay.getTransactionByBlockHashAndIndex}, if paramter is number type, this will use {@link Klay#getTransactionByBlockNumberAndIndex|caver.rpc.klay.getTransactionByBlockNumberAndIndex}.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionFromBlock\r\n     * @instance\r\n     *\r\n     * @example\r\n     * // Use `caver.rpc.klay.getTransactionByBlockNumberAndIndex`\r\n     * const result = await caver.rpc.klay.getTransactionFromBlock(183, 0)\r\n     * // Use `caver.rpc.klay.getTransactionByBlockHashAndIndex`\r\n     * const result = await caver.rpc.klay.getTransactionFromBlock('0xc9f643c0ebe84932c10695cbc9eb75228af09516931b58952de3e12c21a50576', 0)\r\n     *\r\n     * @param {string|number} blockHashOrNumber The block hash or block number.\r\n     * @param {number} index A transaction index position inside the block.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransactionFromBlock',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      hexCall: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }),\n    /**\r\n     * Returns information about a transaction by `block number` and `transaction index` position.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionByBlockNumberAndIndex\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionByBlockNumberAndIndex(183, 0)\r\n     *\r\n     * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n     * @param {number} index A transaction index position inside the block.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransactionByBlockNumberAndIndex',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }),\n    /**\r\n     * Returns information about a transaction by `block hash` and `transaction index` position.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionByBlockHashAndIndex\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionByBlockHashAndIndex('0xc9f643c0ebe84932c10695cbc9eb75228af09516931b58952de3e12c21a50576', 0)\r\n     *\r\n     * @param {string} blockHash The block hash.\r\n     * @param {number} index A transaction index position inside the block.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransactionByBlockHashAndIndex',\n      call: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }),\n    /**\r\n     * Returns the information about a transaction requested by transaction hash.\r\n     * This will be same with {@link Klay#getTransactionByHash|caver.rpc.klay.getTransactionByHash}\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransaction\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransaction('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n     *\r\n     * @param {string} transactionHash A transaction hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransaction',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }),\n    /**\r\n     * Returns the information about a transaction requested by transaction hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionByHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n     *\r\n     * @param {string} transactionHash A transaction hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransactionByHash',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }),\n    /**\r\n     * Returns the information about a transaction requested by the sender transaction hash.\r\n     * Please note that this API returns the correct result only if the indexing feature is enabled in the node by `--sendertxhashindexing`.\r\n     * Use {@link Klay#isSenderTxHashIndexingEnabled|caver.rpc.klay.isSenderTxHashIndexingEnabled} to check if the indexing feature is enabled or not.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionBySenderTxHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionBySenderTxHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n     *\r\n     * @param {string} senderTxHash A sedner transaction hash. See {@link https://docs.klaytn.com/klaytn/design/transactions#sendertxhash|SenderTxHash} for more detail.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.Transaction>} A transaction object.\r\n     */\n    new Method({\n      name: 'getTransactionBySenderTxHash',\n      call: 'klay_getTransactionBySenderTxHash',\n      params: 1\n    }),\n    /**\r\n     * Returns the receipt of a transaction by transaction hash.\r\n     * Receipt is not available for `pending` transactions whose transactions have not yet been processed.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionReceipt\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionReceipt('0xdb63fb385e51fbfd84a98873c994aef622c5f1c72c5760a9ff95c55bbfd99898')\r\n     *\r\n     * @param {string} transactionHash A transaction hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.TransactionReceipt>} A transaction receipt object, or null when no receipt was found.\r\n     */\n    new Method({\n      name: 'getTransactionReceipt',\n      call: 'klay_getTransactionReceipt',\n      params: 1\n    }),\n    /**\r\n     * Returns the receipt of a transaction by sender transaction hash.\r\n     *\r\n     * Please note that this API returns the correct result only if the indexing feature is enabled in the node by `--sendertxhashindexing`.\r\n     * Use {@link Klay#isSenderTxHashIndexingEnabled|caver.rpc.klay.isSenderTxHashIndexingEnabled} to check if the indexing feature is enabled or not.\r\n     *\r\n     * Receipt is not available for `pending` transactions whose transactions have not yet been processed.\r\n     *\r\n     * @memberof Klay\r\n     * @method getTransactionReceipt\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getTransactionReceipt('0xdb63fb385e51fbfd84a98873c994aef622c5f1c72c5760a9ff95c55bbfd99898')\r\n     *\r\n     * @param {string} senderTxHash A sedner transaction hash. See {@link https://docs.klaytn.com/klaytn/design/transactions#sendertxhash|SenderTxHash} for more detail.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.TransactionReceipt>} A transaction receipt object, or null when no receipt was found.\r\n     */\n    new Method({\n      name: 'getTransactionReceiptBySenderTxHash',\n      call: 'klay_getTransactionReceiptBySenderTxHash',\n      params: 1\n    }),\n    /**\r\n     * Sends a signed transaction to the Klaytn.\r\n     * The signedTransaction parameter can be a \"RLP-encoded signed transaction\".\r\n     * You can get the RLP-encoded transaction of a signed transaction using transaction.getRLPEncoding.\r\n     * For convenience, this also accepts a {@link module:Transaction.Transaction|signed transaction instance} as parameter which has valid `signatures` (and `feePayerSignatures`) already.\r\n     *\r\n     * @memberof Klay\r\n     * @method sendRawTransaction\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.sendRawTransaction('0x08f88...')\r\n     *\r\n     * @param {string|module:Transaction.Transaction} signedTransaction An RLP-encoded signed transaction or an instance of signed transaction.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n     */\n    new Method({\n      name: 'sendRawTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }),\n    /**\r\n     * Sends a signed transaction to the Klaytn.\r\n     * The signedTransaction parameter can be a \"RLP-encoded signed transaction\".\r\n     * You can get the RLP-encoded transaction of a signed transaction using transaction.getRLPEncoding.\r\n     * For convenience, this also accepts a {@link module:Transaction.Transaction|signed transaction instance} as parameter which has valid `signatures` (and `feePayerSignatures`) already.\r\n     *\r\n     * @memberof Klay\r\n     * @method submitTransaction\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.submitTransaction('0x08f88...')\r\n     *\r\n     * @param {string|module:Transaction.Transaction} signedTransaction An RLP-encoded signed transaction or an instance of signed transaction.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n     */\n    new Method({\n      name: 'submitTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }),\n    /**\r\n     * Signs a transaction as a transaction `sender` with an \"imported account's private key\" in your Klaytn Node and propagates the transaction to the Klaytn.\r\n     *\r\n     * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n     * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n     *\r\n     * @memberof Klay\r\n     * @method sendTransaction\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({\r\n     *     from: '0x{address in hex}',\r\n     *     to: '0x{address in hex}',\r\n     *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n     *     gas: 25000,\r\n     * })\r\n     * const result = await caver.rpc.klay.sendTransaction(tx)\r\n     *\r\n     * @param {module:Transaction.Transaction} transaction An instance of a transaction to be sent to the Klaytn.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n     */\n    new Method({\n      name: 'sendTransaction',\n      call: 'klay_sendTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }),\n    /**\r\n     * Signs a fee delegated transaction as a transaction `fee payer` with an \"imported account's private key\" in your Klaytn Node and propagates the transaction to the Klaytn.\r\n     *\r\n     * Before using sendTransaction as a fee payer, the transaction sender must have signed with valid signature(s) and the `nonce` must have been defined.\r\n     *\r\n     * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n     * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n     *\r\n     * @memberof Klay\r\n     * @method sendTransactionAsFeePayer\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.feeDelegatedValueTransfer.create({\r\n     *     from: '0x{address in hex}',\r\n     *     to: '0x{address in hex}',\r\n     *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n     *     gas: 25000,\r\n     *     gas: 50000,\r\n     *     nonce: 1,\r\n     *     signatures: [\r\n     *         [\r\n     *             '0x4e43',\r\n     *             '0x873e9db6d055596a8f79a6a2761bfb464cbc1b352ac1ce53770fc23bb16d929c',\r\n     *             '0x15d206781cc8ac9ffb02c08545cb832e1f1700b46b886d72bb0cfeb4a230871e',\r\n     *         ],\r\n     *     ],\r\n     *     feePayer: '0x3af68ad73f45a1e7686e8fcd23e910625ef2186e', // The address of imported account in Klaytn Node\r\n     * })\r\n     * const result = await caver.rpc.klay.sendTransactionAsFeePayer(tx)\r\n     *\r\n     * @param {module:Transaction.FeeDelegatedTransaction} transaction An instance of fee delegated transaction to send to the Klaytn.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n     */\n    new Method({\n      name: 'sendTransactionAsFeePayer',\n      call: 'klay_sendTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }),\n    /**\r\n     * An object defines the signed transaction from the Node.\r\n     *\r\n     * @typedef {object} Klay.SignedTransaction\r\n     * @property {string} raw - An RLP-encoded signed transaction.\r\n     * @property {Klay.SignedTransactionDetail} tx - Block number where this transaction was in.\r\n     */\n\n    /**\r\n     * An object defines the signed transaction detail information.\r\n     *\r\n     * @typedef {object} Klay.SignedTransactionDetail\r\n     * @property {string} [codeFormat] - The code format of smart contract code.\r\n     * @property {string} [feePayer] - Address of the fee payer.\r\n     * @property {Array.<Klay.SignatureData>} [feePayerSignatures] - An array of fee payer's signature objects. A signature object contains three fields (V, R, and S)\r\n     * @property {string} [feeRatio] - Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.\r\n     * @property {string} from - Address of the sender.\r\n     * @property {string} gas - Gas provided by the sender.\r\n     * @property {string} gasPrice - Gas price provided by the sender in peb.\r\n     * @property {string} hash - Hash of the transaction.\r\n     * @property {boolean} [humanReadable] - `true` if the address is humanReadable, `false` if the address is not humanReadable.\r\n     * @property {string} [key] - The RLP-encoded AccountKey used to update AccountKey of an Klaytn account. See {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|AccountKey} for more details.\r\n     * @property {string} [input] - The data sent along with the transaction.\r\n     * @property {string} nonce - The number of transactions made by the sender prior to this one.\r\n     * @property {Array.<Klay.SignatureData>} signatures - An array of signature objects. A signature object contains three fields (V, R, and S).\r\n     * @property {string} to - Address of the receiver. null when it is a contract deploying transaction.\r\n     * @property {string} type - A string representing the type of the transaction.\r\n     * @property {number} typeInt - An integer representing the type of the transaction.\r\n     * @property {string} value - Value transferred in peb.\r\n     */\n\n    /**\r\n     * Signs a transaction as a transaction sender with an \"imported account's private key\" in your Klaytn Node.\r\n     *\r\n     * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n     * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n     *\r\n     * @memberof Klay\r\n     * @method signTransaction\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.valueTransfer.create({\r\n     *     from: '0x{address in hex}',\r\n     *     to: '0x{address in hex}',\r\n     *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n     *     gas: 25000,\r\n     * })\r\n     * const result = await caver.rpc.klay.signTransaction(tx)\r\n     *\r\n     * @param {module:Transaction.Transaction} transaction An instance of a transaction to sign.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.SignedTransaction>} An object includes signed transaction.\r\n     */\n    new Method({\n      name: 'signTransaction',\n      call: 'klay_signTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }),\n    /**\r\n     * Signs a transaction as a transaction fee payer with an \"imported account's private key\" in your Klaytn Node.\r\n     *\r\n     * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n     * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n     *\r\n     * @memberof Klay\r\n     * @method signTransactionAsFeePayer\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const tx = caver.transaction.feeDelegatedValueTransfer.create({\r\n     *     from: '0x{address in hex}',\r\n     *     to: '0x{address in hex}',\r\n     *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n     *     gas: 25000,\r\n     *     gas: 50000,\r\n     *     nonce: 1,\r\n     *     signatures: [\r\n     *         [\r\n     *             '0x4e43',\r\n     *             '0x873e9db6d055596a8f79a6a2761bfb464cbc1b352ac1ce53770fc23bb16d929c',\r\n     *             '0x15d206781cc8ac9ffb02c08545cb832e1f1700b46b886d72bb0cfeb4a230871e',\r\n     *         ],\r\n     *     ],\r\n     *     feePayer: '0x3af68ad73f45a1e7686e8fcd23e910625ef2186e', // The address of imported account in Klaytn Node\r\n     * })\r\n     * const result = await caver.rpc.klay.signTransactionAsFeePayer(tx)\r\n     *\r\n     * @param {module:Transaction.FeeDelegatedTransaction} transaction An instance of a transaction to sign.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.SignedTransaction>} An object includes signed transaction.\r\n     */\n    new Method({\n      name: 'signTransactionAsFeePayer',\n      call: 'klay_signTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }),\n    /**\r\n     * An object defines the decoded anchored data.\r\n     *\r\n     * @typedef {object} Klay.AnchoredData\r\n     * @property {string} BlockHash - Hash of the child chain block that this anchoring transaction was performed.\r\n     * @property {number} BlockNumber - The child chain block number that this anchoring transaction was performed.\r\n     * @property {string} ParentHash - Hash of the parent block.\r\n     * @property {string} TxHash - The root of the transaction trie of the block.\r\n     * @property {string} StateRootHash - The root of the final state trie of the block.\r\n     * @property {string} ReceiptHash - The root of the receipts trie of the block.\r\n     * @property {number} BlockCount - The number of blocks generated during this anchoring period. In most cases, this number is equal to the child chain's `SC_TX_PERIOD`, except the case that this transaction was the first anchoring tx after turning on the anchoring.\r\n     * @property {number} TxCount - The number of transactions generated in the child chain during this anchoring period.\r\n     */\n\n    /**\r\n     * Returns the decoded anchored data in the transaction for the given transaction hash.\r\n     *\r\n     * @memberof Klay\r\n     * @method getDecodedAnchoringTransactionByHash\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getDecodedAnchoringTransactionByHash('0x59831a092a9f0b48018848f5dd88a457efdbfabec13ea07cd769686741a1cd13')\r\n     *\r\n     * @param {string} transactionHash A transaction hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.AnchoredData>} An object includes signed transaction.\r\n     */\n    new Method({\n      name: 'getDecodedAnchoringTransactionByHash',\n      call: 'klay_getDecodedAnchoringTransactionByHash',\n      params: 1\n    }), new Method({\n      name: 'getDecodedAnchoringTransaction',\n      call: 'klay_getDecodedAnchoringTransactionByHash',\n      params: 1\n    }),\n    /**\r\n     * An object defines fee history.\r\n     *\r\n     * @typedef {object} Klay.FeeHistoryResult\r\n     * @property {string} oldestBlock - Lowest number block of returned range.\r\n     * @property {string[]} baseFeePerGas - An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.\r\n     * @property {string[][]} reward - A two-dimensional array of effective priority fees per gas at the requested block percentiles.\r\n     * @property {number[]} gasUsedRatio - An array of gasUsed/gasLimit in the block.\r\n     */\n\n    /**\r\n     * Returns fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.\r\n     *\r\n     * @memberof Klay\r\n     * @method getFeeHistory\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getFeeHistory(16, 'latest', [0.1, 0.2, 0.3])\r\n     *\r\n     * @param {number|BigNumber|BN|string} blockCount Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\r\n     * @param {number|BigNumber|BN|string} lastBlock Highest number block (or block tag string) of the requested range.\r\n     * @param {number[]} rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. (Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`)\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.FeeHistoryResult>} Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.\r\n     */\n    new Method({\n      name: 'getFeeHistory',\n      call: 'klay_feeHistory',\n      params: 3,\n      inputFormatter: [utils.numberToHex, formatters.inputBlockNumberFormatter, null]\n    }),\n    /**\r\n     * Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.\r\n     * Since Klaytn has a fixed gas price, this `caver.rpc.klay.getMaxPriorityFeePerGas` returns the gas price set by Klaytn.\r\n     *\r\n     * @memberof Klay\r\n     * @method getMaxPriorityFeePerGas\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getMaxPriorityFeePerGas()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} As a suggested value for the gas tip cap, the current Klaytn uses a fixed gas price, so the gasPrice value is returned.\r\n     */\n    new Method({\n      name: 'getMaxPriorityFeePerGas',\n      call: 'klay_maxPriorityFeePerGas',\n      params: 0\n    }),\n    /**\r\n     * Returns an upper bound gas price.\r\n     *\r\n     * @memberof Klay\r\n     * @method getUpperBoundGasPrice\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getUpperBoundGasPrice()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} An upper bound gas price\r\n     */\n    new Method({\n      name: 'getUpperBoundGasPrice',\n      call: 'klay_upperBoundGasPrice',\n      params: 0\n    }),\n    /**\r\n     * Returns a lower bound gas price.\r\n     *\r\n     * @memberof Klay\r\n     * @method getLowerBoundGasPrice\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getLowerBoundGasPrice()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} A lower bound gas price\r\n     */\n    new Method({\n      name: 'getLowerBoundGasPrice',\n      call: 'klay_lowerBoundGasPrice',\n      params: 0\n    }),\n    /**\r\n     * An object defines an access list result that includes accessList and gasUsed.\r\n     *\r\n     * @typedef {object} Klay.AccessListResult\r\n     * @property {Klay.AccessList} accessList - The list of addresses and storage keys that will be used by that transaction. The list could change when the transaction is actually mined.\r\n     * @property {string} gasUsed - The estimated amount of gas used.\r\n     */\n\n    /**\r\n     * Klay.AccessList is a list of access tuple.\r\n     *\r\n     * @typedef {Klay.AccessTuple[]} Klay.AccessList\r\n     */\n\n    /**\r\n     * The element type of an access list.\r\n     *\r\n     * @typedef {object} Klay.AccessTuple\r\n     * @property {string} address - An address that the transaction plans to access.\r\n     * @property {string[]} storageKeys - The storage slots that the transaction plans to access.\r\n     */\n\n    /**\r\n     * Returns a list of addresses and storage keys used by the transaction, plus the gas consumed when the access list is added.\r\n     *\r\n     * @memberof Klay\r\n     * @method createAccessList\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const txArgs = {\r\n     *     from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312',\r\n     *     data: '0x20965255',\r\n     *     gasPrice: '0x3b9aca00',\r\n     *     gas: '0x3d0900',\r\n     *     to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'\r\n     * }\r\n     * const result = await caver.rpc.klay.createAccessList(txArgs, 'latest')\r\n     *\r\n     * @param {Klay.CallObject} callObject A transaction call object.\r\n     * @param {number|BigNumber|BN|string} [blockParameter] A block number, blockhash or the block tag string (`latest` or `earliest`). If omitted, `latest` will be used.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Klay.AccessListResult>} An accessListResult for the given transaction\r\n     */\n    new Method({\n      name: 'createAccessList',\n      call: 'klay_createAccessList',\n      params: 2,\n      inputFormatter: [formatters.inputTransactionFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), // Configuration\n\n    /**\r\n     * Returns the current client version of a Klaytn node.\r\n     *\r\n     * @memberof Klay\r\n     * @method getClientVersion\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getClientVersion()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The current client version of a Klaytn node.\r\n     */\n    new Method({\n      name: 'getClientVersion',\n      call: 'klay_clientVersion',\n      params: 0\n    }),\n    /**\r\n     * Returns the current price per gas in peb for the given block.\r\n     *\r\n     * @memberof Klay\r\n     * @method getGasPriceAt\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getGasPriceAt()\r\n     *\r\n     * @param {number} [blockNumber] The block number. If omitted, the latest unit price will be returned.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The current gas price in peb.\r\n     */\n    new Method({\n      name: 'getGasPriceAt',\n      call: 'klay_gasPriceAt',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }),\n    /**\r\n     * Returns `true` if the node is writing blockchain data in a parallel manner.\r\n     *\r\n     * @memberof Klay\r\n     * @method isParallelDBWrite\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.isParallelDBWrite()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} `true` means the node is writing blockchain data in a parallel manner. It is `false` if the node is serially writing the data.\r\n     */\n    new Method({\n      name: 'isParallelDBWrite',\n      call: 'klay_isParallelDBWrite',\n      params: 0\n    }),\n    /**\r\n     * Returns `true` if the node is indexing sender transaction hash to transaction hash mapping information.\r\n     *\r\n     * @memberof Klay\r\n     * @method isSenderTxHashIndexingEnabled\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.isSenderTxHashIndexingEnabled()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} `true` means the node is indexing sender transaction hash to transaction hash mapping information.\r\n     */\n    new Method({\n      name: 'isSenderTxHashIndexingEnabled',\n      call: 'klay_isSenderTxHashIndexingEnabled',\n      params: 0\n    }),\n    /**\r\n     * Returns the Klaytn protocol version of the node.\r\n     *\r\n     * @memberof Klay\r\n     * @method getProtocolVersion\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getProtocolVersion()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The Klaytn protocol version of the node.\r\n     */\n    new Method({\n      name: 'getProtocolVersion',\n      call: 'klay_protocolVersion',\n      params: 0\n    }),\n    /**\r\n     * Returns the rewardbase of the current node.\r\n     * Rewardbase is the address of the account where the block rewards go to. It is only required for CNs.\r\n     *\r\n     * @memberof Klay\r\n     * @method getRewardbase\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getRewardbase()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The rewardbase address.\r\n     */\n    new Method({\n      name: 'getRewardbase',\n      call: 'klay_rewardbase',\n      params: 0\n    }), // Filter\n\n    /**\r\n     * Polling method for a filter, which returns an array of logs since the last poll.\r\n     *\r\n     * @memberof Klay\r\n     * @method getFilterChanges\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getFilterChanges('0xafb8e49bbcba9d61a3c616a3a312533e')\r\n     *\r\n     * @param {string} filterId The filter id.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<Klay.Log>>} Array of log objects, or an empty array if nothing has changed since the last poll.\r\n     */\n    new Method({\n      name: 'getFilterChanges',\n      call: 'klay_getFilterChanges',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }),\n    /**\r\n     * Returns an array of all logs matching the filter with the given id.\r\n     * The filter object should be obtained by using {@link Klay#newFilter|caver.rpc.klay.newFilter}.\r\n     *\r\n     * Note that filter ids returned by other filter creation functions, such as {@link Klay#newBlockFilter|caver.rpc.klay.newBlockFilter} or {@link Klay#newPendingTransactionFilter|caver.rpc.klay.newPendingTransactionFilter}, cannot be used with this function.\r\n     *\r\n     * @memberof Klay\r\n     * @method getFilterLogs\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getFilterLogs('0xafb8e49bbcba9d61a3c616a3a312533e')\r\n     *\r\n     * @param {string} filterId The filter id.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<Klay.Log>>} Array of all logs matching the filter with the given id.\r\n     */\n    new Method({\n      name: 'getFilterLogs',\n      call: 'klay_getFilterLogs',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }),\n    /**\r\n     * An object for filter options.\r\n     *\r\n     * @typedef {object} Klay.FilterOptions\r\n     * @property {string|number} [fromBlock] - The block number of the earliest block to get the logs. (`\"latest\"` means the most recent block.) The default value is `\"latest\"`.\r\n     * @property {string|number} [toBlock] - The block number of the last block to get the logs. (`\"latest\"` means the most recent block.). The default value is `\"latest\"`.\r\n     * @property {string|Array.<string>} [address] - An address or a list of addresses. Only the logs related to the particular account(s) will be returned.\r\n     * @property {Array.<string>} [topics] - An array of values that must appear in the log entries. The order is important. If you want to leave topics out, use `null`, e.g., `[null, '0x12...']`. You can also pass an array for each topic with options for that topic, e.g., `[null, ['option1', 'option2']]`.\r\n     */\n\n    /**\r\n     * Returns an array of all logs matching a given filter object.\r\n     *\r\n     * @memberof Klay\r\n     * @method getLogs\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.getLogs({\r\n     *     fromBlock: '0x1'\r\n     *     toBlock: 'latest',\r\n     *     address:'0x87ac99835e67168d4f9a40580f8f5c33550ba88b'\r\n     * })\r\n     *\r\n     * @param {Klay.FilterOptions} options The filter options.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<Array.<Klay.Log>>} Array of all logs matching a given filter object.\r\n     */\n    new Method({\n      name: 'getLogs',\n      call: 'klay_getLogs',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }),\n    /**\r\n     * Creates a filter in the node, to notify when a new block arrives.\r\n     * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n     *\r\n     * @memberof Klay\r\n     * @method newBlockFilter\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.newBlockFilter()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} A filter id.\r\n     */\n    new Method({\n      name: 'newBlockFilter',\n      call: 'klay_newBlockFilter',\n      params: 0\n    }),\n    /**\r\n     * Creates a filter object using the given filter options, to receive the specific state changes (logs).\r\n     *\r\n     * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n     * To obtain all logs matching the filter created by `newFilter`, call {@link Klay#getFilterLogs|caver.rpc.klay.getFilterLogs}.\r\n     *\r\n     * For detailed information about the topics in the filter object, please see {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/filter#klay_newfilter|Klaytn Platform API - klay_newFilter}.\r\n     *\r\n     * @memberof Klay\r\n     * @method newFilter\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.newFilter({})\r\n     *\r\n     * @param {Klay.FilterOptions} options The filter options.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} A filter id.\r\n     */\n    new Method({\n      name: 'newFilter',\n      call: 'klay_newFilter',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }),\n    /**\r\n     * Creates a filter in the node, to receive the information about new pending transaction arrival.\r\n     * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n     *\r\n     * @memberof Klay\r\n     * @method newPendingTransactionFilter\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.newPendingTransactionFilter()\r\n     *\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} A filter id.\r\n     */\n    new Method({\n      name: 'newPendingTransactionFilter',\n      call: 'klay_newPendingTransactionFilter',\n      params: 0\n    }),\n    /**\r\n     * Uninstalls a filter with a given id.\r\n     * Should always be called when a watch is no longer needed.\r\n     * Additionally, filters time out when they are not being called with {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges} for a period of time.\r\n     *\r\n     * @memberof Klay\r\n     * @method uninstallFilter\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.uninstallFilter('0x1426438ffdae5abf43edf4159c5b013b')\r\n     *\r\n     * @param {string} filterId The filter id.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<boolean>} `true` if the filter was successfully uninstalled, otherwise `false`.\r\n     */\n    new Method({\n      name: 'uninstallFilter',\n      call: 'klay_uninstallFilter',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), // Misc\n\n    /**\r\n     * Returns Keccak-256 (not the standardized SHA3-256) of the given data.\r\n     * You can use {@link module:utils~sha3|caver.utils.sha3} instead of this.\r\n     *\r\n     * @memberof Klay\r\n     * @method sha3\r\n     * @instance\r\n     *\r\n     * @example\r\n     * const result = await caver.rpc.klay.sha3('0x11223344')\r\n     *\r\n     * @param {string} data The data to be converted into a SHA3 hash.\r\n     * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n     * @return {Promise<string>} The SHA3 result of the given data.\r\n     */\n    new Method({\n      name: 'sha3',\n      call: 'klay_sha3',\n      params: 1\n    }), new Method({\n      name: 'getCypressCredit',\n      call: 'klay_getCypressCredit',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), // subscriptions\n    new Subscriptions({\n      name: 'subscribe',\n      type: 'klay',\n      subscriptions: {\n        newBlockHeaders: {\n          subscriptionName: 'newHeads',\n          // replace subscription with this name\n          params: 0\n        },\n        pendingTransactions: {\n          subscriptionName: 'newPendingTransactions',\n          // replace subscription with this name\n          params: 0\n        },\n        logs: {\n          params: 1,\n          inputFormatter: [formatters.inputLogFormatter],\n          subscriptionHandler: function (output) {\n            this.emit('data', output);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, output, this);\n            }\n          }\n        },\n        syncing: {\n          params: 0,\n          subscriptionHandler: function (output) {\n            const _this = this;\n            /* eslint-disable-line no-shadow */\n            // fire TRUE at start\n\n\n            if (this._isSyncing !== true) {\n              this._isSyncing = true;\n              this.emit('changed', _this._isSyncing);\n\n              if (_.isFunction(this.callback)) {\n                this.callback(null, _this._isSyncing, this);\n              }\n\n              setTimeout(function () {\n                _this.emit('data', output);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, output, _this);\n                }\n              }, 0); // fire sync status\n            } else {\n              this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                this.callback(null, output, this);\n              } // wait for some time before fireing the FALSE\n\n\n              clearTimeout(this._isSyncingTimeout);\n              this._isSyncingTimeout = setTimeout(function () {\n                if (output.currentBlock > output.highestBlock - 200) {\n                  _this._isSyncing = false;\n\n                  _this.emit('changed', _this._isSyncing);\n\n                  if (_.isFunction(_this.callback)) {\n                    _this.callback(null, _this._isSyncing, _this);\n                  }\n                }\n              }, 500);\n            }\n          }\n        }\n      }\n    })];\n    methods.forEach(function (method) {\n      method.attachToObject(_this);\n      method.setRequestManager(_this._requestManager);\n    });\n  }\n\n}\n\nmodule.exports = Klay;","map":{"version":3,"names":["_","require","core","formatters","Subscriptions","subscriptions","MethodBase","utils","AbstractTransaction","Klay","constructor","_this","args","packageInit","setRequestManager","manager","setProvider","arg","apply","_requestManager","clearSubscriptions","Method","options","outputFormatterDisable","_klaytnCall","name","call","params","inputFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","inputBlockNumberFormatter","klaytnCall","each","method","attachToObject","methods","inputAccountKeyFormatter","inputSignFormatter","hexCall","toBoolean","numberToHex","inputCallFormatter","inputTransactionFormatter","inputLogFormatter","type","newBlockHeaders","subscriptionName","pendingTransactions","logs","subscriptionHandler","output","emit","isFunction","callback","syncing","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","forEach","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-rpc/src/klay.js"],"sourcesContent":["/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-eth/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n/* eslint-disable max-classes-per-file */\r\nconst _ = require('lodash')\r\n\r\nconst core = require('../../caver-core')\r\nconst { formatters } = require('../../caver-core-helpers')\r\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions\r\nconst MethodBase = require('../../caver-core-method')\r\n\r\nconst utils = require('../../caver-utils')\r\n\r\nconst AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction')\r\n\r\n/**\r\n * A class that can invoke Klay RPC Calls.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass Klay {\r\n    constructor(...args) {\r\n        const _this = this\r\n\r\n        // sets _requestmanager\r\n        core.packageInit(this, args)\r\n\r\n        // overwrite package setRequestManager\r\n        const setRequestManager = this.setRequestManager\r\n        this.setRequestManager = function(manager) {\r\n            setRequestManager(manager)\r\n            return true\r\n        }\r\n\r\n        // overwrite setProvider\r\n        const setProvider = this.setProvider\r\n        this.setProvider = function(...arg) {\r\n            setProvider.apply(_this, arg)\r\n            _this.setRequestManager(_this._requestManager)\r\n        }\r\n\r\n        this.clearSubscriptions = _this._requestManager.clearSubscriptions\r\n\r\n        class Method extends MethodBase {\r\n            constructor(options) {\r\n                options.outputFormatterDisable = true\r\n                super(options)\r\n            }\r\n        }\r\n\r\n        const _klaytnCall = [\r\n            /**\r\n             * Returns the chain ID of the chain.\r\n             *\r\n             * @memberof Klay\r\n             * @method getChainId\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getChainId()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The chain ID of the chain.\r\n             */\r\n            new Method({\r\n                name: 'getChainId',\r\n                call: 'klay_chainID',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns the current price per gas in peb.\r\n             *\r\n             * @memberof Klay\r\n             * @method getGasPrice\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getGasPrice()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The current gas price in peb.\r\n             */\r\n            new Method({\r\n                name: 'getGasPrice',\r\n                call: 'klay_gasPrice',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns the total number of transactions sent from an address.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionCount\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionCount('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address to get the number of transactions from.\r\n             * @param {number|string} [blocNumber] A block number, the string pending for the pending nonce, or the string `earliest` or `latest` as in the default block parameter. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The number of transactions sent from the given address in hex.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionCount',\r\n                call: 'klay_getTransactionCount',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a block header by block number.\r\n             *\r\n             * @memberof Klay\r\n             * @method getHeaderByNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getHeaderByNumber(0)\r\n             * const result = await caver.rpc.klay.getHeaderByNumber('latest')\r\n             *\r\n             * @param {string|number|BN|BigNumber} blockNumberOrTag The block number or block tag string to query block header.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Header>} An object includes block header.\r\n             */\r\n            new Method({\r\n                name: 'getHeaderByNumber',\r\n                call: 'klay_getHeaderByNumber',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * An object defines the AccountKeyLegacy.\r\n             *\r\n             * @example\r\n             * { keyType: 1, key: {} }\r\n             *\r\n             * @typedef {object} Klay.AccountKeyLegacy\r\n             * @property {number} keyType - The key type number. The AccountKeyLegacy key type is `1`.\r\n             * @property {object} key - The key information object. For AccountKeyLegacy this field will be empty.\r\n             */\r\n            /**\r\n             * An object defines the public key.\r\n             *\r\n             * @typedef {object} Klay.PublicKeyObject\r\n             * @property {string} x - The x point of the public key.\r\n             * @property {string} y - The y point of the public key.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyPublic.\r\n             *\r\n             * @example\r\n             * {\r\n             *     keyType: 2,\r\n             *     key: { x:'0xb9a4b...', y:'0x7a285...' }\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.AccountKeyPublic\r\n             * @property {number} keyType - The key type number. The AccountKeyPublic key type is `2`.\r\n             * @property {Klay.PublicKeyObject} key - The key information object.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyFail.\r\n             *\r\n             * @example\r\n             * { keyType: 3, key:{} }\r\n             *\r\n             * @typedef {object} Klay.AccountKeyFail\r\n             * @property {number} keyType - The key type number. The AccountKeyFail key type is `3`.\r\n             * @property {object} key - The key information object. For AccountKeyFail this field will be empty.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyWeightedMultiSig.\r\n             *\r\n             * @typedef {object} Klay.WeightedPublicKey\r\n             * @property {number} weight - The weight of the key.\r\n             * @property {Klay.PublicKeyObject} key - The public key.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyWeightedMultiSig.\r\n             *\r\n             * @typedef {object} Klay.WeightedMultiSigKey\r\n             * @property {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n             * @property {Array.<Klay.WeightedPublicKey>} keys - An array that defines weighted public keys.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyWeightedMultiSig.\r\n             *\r\n             * @example\r\n             * {\r\n             *     keyType: 4,\r\n             *     key: {\r\n             *         threshold: 2,\r\n             *         keys: [\r\n             *             {\r\n             *                 weight: 1,\r\n             *                 key: { x: '0xae6b7...', y: '0x79ddf...' }\r\n             *             },\r\n             *             {\r\n             *                 weight: 1,\r\n             *                 key: { x: '0xd4256...', y: '0xfc5e7...' }\r\n             *             },\r\n             *             {\r\n             *                 weight: 1,\r\n             *                 key: { x: '0xd653e...', y: '0xe974e...' }\r\n             *             }\r\n             *         ]\r\n             *     }\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.AccountKeyWeightedMultiSig\r\n             * @property {number} keyType - The key type number. The AccountKeyWeightedMultiSig key type is `4`.\r\n             * @property {Klay.WeightedMultiSigKey} key - The key information object. For AccountKeyWeightedMultiSig this field will be defined with threshold and weighted public keys to use.\r\n             */\r\n            /**\r\n             * An object defines the AccountKeyRoleBased.\r\n             *\r\n             * @example\r\n             * {\r\n             *     keyType: 5,\r\n             *     key: [\r\n             *         {\r\n             *             key: { x: '0x81965...', y: '0x18242...' },\r\n             *             keyType: 2\r\n             *         },\r\n             *         {\r\n             *             key: { x: '0x73363...', y: '0xfc3e3...' },\r\n             *             keyType: 2\r\n             *         },\r\n             *         {\r\n             *             key: { x: '0x95c92...', y: '0xef783...' },\r\n             *             keyType: 2\r\n             *         }\r\n             *     ]\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.AccountKeyRoleBased\r\n             * @property {number} keyType - The key type number. The AccountKeyRoleBased key type is `5`.\r\n             * @property {Array.<Klay.AccountKeyLegacy|Klay.AccountKeyPublic|Klay.AccountKeyFail|Klay.AccountKeyWeightedMultiSig>} key - The key information object. AccountKeyRoleBased defines account key for each roles.\r\n             */\r\n            /**\r\n             * An account key type.\r\n             *\r\n             * @typedef {Klay.AccountKeyLegacy|Klay.AccountKeyPublic|Klay.AccountKeyFail|Klay.AccountKeyWeightedMultiSig|Klay.AccountKeyRoleBased} Klay.AccountKey\r\n             */\r\n            /**\r\n             * Returns AccountKey of a given address.\r\n             * If the account has {@link https://docs.klaytn.com/klaytn/design/accounts#accountkeylegacy|AccountKeyLegacy} or the account of the given address is a {@link https://docs.klaytn.com/klaytn/design/accounts#smart-contract-accounts-scas|Smart Contract Account}, it will return an empty key value.\r\n             * Please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|Account Key} for more details.\r\n             *\r\n             * @memberof Klay\r\n             * @method getAccountKey\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getAccountKey('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address of Klaytn account from which you want to get an object of AccountKey information.\r\n             * @param {number|string} [blocNumber] A block number, the string pending for the pending nonce, or the string `earliest` or `latest` as in the default block parameter. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.AccountKey>} An object that contains AccountKey information. Each AccountKey type has different attributes.\r\n             */\r\n            new Method({\r\n                name: 'getAccountKey',\r\n                call: 'klay_getAccountKey',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * An object defines the signature data from the Node.\r\n             *\r\n             * @typedef {object} Klay.SignatureData\r\n             * @property {string} V - V contains ECDSA recovery id.\r\n             * @property {string} R - R contains ECDSA signature r.\r\n             * @property {string} S - S contains ECDSA signature s.\r\n             */\r\n            /**\r\n             * An object defines the Transaction from the Node.\r\n             *\r\n             * @typedef {object} Klay.Transaction\r\n             * @property {string} blockHash - Hash of the block where this transaction was in.\r\n             * @property {string} blockNumber - Block number where this transaction was in.\r\n             * @property {string} [codeFormat] - The code format of smart contract code.\r\n             * @property {string} [feePayer] - Address of the fee payer.\r\n             * @property {Array.<Klay.SignatureData>} [feePayerSignatures] - An array of fee payer's signature objects. A signature object contains three fields (V, R, and S)\r\n             * @property {string} [feeRatio] - Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.\r\n             * @property {string} from - Address of the sender.\r\n             * @property {string} gas - Gas provided by the sender.\r\n             * @property {string} gasPrice - Gas price provided by the sender in peb.\r\n             * @property {string} hash - Hash of the transaction.\r\n             * @property {boolean} [humanReadable] - `true` if the address is humanReadable, `false` if the address is not humanReadable.\r\n             * @property {string} [key] - The RLP-encoded AccountKey used to update AccountKey of an Klaytn account. See {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|AccountKey} for more details.\r\n             * @property {string} [input] - The data sent along with the transaction.\r\n             * @property {string} nonce - The number of transactions made by the sender prior to this one.\r\n             * @property {string} senderTxHash - Hash of the tx without the fee payer's address and signature. This value is always the same as the value of `hash` for non-fee-delegated transactions.\r\n             * @property {Array.<Klay.SignatureData>} signatures - An array of signature objects. A signature object contains three fields (V, R, and S).\r\n             * @property {string} to - Address of the receiver. null when it is a contract deploying transaction.\r\n             * @property {string} transactionIndex - Integer of the transaction index position in the block.\r\n             * @property {string} type - A string representing the type of the transaction.\r\n             * @property {number} typeInt - An integer representing the type of the transaction.\r\n             * @property {string} value - Value transferred in peb.\r\n             */\r\n            /**\r\n             * Returns the information about a transaction requested by transaction hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionByHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n             *\r\n             * @param {string} transactionHash A transaction hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object, or null when no transaction was found.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionByHash',\r\n                call: 'klay_getTransactionByHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.\r\n             * Since Klaytn has a fixed gas price, this `caver.rpc.klay.getMaxPriorityFeePerGas` returns the gas price set by Klaytn.\r\n             *\r\n             * @memberof Klay\r\n             * @method getMaxPriorityFeePerGas\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getMaxPriorityFeePerGas()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} As a suggested value for the gas tip cap, the current Klaytn uses a fixed gas price, so the gasPrice value is returned.\r\n             */\r\n            new Method({\r\n                name: 'getMaxPriorityFeePerGas',\r\n                call: 'klay_maxPriorityFeePerGas',\r\n                params: 0,\r\n            }),\r\n        ]\r\n        AbstractTransaction._klaytnCall = {}\r\n        this.klaytnCall = {}\r\n        _.each(_klaytnCall, function(method) {\r\n            method = new Method(method)\r\n            method.attachToObject(AbstractTransaction._klaytnCall)\r\n            method.attachToObject(_this.klaytnCall)\r\n            method.setRequestManager(_this._requestManager)\r\n        })\r\n\r\n        const methods = [\r\n            ..._klaytnCall,\r\n\r\n            // Account\r\n            /**\r\n             * Returns `true` if the account associated with the address is created in the Klaytn blockchain platform. It returns `false` otherwise.\r\n             *\r\n             * @memberof Klay\r\n             * @method accountCreated\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.accountCreated('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address of the account you want to query to see if it has been created on the network.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} The existence of an input address in the Klaytn.\r\n             */\r\n            new Method({\r\n                name: 'accountCreated',\r\n                call: 'klay_accountCreated',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a list of addresses owned by the Klaytn Node.\r\n             *\r\n             * @memberof Klay\r\n             * @method getAccounts\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getAccounts()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<string>>} An array of addresses owned by the Klaytn Node.\r\n             */\r\n            new Method({\r\n                name: 'getAccounts',\r\n                call: 'klay_accounts',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Encodes an object that contains AccountKey information using the Recursive Length Prefix (RLP) encoding scheme. Also you can use {@link Account#getRLPEncodingAccountKey|account.getRLPEncodingAccountKey} to get RLP-encoded AccountKey.\r\n             *\r\n             * @memberof Klay\r\n             * @method encodeAccountKey\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Using Klay.AccountKey(AccountKeyLegacy)\r\n             * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 1, key: {} })\r\n             * // Using Klay.AccountKey(AccountKeyPublic)\r\n             * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 2, key: { x: '0xdbac8...', y: '0x906d7...' } })\r\n             * // Using Klay.AccountKey(AccountKeyFail)\r\n             * const result = await caver.rpc.klay.encodeAccountKey({ keyType: 3, key: {} })\r\n             * // Using Klay.AccountKey(AccountKeyWeightedMultiSig)\r\n             * const result = await caver.rpc.klay.encodeAccountKey({\r\n             *     keyType: 4,\r\n             *     key: {\r\n             *         threshold: 2,\r\n             *         keys: [\r\n             *             { weight: 1, key: { x: '0xc734b...', y: '0x61a44...' } }\r\n             *             { weight: 1, key: { x: '0x12d45...', y: '0x8ef35...' } }\r\n             *         ]\r\n             *     }\r\n             * })\r\n             * // Using Klay.AccountKey(AccountKeyLegacy)\r\n             * const result = await caver.rpc.klay.encodeAccountKey({\r\n             *     keyType: 5,\r\n             *     key: [\r\n             *         { keyType: 2, key: { x: '0xe4a01...', y: '0xa5735...' } },\r\n             *         {\r\n             *             keyType: 4,\r\n             *             key: {\r\n             *                 threshold: 2,\r\n             *                 keys: [\r\n             *                     { weight: 1, key: { x: '0xe4a01...', y: '0xa5735...' } },\r\n             *                     { weight: 1, key: { x: '0x36f63...', y: '0x6fdf9...' } },\r\n             *                 ],\r\n             *             },\r\n             *         },\r\n             *         { keyType: 2, key: { x: '0xc8785...', y: '0x94c27...' } },\r\n             *     ],\r\n             * })\r\n             *\r\n             * // Using Account.AccountKey\r\n             * const accountKey = caver.account.create('0x{address in hex}', '0xf1d2e...').accountKey\r\n             * const result = await caver.rpc.klay.encodeAccountKey(accountKey)\r\n             *\r\n             * @param {Klay.AccountKey|Account.AccountKey} accountKey An object defines `keyType` and `key` inside or an instance of AccountKey.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} An RLP-encoded AccountKey.\r\n             */\r\n            new Method({\r\n                name: 'encodeAccountKey',\r\n                call: 'klay_encodeAccountKey',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputAccountKeyFormatter],\r\n            }),\r\n            /**\r\n             * Decodes An RLP-encoded AccountKey. Also you can use {@link AccountKeyDecoder.decode|caver.account.accountKey.decode} to decode An RLP-encoded AccountKey.\r\n             *\r\n             * @memberof Klay\r\n             * @method decodeAccountKey\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Decode an accountKeyLegacy\r\n             * const result = await caver.rpc.klay.decodeAccountKey('0x01c0')\r\n             * // Decode an accountKeyPublic\r\n             * const result = await caver.rpc.klay.decodeAccountKey('0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8')\r\n             * // Decode an accountKeyFail\r\n             * const result = await caver.rpc.klay.decodeAccountKey('0x03c0')\r\n             * // Decode an accountKeyWeightedMultiSig\r\n             * const result = await caver.rpc.klay.decodeAccountKey('0x04f84b02f848e301a102c734b50ddb229be5e929fc4aa8080ae8240a802d23d3290e5e6156ce029b110ee301a10212d45f1cc56fbd6cd8fc877ab63b5092ac77db907a8a42c41dad3e98d7c64dfb')\r\n             * // Decode an accountKeyRoleBased\r\n             * const result = await caver.rpc.klay.decodeAccountKey('0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c160')\r\n             *\r\n             * @param {string} encodedKey An RLP-encoded AccountKey.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.AccountKey>} An object defines `keyType` and `key` inside.\r\n             */\r\n            new Method({\r\n                name: 'decodeAccountKey',\r\n                call: 'klay_decodeAccountKey',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * An object defines the detailed information for EOA.\r\n             *\r\n             * @example\r\n             * {\r\n             *     nonce: 0,\r\n             *     balance: '0x',\r\n             *     humanReadable: false,\r\n             *     key: { keyType: 1, key: {} }\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.EOA\r\n             * @property {number} nonce - A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value.\r\n             * @property {string} balance - The amount of KLAY the account has.\r\n             * @property {boolean} humanReadable - A boolean value indicating that the account is associated with a human-readable address. Since {@link https://docs.klaytn.com/klaytn/design/accounts#human-readable-address-hra|HRA} is under development, this value is false for all accounts.\r\n             * @property {Klay.AccountKey} key - The key associated with this account.\r\n             */\r\n            /**\r\n             * An object defines the detailed information for SCA.\r\n             *\r\n             * @example\r\n             * {\r\n             *     nonce: 1,\r\n             *     balance: '0x',\r\n             *     humanReadable: false,\r\n             *     key: { keyType: 3, key: {} },\r\n             *     storageRoot: '0xd0ce6b9ba63cf727d48833bcaf69f398bb353e9a5b6235ac5bb3a8e95ff90ecf',\r\n             *     codeHash: '7pemrmP8fcguH/ut/SYHJoUSecfUIcUyeCpMf0sBYVI=',\r\n             *     codeFormat: 0\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.SCA\r\n             * @property {number} nonce - A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value.\r\n             * @property {string} balance - The amount of KLAY the account has.\r\n             * @property {boolean} humanReadable - A boolean value indicating that the account is associated with a human-readable address. Since {@link https://docs.klaytn.com/klaytn/design/accounts#human-readable-address-hra|HRA} is under development, this value is false for all accounts.\r\n             * @property {Klay.AccountKey} key - The key associated with this account.\r\n             * @property {string} codeHash - The hash of the account's smart contract code. This value is immutable, which means it is set only when the smart contract is created.\r\n             * @property {string} storageRoot - A 256-bit hash of the root of the Merkle Patricia Trie that contains the values of all the storage variables in the account.\r\n             * @property {number} codeFormat - A format of the code in this account. Currently, it supports EVM(0x00) only.\r\n             */\r\n            /**\r\n             * An object defines the Klaytn account.\r\n             *\r\n             * @example\r\n             * // EOA\r\n             * {\r\n             *     accType: 1,\r\n             *     account: {\r\n             *         nonce: 0,\r\n             *         balance: '0x',\r\n             *         humanReadable: false,\r\n             *         key: { keyType: 1, key: {} }\r\n             *     }\r\n             * }\r\n             * // SCA\r\n             * {\r\n             *     accType: 2,\r\n             *     account: {\r\n             *         nonce: 1,\r\n             *         balance: '0x',\r\n             *         humanReadable: false,\r\n             *         key: { keyType: 3, key: {} },\r\n             *         storageRoot: '0xd0ce6b9ba63cf727d48833bcaf69f398bb353e9a5b6235ac5bb3a8e95ff90ecf',\r\n             *         codeHash: '7pemrmP8fcguH/ut/SYHJoUSecfUIcUyeCpMf0sBYVI=',\r\n             *         codeFormat: 0\r\n             *     }\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.Account\r\n             * @property {number} accType - The account type number.\r\n             * @property {Klay.EOA|Klay.SCA} account - The key information object. For AccountKeyLegacy this field will be empty.\r\n             */\r\n            /**\r\n             * Returns the account information of a given address in the Klaytn.\r\n             * For more details about the types of an account in Klaytn, please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-account-types|Klaytn Account Types}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getAccount\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getAccount('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address of the account for which you want to get account information.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Account>} An object defines `keyType` and `key` inside.\r\n             */\r\n            new Method({\r\n                name: 'getAccount',\r\n                call: 'klay_getAccount',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the balance of the account of the given address in Klaytn.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBalance\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBalance('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address of the account for which you want to get balance.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The current balance for the given address in peb.\r\n             */\r\n            new Method({\r\n                name: 'getBalance',\r\n                call: 'klay_getBalance',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns code at a given address.\r\n             *\r\n             * @memberof Klay\r\n             * @method getCode\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getCode('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address to get the code from.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The code from the given address.\r\n             */\r\n            new Method({\r\n                name: 'getCode',\r\n                call: 'klay_getCode',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns `true` if an input account has a non-empty codeHash at the time of a specific block number.\r\n             * It returns `false` if the account is an EOA or a smart contract account which doesn't have codeHash.\r\n             * Please refer to {@link https://docs.klaytn.com/klaytn/design/accounts#smart-contract-accounts-scas|Smart Contract Account} for more details.\r\n             *\r\n             * @memberof Klay\r\n             * @method isContractAccount\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.isContractAccount('0x{address in hex}')\r\n             *\r\n             * @param {string} address The address you want to check for isContractAccount.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} `true` means the input parameter is an existing smart contract address.\r\n             */\r\n            new Method({\r\n                name: 'isContractAccount',\r\n                call: 'klay_isContractAccount',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Generates signed data specific to the Klaytn.\r\n             * Refer to {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/account#klay_sign|Klaytn Platform API - klay_sign} to know how the signature is generated\r\n             *\r\n             * This API provides the function to sign a message using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n             * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign the message.\r\n             * To sign a transaction with imported account in your Klaytn node, use {@link signTransaction|caver.rpc.klay.signTransaction}.\r\n             *\r\n             * @memberof Klay\r\n             * @method sign\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.sign('0x{address in hex}', '0xdeadbeaf')\r\n             *\r\n             * @param {string} address The address of the imported account to sign the message.\r\n             * @param {string} message Message to sign.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The signature made from an imported account.\r\n             */\r\n            new Method({\r\n                name: 'sign',\r\n                call: 'klay_sign',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputSignFormatter],\r\n            }),\r\n\r\n            // Block\r\n            /**\r\n             * Returns the number of the most recent block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockNumber()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The number of the most recent block in hex.\r\n             */\r\n            new Method({\r\n                name: 'getBlockNumber',\r\n                call: 'klay_blockNumber',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * An object for block from Klaytn.\r\n             *\r\n             * @example\r\n             * {\r\n             *     blockscore: '0x1',\r\n             *     extraData: '0xd883010602846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841dd5a72e9f6af1f59f18efd9d205314bed1077be5083318274e6284adf82806f3339d0f88d8cb97f297b9f6a239149224a4f26e01a5692f2392ffb0ab73b10d9600f8c9b8417a43d087a58a32299f4d5a647371e31ecd1298c1cdb5921b5e575a93cfd7d65f470f2fbd936b1b80206c73daba3fec2038bc25d521bbc21b428d3067598bd95501b8411678bb3221f448d4f9e2dd3e7bda57b0da954eb5f1dff350751b6fd895b4643f3f14b56742fe091db68c162b3e1a9dd17676a9f4a95445e295f00d1d146f49e801b841df4fef80626bc00f2a0048d7718a499defece1ac3e849aefc5c04f2691ec7951377b7022d8d6b20fecce5e03f5ea891597e0d9aadbba0f2f82c5d7230806a62c01',\r\n             *     gasUsed: '0x3ea49',\r\n             *     governanceData: '0x',\r\n             *     hash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *     logsBloom: '0x00000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000008000000000000000000000000000000000000000000000000000200008000000000000000000000000000000000000004010000000020000000000000000000800000000000000002000000010000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000002000000000000000000020000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000',\r\n             *     number: '0x3f79aa7',\r\n             *     parentHash: '0x777d344c8c59c4d8d0041bb4c2ee66e95ec110303fb59d3e329f80e7a9c9c617',\r\n             *     receiptsRoot: '0xffbae3190f858531ff785bcbdc70278d91c3d9becdd8b134b0ab7974b9ef3641',\r\n             *     reward: '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d',\r\n             *     size: '0x507',\r\n             *     stateRoot: '0xa60d0868bd41b63b4fd67e5a8f801c5949e89a8994a13426747890b77d6bc0c4',\r\n             *     timestamp: '0x610b3164',\r\n             *     timestampFoS: '0xc',\r\n             *     totalBlockScore: '0x3f79aa8',\r\n             *     transactions: [\r\n             *         {\r\n             *             blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *             blockNumber: '0x3f79aa7',\r\n             *             feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n             *             feePayerSignatures: [{\r\n             *                 V: '0x7f5',\r\n             *                 R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n             *                 S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n             *             }],\r\n             *             from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *             gas: '0x2dc6c0',\r\n             *             gasPrice: '0x5d21dba00',\r\n             *             hash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *             input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n             *             nonce: '0x0',\r\n             *             senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n             *             signatures: [  {\r\n             *                 V: '0x7f6',\r\n             *                 R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n             *                 S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n             *             }],\r\n             *             to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *             transactionIndex: '0x0',\r\n             *             type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n             *             typeInt: 49,\r\n             *             value: '0x0'\r\n             *         }\r\n             *     ],\r\n             *     transactionsRoot: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *     voteData: '0x'\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.Block\r\n             * @property {string} blockscore - The difficulty of mining in the blockchain network. The use of `blockScore` differs from the consensus of the network. Always 1 in the BFT consensus engine.\r\n             * @property {string} extraData - The \"extra data\" field of this block.\r\n             * @property {string} gasUsed - The gas in total that was used by all transactions in this block.\r\n             * @property {string} governanceData - RLP encoded governance configuration\r\n             * @property {string} hash - Hash of the block. `null` when it is a pending block.\r\n             * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is a pending block.\r\n             * @property {string} number - The block number. `null` when it is a pending block.\r\n             * @property {string} parentHash - Hash of the parent block.\r\n             * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n             * @property {string} reward - The address of the beneficiary to whom the block rewards were given\r\n             * @property {string} size - Integer the size of this block in bytes.\r\n             * @property {string} stateRoot - The root of the final state trie of the block.\r\n             * @property {string} timestamp - The unix timestamp for when the block was collated.\r\n             * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n             * @property {string} totalBlockScore - Integer of the total blockScore of the chain until this block.\r\n             * @property {Array.<Klay.Transaction>} transactions - Array of transaction objects, or 32-byte transaction hashes depending on the `returnTransactionObjects` parameter.\r\n             * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n             * @property {string} voteData - RLP encoded governance vote of the proposer.\r\n             * @property {string} [baseFeePerGas] - Base fee per gas.\r\n             */\r\n            /**\r\n             * Returns information about a block.\r\n             * If parameter is hex string, this will use {@link Klay#getBlockByHash|caver.rpc.klay.getBlockByHash}, if paramter is number type, this will use {@link Klay#getBlockByNumber|caver.rpc.klay.getBlockByNumber}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlock\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Use `caver.rpc.klay.getBlockByNumber`\r\n             * const result = await caver.rpc.klay.getBlock(0)\r\n             * // Use `caver.rpc.klay.getBlockByHash`\r\n             * const result = await caver.rpc.klay.getBlock('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n             *\r\n             * @param {string|number} blockHashOrNumber The block hash or block number.\r\n             * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Block>} An object includes block.\r\n             */\r\n            new Method({\r\n                name: 'getBlock',\r\n                call: 'klay_getBlockByNumber',\r\n                hexCall: 'klay_getBlockByHash',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\r\n            }),\r\n            /**\r\n             * Returns information about a block by block number.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockByNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockByNumber(0)\r\n             *\r\n             * @param {number} blockNumber The block number.\r\n             * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Block>} An object includes block.\r\n             */\r\n            new Method({\r\n                name: 'getBlockByNumber',\r\n                call: 'klay_getBlockByNumber',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\r\n            }),\r\n            /**\r\n             * Returns information about a block by block hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockByHash('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n             *\r\n             * @param {string} blockHash The block hash.\r\n             * @param {boolean} [returnTransactionObjects] (default `false`) If `true`, the returned block will contain all transactions as objects, and if `false`, it will only contain the transaction hashes.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Block>} An object includes block.\r\n             */\r\n            new Method({\r\n                name: 'getBlockByHash',\r\n                call: 'klay_getBlockByHash',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\r\n            }),\r\n            /**\r\n             * An object for block header from Klaytn.\r\n             *\r\n             * @example\r\n             *\r\n             * @typedef {object} Klay.Header\r\n             * @property {string} parentHash - Hash of the parent block.\r\n             * @property {string} reward - The address of the beneficiary to whom the block rewards were given.\r\n             * @property {string} stateRoot - The root of the final state trie of the block.\r\n             * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n             * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n             * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is pending block.\r\n             * @property {string} blockScore - Former difficulty. Always 1 in the BFT consensus engine.\r\n             * @property {string} number - The block number. `null` when it is pending block.\r\n             * @property {string} gasUsed - The total used gas by all transactions in this block.\r\n             * @property {string} timestamp - The Unix timestamp for when the block was collated.\r\n             * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n             * @property {string} extraData - The \"extra data\" field of this block.\r\n             * @property {string} governanceData - RLP encoded governance configuration.\r\n             * @property {string} hash - Hash of the current block.\r\n             * @property {string} [baseFeePerGas] - Base fee per gas.\r\n             * @property {string} [voteData] - RLP encoded governance vote of the proposer.\r\n             */\r\n            /**\r\n             * Returns a block header.\r\n             * If parameter is hex string, this will use {@link Klay#getHeaderByHash|caver.rpc.klay.getHeaderByHash}, if paramter is number type, this will use {@link Klay#getHeaderByNumber|caver.rpc.klay.getHeaderByNumber}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getHeader\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Use `caver.rpc.klay.getHeaderByNumber`\r\n             * const result = await caver.rpc.klay.getHeader(0)\r\n             * // Use `caver.rpc.klay.getHeaderByHash`\r\n             * const result = await caver.rpc.klay.getHeader('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n             *\r\n             * @param {string|number|BN|BigNumber} blockHashOrNumber The block hash or block number to query block header.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Header>} An object includes block header.\r\n             */\r\n            new Method({\r\n                name: 'getHeader',\r\n                call: 'klay_getHeaderByNumber',\r\n                hexCall: 'klay_getHeaderByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a block header by block number.\r\n             *\r\n             * @memberof Klay\r\n             * @method getHeaderByNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getHeaderByNumber(0)\r\n             * const result = await caver.rpc.klay.getHeaderByNumber('latest')\r\n             *\r\n             * @param {string|number|BN|BigNumber} blockNumberOrTag The block number or block tag string to query block header.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Header>} An object includes block header.\r\n             */\r\n            new Method({\r\n                name: 'getHeaderByNumber',\r\n                call: 'klay_getHeaderByNumber',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a block header by block hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getHeaderByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getHeaderByHash('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n             *\r\n             * @param {string} blockHash The block hash to query block header.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Header>} An object includes block header.\r\n             */\r\n            new Method({\r\n                name: 'getHeaderByHash',\r\n                call: 'klay_getHeaderByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * An object for transaction receipt from Klaytn.\r\n             *\r\n             * @example\r\n             * {\r\n             *     blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *     blockNumber: '0x3f79aa7',\r\n             *     contractAddress: null,\r\n             *     feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n             *     feePayerSignatures: [{\r\n             *         V: '0x7f5',\r\n             *         R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n             *         S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n             *     }],\r\n             *     from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *     gas: '0x2dc6c0',\r\n             *     gasPrice: '0x5d21dba00',\r\n             *     gasUsed: '0x3ea49',\r\n             *     hash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *     input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n             *     logs: [{\r\n             *         address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *         topics: [\r\n             *             '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n             *             '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n             *             '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *             '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n             *         ],\r\n             *         data: '0x',\r\n             *         blockNumber: '0x3f79aa7',\r\n             *         transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *         transactionIndex: '0x0',\r\n             *         blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *         logIndex: '0x0',\r\n             *         removed: false\r\n             *     }],\r\n             *     logsBloom: '0xr\n             *     nonce: '0x0',\r\n             *     senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n             *     signatures: [{\r\n             *         V: '0x7f6',\r\n             *         R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n             *         S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n             *     }],\r\n             *     to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *     transactionIndex: '0x0',\r\n             *     type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n             *     typeInt: 49,\r\n             *     value: '0x0'\r\n             * }\r\n             *\r\n             * @typedef {Klay.Transaction} Klay.TransactionReceipt\r\n             * @property {string} contractAddress - The contract address created, if the transaction was a contract creation, otherwise `null`.\r\n             * @property {string} gasUsed - The amount of gas used by this specific transaction alone.\r\n             * @property {Array.<Klay.Log>} logs - Array of log objects, which this transaction generated.\r\n             * @property {string} logsBloom - Bloom filter for light clients to quickly retrieve related logs.\r\n             * @property {string} status - `0x1` if the transaction was successful, `0x0` if the Klaytn Virtual Machine reverted the transaction.\r\n             * @property {string} transactionHash - Hash of the transaction.\r\n             */\r\n            /**\r\n             * An object for transaction receipt from Klaytn.\r\n             *\r\n             * @example\r\n             * {\r\n             *     address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *     topics: [\r\n             *         '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n             *         '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n             *         '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *         '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n             *     ],\r\n             *     data: '0x',\r\n             *     blockNumber: '0x3f79aa7',\r\n             *     transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *     transactionIndex: '0x0',\r\n             *     blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *     logIndex: '0x0',\r\n             *     removed: false\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.Log\r\n             * @property {string} logIndex - The log index position in the block.\r\n             * @property {string} transactionIndex - The index position of transactions where this log was created from.\r\n             * @property {string} transactionHash - Hash of the transactions this log was created from. null when pending.\r\n             * @property {string} blockHash - Hash of the block where this log was in. `null` when pending.\r\n             * @property {string} blockNumber - The block number where this log was in. `null` when pending.\r\n             * @property {string} address - Address from which this log originated.\r\n             * @property {string} data - Contains the non-indexed arguments of the log.\r\n             * @property {Array.<string>} topics - Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity: The first topic is the hash of the signature of the event (e.g., `Deposit(address,bytes32,uint256)`), except you declared the event with the `anonymous` specifier.).\r\n             */\r\n            /**\r\n             * Returns receipts included in a block identified by block hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockReceipts\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockReceipts('0x58482921af951cf42a069436ac9338de50fd963bdbea40e396f416f9ac96a08b')\r\n             *\r\n             * @param {string} blockHash The block hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<Klay.TransactionReceipt>>} The transaction receipts included in a block. If the target block contains no transaction, an empty array `[]` is returned. For detailed description of transaction receipt, please refer to {@link Klay#getTransactionReceipt|caver.rpc.klay.getTransactionReceipt}.\r\n             */\r\n            new Method({\r\n                name: 'getBlockReceipts',\r\n                call: 'klay_getBlockReceipts',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns the number of transactions in a block.\r\n             * If parameter is hex string, this will use {@link Klay#getBlockTransactionCountByHash|caver.rpc.klay.getBlockTransactionCountByHash}, if paramter is number type, this will use {@link Klay#klay_getBlockTransactionCountByNumber|caver.rpc.klay.klay_getBlockTransactionCountByNumber}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockTransactionCount\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Use `caver.rpc.klay.getBlockTransactionCountByNumber`\r\n             * const result = await caver.rpc.klay.getBlockTransactionCount(21249)\r\n             * // Use `caver.rpc.klay.getBlockTransactionCountByHash`\r\n             * const result = await caver.rpc.klay.getBlockTransactionCount('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n             *\r\n             * @param {string|number} blockHashOrNumber The block hash, block number or the block tag string (`genesis` or `latest`).\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The number of transactions in the given block in hex.\r\n             */\r\n            new Method({\r\n                name: 'getBlockTransactionCount',\r\n                call: 'klay_getBlockTransactionCountByNumber',\r\n                hexCall: 'klay_getBlockTransactionCountByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the number of transactions in a block matching the given block number.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockTransactionCountByNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockTransactionCountByNumber(21249)\r\n             *\r\n             * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The number of transactions in the given block in hex.\r\n             */\r\n            new Method({\r\n                name: 'getBlockTransactionCountByNumber',\r\n                call: 'klay_getBlockTransactionCountByNumber',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the number of transactions in a block matching the given block hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockTransactionCountByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockTransactionCountByHash('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n             *\r\n             * @param {string} blockHash The block hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The number of transactions in the given block in hex.\r\n             */\r\n            new Method({\r\n                name: 'getBlockTransactionCountByHash',\r\n                call: 'klay_getBlockTransactionCountByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * An object for block from Klaytn with consensus information.\r\n             *\r\n             * @example\r\n             * {\r\n             *     blockscore: '0x1',\r\n             *     committee: [\r\n             *     '0x571e53df607be97431a5bbefca1dffe5aef56f4d',\r\n             *     '0x5cb1a7dccbd0dc446e3640898ede8820368554c8',\r\n             *     '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n             *     '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'\r\n             *     ],\r\n             *     extraData: '0xd883010602846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841dd5a72e9f6af1f59f18efd9d205314bed1077be5083318274e6284adf82806f3339d0f88d8cb97f297b9f6a239149224a4f26e01a5692f2392ffb0ab73b10d9600f8c9b8417a43d087a58a32299f4d5a647371e31ecd1298c1cdb5921b5e575a93cfd7d65f470f2fbd936b1b80206c73daba3fec2038bc25d521bbc21b428d3067598bd95501b8411678bb3221f448d4f9e2dd3e7bda57b0da954eb5f1dff350751b6fd895b4643f3f14b56742fe091db68c162b3e1a9dd17676a9f4a95445e295f00d1d146f49e801b841df4fef80626bc00f2a0048d7718a499defece1ac3e849aefc5c04f2691ec7951377b7022d8d6b20fecce5e03f5ea891597e0d9aadbba0f2f82c5d7230806a62c01',\r\n             *     gasUsed: '0x3ea49',\r\n             *     governanceData: '0x',\r\n             *     hash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *     logsBloom: '0xr\n             *     number: '0x3f79aa7',\r\n             *     originProposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n             *     parentHash: '0x777d344c8c59c4d8d0041bb4c2ee66e95ec110303fb59d3e329f80e7a9c9c617',\r\n             *     proposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6',\r\n             *     receiptsRoot: '0xffbae3190f858531ff785bcbdc70278d91c3d9becdd8b134b0ab7974b9ef3641',\r\n             *     reward: '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d',\r\n             *     round: 0,\r\n             *     size: '0x507',\r\n             *     stateRoot: '0xa60d0868bd41b63b4fd67e5a8f801c5949e89a8994a13426747890b77d6bc0c4',\r\n             *     timestamp: '0x610b3164',\r\n             *     timestampFoS: '0xc',\r\n             *     totalBlockScore: '0x3f79aa8',\r\n             *     transactions: [\r\n             *        {\r\n             *             blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *             blockNumber: '0x3f79aa7',\r\n             *             contractAddress: null,\r\n             *             feePayer: '0xfee998d423d5bd2bf5b5c0f0acb4e3aae2bd2286',\r\n             *             feePayerSignatures: [{\r\n             *                 V: '0x7f5',\r\n             *                 R: '0xf9aff6f39feb7a18d3e1b8ab9f590f0227e465c72cfe05e8d7c9e390cbf1d349',\r\n             *                 S: '0x6e7317d121a3951a8cbca110be8cc86c5314349f8fb1c37f9af4cadf72fe89ec'\r\n             *             }],\r\n             *             from: '0x11eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *             gas: '0x2dc6c0',\r\n             *             gasPrice: '0x5d21dba00',\r\n             *             gasUsed: '0x3ea49',\r\n             *             input: '0x850ba1b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278000000000000000000000000000000000000000000000000000000000000002b352f38366264316536392d346263392d343239622d613632622d3039366134353231613964632e6a736f6e000000000000000000000000000000000000000000',\r\n             *             logs: [{\r\n             *                 address: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *                 topics: [\r\n             *                     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\r\n             *                     '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n             *                     '0x00000000000000000000000011eb23f57151a88d4bb53cc9c27355437138c278',\r\n             *                     '0x0000000000000000000000000000000000000000000000000000000000000872'\r\n             *                 ],\r\n             *                 data: '0x',\r\n             *                 blockNumber: '0x3f79aa7',\r\n             *                 transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *                 transactionIndex: '0x0',\r\n             *                 blockHash: '0x188d4531d668ae3da20d70d4cb4c5d96a0cc5190771f0920c56b461c4d356566',\r\n             *                 logIndex: '0x0',\r\n             *                     removed: false\r\n             *             }],\r\n             *             logsBloom: '0xr\n             *             nonce: '0x0',\r\n             *             senderTxHash: '0xeca2d3650403a1e27af0bbe9878dcbb248d764fc88751f35a6e05636d2ad9e78',\r\n             *             signatures: [{\r\n             *                     V: '0x7f6',\r\n             *                     R: '0x9ea78985b004afa86acd455c017da374ec1aec885f963ec8134a38f7ede451b0',\r\n             *                     S: '0xfac0e417f7f7b15023e3f5ac95f1fb5b3280746a2eff04394ddedbdd259fc1'\r\n             *             }],\r\n             *             status: '0x1',\r\n             *             to: '0x78ca9a1105c3392b56625f3fcfd149b29322c56f',\r\n             *             transactionHash: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *             transactionIndex: '0x0',\r\n             *             type: 'TxTypeFeeDelegatedSmartContractExecution',\r\n             *             typeInt: 49,\r\n             *             value: '0x0'\r\n             *         }\r\n             *     ],\r\n             *     transactionsRoot: '0x109d2836d9fde9d8081a27dd6ac545fd7a53530a56bdc40f2a11e5d6dbc2a09f',\r\n             *     voteData: '0x'\r\n             * }\r\n             *\r\n             * @typedef {object} Klay.BlockWithConsensusInfo\r\n             * @property {string} blockscore - The difficulty of mining in the blockchain network. The use of `blockScore` differs from the consensus of the network. Always 1 in the BFT consensus engine.\r\n             * @property {Array.<string>} committee - Array of addresses of committee members of this block. The committee is a subset of validators who participated in the consensus protocol for this block.\r\n             * @property {string} extraData - The \"extra data\" field of this block.\r\n             * @property {string} gasUsed - The gas in total that was used by all transactions in this block.\r\n             * @property {string} governanceData - RLP encoded governance configuration\r\n             * @property {string} hash - Hash of the block. `null` when it is a pending block.\r\n             * @property {string} logsBloom - The bloom filter for the logs of the block. `null` when it is a pending block.\r\n             * @property {string} number - The block number. `null` when it is a pending block.\r\n             * @property {string} originProposer - The proposal of 0 round at the same block number.\r\n             * @property {string} parentHash - Hash of the parent block.\r\n             * @property {string} proposer - The address of the block proposer.\r\n             * @property {string} receiptsRoot - The root of the receipts trie of the block.\r\n             * @property {string} reward - The address of the beneficiary to whom the block rewards were given.\r\n             * @property {number} round - The round number.\r\n             * @property {string} size - Integer the size of this block in bytes.\r\n             * @property {string} stateRoot - The root of the final state trie of the block.\r\n             * @property {string} timestamp - The unix timestamp for when the block was collated.\r\n             * @property {string} timestampFoS - The fraction of a second of the timestamp for when the block was collated.\r\n             * @property {string} totalBlockScore - Integer of the total blockScore of the chain until this block.\r\n             * @property {Array.<Klay.TransactionReceipt>} transactions - Array of transaction receipt objects.\r\n             * @property {string} transactionsRoot - The root of the transaction trie of the block.\r\n             * @property {string} voteData - RLP encoded governance vote of the proposer.\r\n             * @property {string} [baseFeePerGas] - Base fee per gas.\r\n             */\r\n            /**\r\n             * Returns a block with consensus information matched by the given hash.\r\n             * If parameter is hex string, this will use {@link Klay#getBlockWithConsensusInfoByHash|caver.rpc.klay.getBlockWithConsensusInfoByHash}, if paramter is number type, this will use {@link Klay#klay_getBlockWithConsensusInfoByNumber|caver.rpc.klay.klay_getBlockWithConsensusInfoByNumber}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockWithConsensusInfo\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Use `caver.rpc.klay.getBlockWithConsensusInfoByNumber`\r\n             * const result = await caver.rpc.klay.getBlockWithConsensusInfo(21249)\r\n             * // Use `caver.rpc.klay.getBlockWithConsensusInfoByHash`\r\n             * const result = await caver.rpc.klay.getBlockWithConsensusInfo('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n             *\r\n             * @param {string|number} blockHashOrNumber The block hash, block number or the block tag string (`genesis` or `latest`).\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n             */\r\n            new Method({\r\n                name: 'getBlockWithConsensusInfo',\r\n                call: 'klay_getBlockWithConsensusInfoByNumber',\r\n                hexCall: 'klay_getBlockWithConsensusInfoByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a block with consensus information matched by the given block number.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockWithConsensusInfoByNumber\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockWithConsensusInfoByNumber(21249)\r\n             *\r\n             * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n             */\r\n            new Method({\r\n                name: 'getBlockWithConsensusInfoByNumber',\r\n                call: 'klay_getBlockWithConsensusInfoByNumber',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a block with consensus information matched by the given hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getBlockWithConsensusInfoByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getBlockWithConsensusInfoByHash('0x4584bea6b8b2abe7f024d1e63dd0571cfd28cd5157b4f6cb2ac4160a7b0057e0')\r\n             *\r\n             * @param {string} blockHash The block hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.BlockWithConsensusInfo>} An object includes block with consensus information.\r\n             */\r\n            new Method({\r\n                name: 'getBlockWithConsensusInfoByHash',\r\n                call: 'klay_getBlockWithConsensusInfoByHash',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a list of all validators in the committee at the specified block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getCommittee\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getCommittee()\r\n             *\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<string>>} Addresses of all validators in the committee at the given block.\r\n             */\r\n            new Method({\r\n                name: 'getCommittee',\r\n                call: 'klay_getCommittee',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the size of the committee at the specified block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getCommitteeSize\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getCommitteeSize()\r\n             *\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<number>} The size of the committee at the given block.\r\n             */\r\n            new Method({\r\n                name: 'getCommitteeSize',\r\n                call: 'klay_getCommitteeSize',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns a list of all validators of the council at the specified block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getCouncil\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getCouncil()\r\n             *\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<string>>} An array of validator addresses of the council at the given block, or null when no council was found.\r\n             */\r\n            new Method({\r\n                name: 'getCouncil',\r\n                call: 'klay_getCouncil',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the size of the council at the specified block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getCouncilSize\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getCouncilSize()\r\n             *\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<number>} The size of the council at the given block.\r\n             */\r\n            new Method({\r\n                name: 'getCouncilSize',\r\n                call: 'klay_getCouncilSize',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns the value from a storage position at a given address.\r\n             *\r\n             * @memberof Klay\r\n             * @method getStorageAt\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1')\r\n             *\r\n             * @param {string} address The address to get the storage from.\r\n             * @param {number} position The index position of the storage. For more information on calculating the position, refer to {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/block#klay_getstorageat|klay_getStorageAt}.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The value at this storage position.\r\n             */\r\n            new Method({\r\n                name: 'getStorageAt',\r\n                call: 'klay_getStorageAt',\r\n                params: 3,\r\n                inputFormatter: [formatters.inputAddressFormatter, utils.numberToHex, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns `true` if client is actively mining new blocks.\r\n             *\r\n             * Currently, every node is on mining mode by default to resend transactions.\r\n             * Please note that actual \"mining\" process is only done by Consensus Nodes (CNs).\r\n             *\r\n             * @memberof Klay\r\n             * @method isMining\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.isMining()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} `true` if the client is mining, otherwise `false`.\r\n             */\r\n            new Method({\r\n                name: 'isMining',\r\n                call: 'klay_mining',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * An object for block from Klaytn with consensus information.\r\n             *\r\n             * @example\r\n             * {\r\n             *     startingBlock: 100,\r\n             *     currentBlock: 312,\r\n             *     highestBlock: 512,\r\n             *     knownStates: 234566,\r\n             *     pulledStates: 123455\r\n             * }\r\n             *\r\n             * @typedef {Klay.Block} Klay.SyncObject\r\n             * @property {string} startingBlock - The block number in hex where the sync started.\r\n             * @property {string} currentBlock - The block number in hex where the node currently synced to.\r\n             * @property {string} highestBlock - The estimated block number in hex to sync to.\r\n             * @property {string} knownStates - The estimated states in hex to download.\r\n             * @property {string} pulledStates - The already downloaded states in hex.\r\n             */\r\n            /**\r\n             * Returns an object with data about the sync status or false.\r\n             *\r\n             * @memberof Klay\r\n             * @method isSyncing\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.isSyncing()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.SyncObject|boolean>} `false` if the Klaytn Node is not syncing. Otherwise, a sync object is returned.\r\n             */\r\n            new Method({\r\n                name: 'isSyncing',\r\n                call: 'klay_syncing',\r\n                params: 0,\r\n            }),\r\n\r\n            // Transaction\r\n            /**\r\n             * An object for block from Klaytn with consensus information.\r\n             *\r\n             * @example\r\n             * {\r\n             *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n             *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n             * }\r\n             *\r\n             * @typedef {Klay.Block} Klay.CallObject\r\n             * @property {string} [to] - The address the transaction is directed to. This can be omitted when testing the deployment of a new contract.\r\n             * @property {string} [input] - The hash of the method signature and encoded parameters. You can use {@link ABI#encodeFunctionCall|caver.abi.encodeFunctionCall}.\r\n             * @property {string} [from] - The address the transaction is sent from.\r\n             * @property {string} [gas] - The gas provided for the transaction execution. `klay_call`(which is called via `caver.rpc.klay.call`) consumes zero gas, but this parameter may be needed by some executions.\r\n             * @property {string} [gasPrice] - The gasPrice used for each paid gas.\r\n             * @property {string} [value] - The value sent with this transaction in `peb`.\r\n             */\r\n            /**\r\n             * Executes a new message call immediately without sending a transaction on the blockchain.\r\n             * It returns data or an error object of JSON RPC if an error occurs.\r\n             *\r\n             * @memberof Klay\r\n             * @method call\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.call({\r\n             *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n             *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n             * })\r\n             *\r\n             * @param {Klay.CallObject} callObject A transaction call object.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The returned data of the call. e.g., the return value of a smart contract function.\r\n             */\r\n            new Method({\r\n                name: 'call',\r\n                call: 'klay_call',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Generates and returns an estimate of how much `gas` is necessary to allow a transaction to complete.\r\n             * The transaction from this method will not be added to the blockchain.\r\n             *\r\n             * @memberof Klay\r\n             * @method estimateGas\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.estimateGas({\r\n             *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n             *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n             * })\r\n             *\r\n             * @param {Klay.CallObject} callObject A transaction call object.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The amount of gas used.\r\n             */\r\n            new Method({\r\n                name: 'estimateGas',\r\n                call: 'klay_estimateGas',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputCallFormatter],\r\n            }),\r\n            /**\r\n             * Generates and returns an estimate of how much `computation cost` will be spent to execute the transaction.\r\n             * Klaytn limits the computation cost of a transaction to `100000000` currently not to take too much time by a single transaction.\r\n             * The transaction will not be added to the blockchain like {@link Klay#estimateGas|caver.rpc.klay.estimateGas}.\r\n             *\r\n             * @memberof Klay\r\n             * @method estimateComputationCost\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.estimateComputationCost({\r\n             *     to: '0x5481a10a47C74f800BDF4955BD77550881bde91C', // contract address\r\n             *     input: '0x70a08231000000000000000000000000ddc2002b729676dfd906484d35bb02a8634d7040'\r\n             * })\r\n             *\r\n             * @param {Klay.CallObject} callObject A transaction call object.\r\n             * @param {string|number} [blockNumber] A block number, or the string `latest` or `earliest`. If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The amount of computation cost used.\r\n             */\r\n            new Method({\r\n                name: 'estimateComputationCost',\r\n                call: 'klay_estimateComputationCost',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns information about a transaction by `block` and `transaction index` position.\r\n             * If parameter is hex string, this will use {@link Klay#getTransactionByBlockHashAndIndex|caver.rpc.klay.getTransactionByBlockHashAndIndex}, if paramter is number type, this will use {@link Klay#getTransactionByBlockNumberAndIndex|caver.rpc.klay.getTransactionByBlockNumberAndIndex}.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionFromBlock\r\n             * @instance\r\n             *\r\n             * @example\r\n             * // Use `caver.rpc.klay.getTransactionByBlockNumberAndIndex`\r\n             * const result = await caver.rpc.klay.getTransactionFromBlock(183, 0)\r\n             * // Use `caver.rpc.klay.getTransactionByBlockHashAndIndex`\r\n             * const result = await caver.rpc.klay.getTransactionFromBlock('0xc9f643c0ebe84932c10695cbc9eb75228af09516931b58952de3e12c21a50576', 0)\r\n             *\r\n             * @param {string|number} blockHashOrNumber The block hash or block number.\r\n             * @param {number} index A transaction index position inside the block.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionFromBlock',\r\n                call: 'klay_getTransactionByBlockNumberAndIndex',\r\n                hexCall: 'klay_getTransactionByBlockHashAndIndex',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\r\n            }),\r\n            /**\r\n             * Returns information about a transaction by `block number` and `transaction index` position.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionByBlockNumberAndIndex\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionByBlockNumberAndIndex(183, 0)\r\n             *\r\n             * @param {string|number} blockNumber The block number or the block tag string (`genesis` or `latest`).\r\n             * @param {number} index A transaction index position inside the block.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionByBlockNumberAndIndex',\r\n                call: 'klay_getTransactionByBlockNumberAndIndex',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\r\n            }),\r\n            /**\r\n             * Returns information about a transaction by `block hash` and `transaction index` position.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionByBlockHashAndIndex\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionByBlockHashAndIndex('0xc9f643c0ebe84932c10695cbc9eb75228af09516931b58952de3e12c21a50576', 0)\r\n             *\r\n             * @param {string} blockHash The block hash.\r\n             * @param {number} index A transaction index position inside the block.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionByBlockHashAndIndex',\r\n                call: 'klay_getTransactionByBlockHashAndIndex',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\r\n            }),\r\n            /**\r\n             * Returns the information about a transaction requested by transaction hash.\r\n             * This will be same with {@link Klay#getTransactionByHash|caver.rpc.klay.getTransactionByHash}\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransaction\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransaction('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n             *\r\n             * @param {string} transactionHash A transaction hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransaction',\r\n                call: 'klay_getTransactionByHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns the information about a transaction requested by transaction hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionByHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n             *\r\n             * @param {string} transactionHash A transaction hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionByHash',\r\n                call: 'klay_getTransactionByHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns the information about a transaction requested by the sender transaction hash.\r\n             * Please note that this API returns the correct result only if the indexing feature is enabled in the node by `--sendertxhashindexing`.\r\n             * Use {@link Klay#isSenderTxHashIndexingEnabled|caver.rpc.klay.isSenderTxHashIndexingEnabled} to check if the indexing feature is enabled or not.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionBySenderTxHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionBySenderTxHash('0x991d2e63b91104264d2886fb2ae2ccdf90551377af4e334b313abe123a5406aa')\r\n             *\r\n             * @param {string} senderTxHash A sedner transaction hash. See {@link https://docs.klaytn.com/klaytn/design/transactions#sendertxhash|SenderTxHash} for more detail.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.Transaction>} A transaction object.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionBySenderTxHash',\r\n                call: 'klay_getTransactionBySenderTxHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns the receipt of a transaction by transaction hash.\r\n             * Receipt is not available for `pending` transactions whose transactions have not yet been processed.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionReceipt\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionReceipt('0xdb63fb385e51fbfd84a98873c994aef622c5f1c72c5760a9ff95c55bbfd99898')\r\n             *\r\n             * @param {string} transactionHash A transaction hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.TransactionReceipt>} A transaction receipt object, or null when no receipt was found.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionReceipt',\r\n                call: 'klay_getTransactionReceipt',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Returns the receipt of a transaction by sender transaction hash.\r\n             *\r\n             * Please note that this API returns the correct result only if the indexing feature is enabled in the node by `--sendertxhashindexing`.\r\n             * Use {@link Klay#isSenderTxHashIndexingEnabled|caver.rpc.klay.isSenderTxHashIndexingEnabled} to check if the indexing feature is enabled or not.\r\n             *\r\n             * Receipt is not available for `pending` transactions whose transactions have not yet been processed.\r\n             *\r\n             * @memberof Klay\r\n             * @method getTransactionReceipt\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getTransactionReceipt('0xdb63fb385e51fbfd84a98873c994aef622c5f1c72c5760a9ff95c55bbfd99898')\r\n             *\r\n             * @param {string} senderTxHash A sedner transaction hash. See {@link https://docs.klaytn.com/klaytn/design/transactions#sendertxhash|SenderTxHash} for more detail.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.TransactionReceipt>} A transaction receipt object, or null when no receipt was found.\r\n             */\r\n            new Method({\r\n                name: 'getTransactionReceiptBySenderTxHash',\r\n                call: 'klay_getTransactionReceiptBySenderTxHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Sends a signed transaction to the Klaytn.\r\n             * The signedTransaction parameter can be a \"RLP-encoded signed transaction\".\r\n             * You can get the RLP-encoded transaction of a signed transaction using transaction.getRLPEncoding.\r\n             * For convenience, this also accepts a {@link module:Transaction.Transaction|signed transaction instance} as parameter which has valid `signatures` (and `feePayerSignatures`) already.\r\n             *\r\n             * @memberof Klay\r\n             * @method sendRawTransaction\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.sendRawTransaction('0x08f88...')\r\n             *\r\n             * @param {string|module:Transaction.Transaction} signedTransaction An RLP-encoded signed transaction or an instance of signed transaction.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n             */\r\n            new Method({\r\n                name: 'sendRawTransaction',\r\n                call: 'klay_sendRawTransaction',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Sends a signed transaction to the Klaytn.\r\n             * The signedTransaction parameter can be a \"RLP-encoded signed transaction\".\r\n             * You can get the RLP-encoded transaction of a signed transaction using transaction.getRLPEncoding.\r\n             * For convenience, this also accepts a {@link module:Transaction.Transaction|signed transaction instance} as parameter which has valid `signatures` (and `feePayerSignatures`) already.\r\n             *\r\n             * @memberof Klay\r\n             * @method submitTransaction\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.submitTransaction('0x08f88...')\r\n             *\r\n             * @param {string|module:Transaction.Transaction} signedTransaction An RLP-encoded signed transaction or an instance of signed transaction.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n             */\r\n            new Method({\r\n                name: 'submitTransaction',\r\n                call: 'klay_sendRawTransaction',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * Signs a transaction as a transaction `sender` with an \"imported account's private key\" in your Klaytn Node and propagates the transaction to the Klaytn.\r\n             *\r\n             * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n             * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n             *\r\n             * @memberof Klay\r\n             * @method sendTransaction\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const tx = caver.transaction.valueTransfer.create({\r\n             *     from: '0x{address in hex}',\r\n             *     to: '0x{address in hex}',\r\n             *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n             *     gas: 25000,\r\n             * })\r\n             * const result = await caver.rpc.klay.sendTransaction(tx)\r\n             *\r\n             * @param {module:Transaction.Transaction} transaction An instance of a transaction to be sent to the Klaytn.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n             */\r\n            new Method({\r\n                name: 'sendTransaction',\r\n                call: 'klay_sendTransaction',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputTransactionFormatter],\r\n            }),\r\n            /**\r\n             * Signs a fee delegated transaction as a transaction `fee payer` with an \"imported account's private key\" in your Klaytn Node and propagates the transaction to the Klaytn.\r\n             *\r\n             * Before using sendTransaction as a fee payer, the transaction sender must have signed with valid signature(s) and the `nonce` must have been defined.\r\n             *\r\n             * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n             * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n             *\r\n             * @memberof Klay\r\n             * @method sendTransactionAsFeePayer\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const tx = caver.transaction.feeDelegatedValueTransfer.create({\r\n             *     from: '0x{address in hex}',\r\n             *     to: '0x{address in hex}',\r\n             *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n             *     gas: 25000,\r\n             *     gas: 50000,\r\n             *     nonce: 1,\r\n             *     signatures: [\r\n             *         [\r\n             *             '0x4e43',\r\n             *             '0x873e9db6d055596a8f79a6a2761bfb464cbc1b352ac1ce53770fc23bb16d929c',\r\n             *             '0x15d206781cc8ac9ffb02c08545cb832e1f1700b46b886d72bb0cfeb4a230871e',\r\n             *         ],\r\n             *     ],\r\n             *     feePayer: '0x3af68ad73f45a1e7686e8fcd23e910625ef2186e', // The address of imported account in Klaytn Node\r\n             * })\r\n             * const result = await caver.rpc.klay.sendTransactionAsFeePayer(tx)\r\n             *\r\n             * @param {module:Transaction.FeeDelegatedTransaction} transaction An instance of fee delegated transaction to send to the Klaytn.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {PromiEvent} A promise combined event emitter. It will be resolved when a {@link Klay.TransactionReceipt|transaction receipt} is available. And for event emitter, `transactionHash`('string' type) which is fired right after a transaction is sent and a transaction hash is available, `receipt`('{@link Klay.TransactionReceipt|TransactionReceipt}' type) which is fired when a transaction receipt is available and `error`('Error' type) which is fired if an error occurs during sending. On an out-of-gas error, the second parameter is the receipt.\r\n             */\r\n            new Method({\r\n                name: 'sendTransactionAsFeePayer',\r\n                call: 'klay_sendTransactionAsFeePayer',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputTransactionFormatter],\r\n            }),\r\n            /**\r\n             * An object defines the signed transaction from the Node.\r\n             *\r\n             * @typedef {object} Klay.SignedTransaction\r\n             * @property {string} raw - An RLP-encoded signed transaction.\r\n             * @property {Klay.SignedTransactionDetail} tx - Block number where this transaction was in.\r\n             */\r\n            /**\r\n             * An object defines the signed transaction detail information.\r\n             *\r\n             * @typedef {object} Klay.SignedTransactionDetail\r\n             * @property {string} [codeFormat] - The code format of smart contract code.\r\n             * @property {string} [feePayer] - Address of the fee payer.\r\n             * @property {Array.<Klay.SignatureData>} [feePayerSignatures] - An array of fee payer's signature objects. A signature object contains three fields (V, R, and S)\r\n             * @property {string} [feeRatio] - Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.\r\n             * @property {string} from - Address of the sender.\r\n             * @property {string} gas - Gas provided by the sender.\r\n             * @property {string} gasPrice - Gas price provided by the sender in peb.\r\n             * @property {string} hash - Hash of the transaction.\r\n             * @property {boolean} [humanReadable] - `true` if the address is humanReadable, `false` if the address is not humanReadable.\r\n             * @property {string} [key] - The RLP-encoded AccountKey used to update AccountKey of an Klaytn account. See {@link https://docs.klaytn.com/klaytn/design/accounts#account-key|AccountKey} for more details.\r\n             * @property {string} [input] - The data sent along with the transaction.\r\n             * @property {string} nonce - The number of transactions made by the sender prior to this one.\r\n             * @property {Array.<Klay.SignatureData>} signatures - An array of signature objects. A signature object contains three fields (V, R, and S).\r\n             * @property {string} to - Address of the receiver. null when it is a contract deploying transaction.\r\n             * @property {string} type - A string representing the type of the transaction.\r\n             * @property {number} typeInt - An integer representing the type of the transaction.\r\n             * @property {string} value - Value transferred in peb.\r\n             */\r\n            /**\r\n             * Signs a transaction as a transaction sender with an \"imported account's private key\" in your Klaytn Node.\r\n             *\r\n             * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n             * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n             *\r\n             * @memberof Klay\r\n             * @method signTransaction\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const tx = caver.transaction.valueTransfer.create({\r\n             *     from: '0x{address in hex}',\r\n             *     to: '0x{address in hex}',\r\n             *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n             *     gas: 25000,\r\n             * })\r\n             * const result = await caver.rpc.klay.signTransaction(tx)\r\n             *\r\n             * @param {module:Transaction.Transaction} transaction An instance of a transaction to sign.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.SignedTransaction>} An object includes signed transaction.\r\n             */\r\n            new Method({\r\n                name: 'signTransaction',\r\n                call: 'klay_signTransaction',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputTransactionFormatter],\r\n            }),\r\n            /**\r\n             * Signs a transaction as a transaction fee payer with an \"imported account's private key\" in your Klaytn Node.\r\n             *\r\n             * This API provides the function to sign a transaction using an {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_importrawkey|imported account} in your Klaytn node.\r\n             * The imported account in your node must be {@link https://docs.klaytn.com/dapp/json-rpc/api-references/personal#personal_unlockaccount|unlocked} to sign a transaction.\r\n             *\r\n             * @memberof Klay\r\n             * @method signTransactionAsFeePayer\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const tx = caver.transaction.feeDelegatedValueTransfer.create({\r\n             *     from: '0x{address in hex}',\r\n             *     to: '0x{address in hex}',\r\n             *     value: caver.utils.converToPeb(10, 'KLAY'),\r\n             *     gas: 25000,\r\n             *     gas: 50000,\r\n             *     nonce: 1,\r\n             *     signatures: [\r\n             *         [\r\n             *             '0x4e43',\r\n             *             '0x873e9db6d055596a8f79a6a2761bfb464cbc1b352ac1ce53770fc23bb16d929c',\r\n             *             '0x15d206781cc8ac9ffb02c08545cb832e1f1700b46b886d72bb0cfeb4a230871e',\r\n             *         ],\r\n             *     ],\r\n             *     feePayer: '0x3af68ad73f45a1e7686e8fcd23e910625ef2186e', // The address of imported account in Klaytn Node\r\n             * })\r\n             * const result = await caver.rpc.klay.signTransactionAsFeePayer(tx)\r\n             *\r\n             * @param {module:Transaction.FeeDelegatedTransaction} transaction An instance of a transaction to sign.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.SignedTransaction>} An object includes signed transaction.\r\n             */\r\n            new Method({\r\n                name: 'signTransactionAsFeePayer',\r\n                call: 'klay_signTransactionAsFeePayer',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputTransactionFormatter],\r\n            }),\r\n            /**\r\n             * An object defines the decoded anchored data.\r\n             *\r\n             * @typedef {object} Klay.AnchoredData\r\n             * @property {string} BlockHash - Hash of the child chain block that this anchoring transaction was performed.\r\n             * @property {number} BlockNumber - The child chain block number that this anchoring transaction was performed.\r\n             * @property {string} ParentHash - Hash of the parent block.\r\n             * @property {string} TxHash - The root of the transaction trie of the block.\r\n             * @property {string} StateRootHash - The root of the final state trie of the block.\r\n             * @property {string} ReceiptHash - The root of the receipts trie of the block.\r\n             * @property {number} BlockCount - The number of blocks generated during this anchoring period. In most cases, this number is equal to the child chain's `SC_TX_PERIOD`, except the case that this transaction was the first anchoring tx after turning on the anchoring.\r\n             * @property {number} TxCount - The number of transactions generated in the child chain during this anchoring period.\r\n             */\r\n            /**\r\n             * Returns the decoded anchored data in the transaction for the given transaction hash.\r\n             *\r\n             * @memberof Klay\r\n             * @method getDecodedAnchoringTransactionByHash\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getDecodedAnchoringTransactionByHash('0x59831a092a9f0b48018848f5dd88a457efdbfabec13ea07cd769686741a1cd13')\r\n             *\r\n             * @param {string} transactionHash A transaction hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.AnchoredData>} An object includes signed transaction.\r\n             */\r\n            new Method({\r\n                name: 'getDecodedAnchoringTransactionByHash',\r\n                call: 'klay_getDecodedAnchoringTransactionByHash',\r\n                params: 1,\r\n            }),\r\n            new Method({\r\n                name: 'getDecodedAnchoringTransaction',\r\n                call: 'klay_getDecodedAnchoringTransactionByHash',\r\n                params: 1,\r\n            }),\r\n            /**\r\n             * An object defines fee history.\r\n             *\r\n             * @typedef {object} Klay.FeeHistoryResult\r\n             * @property {string} oldestBlock - Lowest number block of returned range.\r\n             * @property {string[]} baseFeePerGas - An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.\r\n             * @property {string[][]} reward - A two-dimensional array of effective priority fees per gas at the requested block percentiles.\r\n             * @property {number[]} gasUsedRatio - An array of gasUsed/gasLimit in the block.\r\n             */\r\n            /**\r\n             * Returns fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.\r\n             *\r\n             * @memberof Klay\r\n             * @method getFeeHistory\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getFeeHistory(16, 'latest', [0.1, 0.2, 0.3])\r\n             *\r\n             * @param {number|BigNumber|BN|string} blockCount Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\r\n             * @param {number|BigNumber|BN|string} lastBlock Highest number block (or block tag string) of the requested range.\r\n             * @param {number[]} rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. (Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`)\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.FeeHistoryResult>} Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.\r\n             */\r\n            new Method({\r\n                name: 'getFeeHistory',\r\n                call: 'klay_feeHistory',\r\n                params: 3,\r\n                inputFormatter: [utils.numberToHex, formatters.inputBlockNumberFormatter, null],\r\n            }),\r\n            /**\r\n             * Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.\r\n             * Since Klaytn has a fixed gas price, this `caver.rpc.klay.getMaxPriorityFeePerGas` returns the gas price set by Klaytn.\r\n             *\r\n             * @memberof Klay\r\n             * @method getMaxPriorityFeePerGas\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getMaxPriorityFeePerGas()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} As a suggested value for the gas tip cap, the current Klaytn uses a fixed gas price, so the gasPrice value is returned.\r\n             */\r\n            new Method({\r\n                name: 'getMaxPriorityFeePerGas',\r\n                call: 'klay_maxPriorityFeePerGas',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns an upper bound gas price.\r\n             *\r\n             * @memberof Klay\r\n             * @method getUpperBoundGasPrice\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getUpperBoundGasPrice()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} An upper bound gas price\r\n             */\r\n            new Method({\r\n                name: 'getUpperBoundGasPrice',\r\n                call: 'klay_upperBoundGasPrice',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns a lower bound gas price.\r\n             *\r\n             * @memberof Klay\r\n             * @method getLowerBoundGasPrice\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getLowerBoundGasPrice()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} A lower bound gas price\r\n             */\r\n            new Method({\r\n                name: 'getLowerBoundGasPrice',\r\n                call: 'klay_lowerBoundGasPrice',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * An object defines an access list result that includes accessList and gasUsed.\r\n             *\r\n             * @typedef {object} Klay.AccessListResult\r\n             * @property {Klay.AccessList} accessList - The list of addresses and storage keys that will be used by that transaction. The list could change when the transaction is actually mined.\r\n             * @property {string} gasUsed - The estimated amount of gas used.\r\n             */\r\n            /**\r\n             * Klay.AccessList is a list of access tuple.\r\n             *\r\n             * @typedef {Klay.AccessTuple[]} Klay.AccessList\r\n             */\r\n            /**\r\n             * The element type of an access list.\r\n             *\r\n             * @typedef {object} Klay.AccessTuple\r\n             * @property {string} address - An address that the transaction plans to access.\r\n             * @property {string[]} storageKeys - The storage slots that the transaction plans to access.\r\n             */\r\n            /**\r\n             * Returns a list of addresses and storage keys used by the transaction, plus the gas consumed when the access list is added.\r\n             *\r\n             * @memberof Klay\r\n             * @method createAccessList\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const txArgs = {\r\n             *     from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312',\r\n             *     data: '0x20965255',\r\n             *     gasPrice: '0x3b9aca00',\r\n             *     gas: '0x3d0900',\r\n             *     to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'\r\n             * }\r\n             * const result = await caver.rpc.klay.createAccessList(txArgs, 'latest')\r\n             *\r\n             * @param {Klay.CallObject} callObject A transaction call object.\r\n             * @param {number|BigNumber|BN|string} [blockParameter] A block number, blockhash or the block tag string (`latest` or `earliest`). If omitted, `latest` will be used.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Klay.AccessListResult>} An accessListResult for the given transaction\r\n             */\r\n            new Method({\r\n                name: 'createAccessList',\r\n                call: 'klay_createAccessList',\r\n                params: 2,\r\n                inputFormatter: [formatters.inputTransactionFormatter, formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n\r\n            // Configuration\r\n            /**\r\n             * Returns the current client version of a Klaytn node.\r\n             *\r\n             * @memberof Klay\r\n             * @method getClientVersion\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getClientVersion()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The current client version of a Klaytn node.\r\n             */\r\n            new Method({\r\n                name: 'getClientVersion',\r\n                call: 'klay_clientVersion',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns the current price per gas in peb for the given block.\r\n             *\r\n             * @memberof Klay\r\n             * @method getGasPriceAt\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getGasPriceAt()\r\n             *\r\n             * @param {number} [blockNumber] The block number. If omitted, the latest unit price will be returned.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The current gas price in peb.\r\n             */\r\n            new Method({\r\n                name: 'getGasPriceAt',\r\n                call: 'klay_gasPriceAt',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n            /**\r\n             * Returns `true` if the node is writing blockchain data in a parallel manner.\r\n             *\r\n             * @memberof Klay\r\n             * @method isParallelDBWrite\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.isParallelDBWrite()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} `true` means the node is writing blockchain data in a parallel manner. It is `false` if the node is serially writing the data.\r\n             */\r\n            new Method({\r\n                name: 'isParallelDBWrite',\r\n                call: 'klay_isParallelDBWrite',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns `true` if the node is indexing sender transaction hash to transaction hash mapping information.\r\n             *\r\n             * @memberof Klay\r\n             * @method isSenderTxHashIndexingEnabled\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.isSenderTxHashIndexingEnabled()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} `true` means the node is indexing sender transaction hash to transaction hash mapping information.\r\n             */\r\n            new Method({\r\n                name: 'isSenderTxHashIndexingEnabled',\r\n                call: 'klay_isSenderTxHashIndexingEnabled',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns the Klaytn protocol version of the node.\r\n             *\r\n             * @memberof Klay\r\n             * @method getProtocolVersion\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getProtocolVersion()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The Klaytn protocol version of the node.\r\n             */\r\n            new Method({\r\n                name: 'getProtocolVersion',\r\n                call: 'klay_protocolVersion',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Returns the rewardbase of the current node.\r\n             * Rewardbase is the address of the account where the block rewards go to. It is only required for CNs.\r\n             *\r\n             * @memberof Klay\r\n             * @method getRewardbase\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getRewardbase()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The rewardbase address.\r\n             */\r\n            new Method({\r\n                name: 'getRewardbase',\r\n                call: 'klay_rewardbase',\r\n                params: 0,\r\n            }),\r\n\r\n            // Filter\r\n            /**\r\n             * Polling method for a filter, which returns an array of logs since the last poll.\r\n             *\r\n             * @memberof Klay\r\n             * @method getFilterChanges\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getFilterChanges('0xafb8e49bbcba9d61a3c616a3a312533e')\r\n             *\r\n             * @param {string} filterId The filter id.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<Klay.Log>>} Array of log objects, or an empty array if nothing has changed since the last poll.\r\n             */\r\n            new Method({\r\n                name: 'getFilterChanges',\r\n                call: 'klay_getFilterChanges',\r\n                params: 1,\r\n                inputFormatter: [utils.numberToHex],\r\n            }),\r\n            /**\r\n             * Returns an array of all logs matching the filter with the given id.\r\n             * The filter object should be obtained by using {@link Klay#newFilter|caver.rpc.klay.newFilter}.\r\n             *\r\n             * Note that filter ids returned by other filter creation functions, such as {@link Klay#newBlockFilter|caver.rpc.klay.newBlockFilter} or {@link Klay#newPendingTransactionFilter|caver.rpc.klay.newPendingTransactionFilter}, cannot be used with this function.\r\n             *\r\n             * @memberof Klay\r\n             * @method getFilterLogs\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getFilterLogs('0xafb8e49bbcba9d61a3c616a3a312533e')\r\n             *\r\n             * @param {string} filterId The filter id.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<Klay.Log>>} Array of all logs matching the filter with the given id.\r\n             */\r\n            new Method({\r\n                name: 'getFilterLogs',\r\n                call: 'klay_getFilterLogs',\r\n                params: 1,\r\n                inputFormatter: [utils.numberToHex],\r\n            }),\r\n            /**\r\n             * An object for filter options.\r\n             *\r\n             * @typedef {object} Klay.FilterOptions\r\n             * @property {string|number} [fromBlock] - The block number of the earliest block to get the logs. (`\"latest\"` means the most recent block.) The default value is `\"latest\"`.\r\n             * @property {string|number} [toBlock] - The block number of the last block to get the logs. (`\"latest\"` means the most recent block.). The default value is `\"latest\"`.\r\n             * @property {string|Array.<string>} [address] - An address or a list of addresses. Only the logs related to the particular account(s) will be returned.\r\n             * @property {Array.<string>} [topics] - An array of values that must appear in the log entries. The order is important. If you want to leave topics out, use `null`, e.g., `[null, '0x12...']`. You can also pass an array for each topic with options for that topic, e.g., `[null, ['option1', 'option2']]`.\r\n             */\r\n            /**\r\n             * Returns an array of all logs matching a given filter object.\r\n             *\r\n             * @memberof Klay\r\n             * @method getLogs\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.getLogs({\r\n             *     fromBlock: '0x1'\r\n             *     toBlock: 'latest',\r\n             *     address:'0x87ac99835e67168d4f9a40580f8f5c33550ba88b'\r\n             * })\r\n             *\r\n             * @param {Klay.FilterOptions} options The filter options.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<Array.<Klay.Log>>} Array of all logs matching a given filter object.\r\n             */\r\n            new Method({\r\n                name: 'getLogs',\r\n                call: 'klay_getLogs',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputLogFormatter],\r\n            }),\r\n            /**\r\n             * Creates a filter in the node, to notify when a new block arrives.\r\n             * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n             *\r\n             * @memberof Klay\r\n             * @method newBlockFilter\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.newBlockFilter()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} A filter id.\r\n             */\r\n            new Method({\r\n                name: 'newBlockFilter',\r\n                call: 'klay_newBlockFilter',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Creates a filter object using the given filter options, to receive the specific state changes (logs).\r\n             *\r\n             * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n             * To obtain all logs matching the filter created by `newFilter`, call {@link Klay#getFilterLogs|caver.rpc.klay.getFilterLogs}.\r\n             *\r\n             * For detailed information about the topics in the filter object, please see {@link https://docs.klaytn.com/dapp/json-rpc/api-references/klay/filter#klay_newfilter|Klaytn Platform API - klay_newFilter}.\r\n             *\r\n             * @memberof Klay\r\n             * @method newFilter\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.newFilter({})\r\n             *\r\n             * @param {Klay.FilterOptions} options The filter options.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} A filter id.\r\n             */\r\n            new Method({\r\n                name: 'newFilter',\r\n                call: 'klay_newFilter',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputLogFormatter],\r\n            }),\r\n            /**\r\n             * Creates a filter in the node, to receive the information about new pending transaction arrival.\r\n             * To check if the state has changed, call {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges}.\r\n             *\r\n             * @memberof Klay\r\n             * @method newPendingTransactionFilter\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.newPendingTransactionFilter()\r\n             *\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} A filter id.\r\n             */\r\n            new Method({\r\n                name: 'newPendingTransactionFilter',\r\n                call: 'klay_newPendingTransactionFilter',\r\n                params: 0,\r\n            }),\r\n            /**\r\n             * Uninstalls a filter with a given id.\r\n             * Should always be called when a watch is no longer needed.\r\n             * Additionally, filters time out when they are not being called with {@link Klay#getFilterChanges|caver.rpc.klay.getFilterChanges} for a period of time.\r\n             *\r\n             * @memberof Klay\r\n             * @method uninstallFilter\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.uninstallFilter('0x1426438ffdae5abf43edf4159c5b013b')\r\n             *\r\n             * @param {string} filterId The filter id.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<boolean>} `true` if the filter was successfully uninstalled, otherwise `false`.\r\n             */\r\n            new Method({\r\n                name: 'uninstallFilter',\r\n                call: 'klay_uninstallFilter',\r\n                params: 1,\r\n                inputFormatter: [utils.numberToHex],\r\n            }),\r\n\r\n            // Misc\r\n            /**\r\n             * Returns Keccak-256 (not the standardized SHA3-256) of the given data.\r\n             * You can use {@link module:utils~sha3|caver.utils.sha3} instead of this.\r\n             *\r\n             * @memberof Klay\r\n             * @method sha3\r\n             * @instance\r\n             *\r\n             * @example\r\n             * const result = await caver.rpc.klay.sha3('0x11223344')\r\n             *\r\n             * @param {string} data The data to be converted into a SHA3 hash.\r\n             * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\r\n             * @return {Promise<string>} The SHA3 result of the given data.\r\n             */\r\n            new Method({\r\n                name: 'sha3',\r\n                call: 'klay_sha3',\r\n                params: 1,\r\n            }),\r\n            new Method({\r\n                name: 'getCypressCredit',\r\n                call: 'klay_getCypressCredit',\r\n                params: 1,\r\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\r\n            }),\r\n\r\n            // subscriptions\r\n            new Subscriptions({\r\n                name: 'subscribe',\r\n                type: 'klay',\r\n                subscriptions: {\r\n                    newBlockHeaders: {\r\n                        subscriptionName: 'newHeads', // replace subscription with this name\r\n                        params: 0,\r\n                    },\r\n                    pendingTransactions: {\r\n                        subscriptionName: 'newPendingTransactions', // replace subscription with this name\r\n                        params: 0,\r\n                    },\r\n                    logs: {\r\n                        params: 1,\r\n                        inputFormatter: [formatters.inputLogFormatter],\r\n                        subscriptionHandler: function(output) {\r\n                            this.emit('data', output)\r\n\r\n                            if (_.isFunction(this.callback)) {\r\n                                this.callback(null, output, this)\r\n                            }\r\n                        },\r\n                    },\r\n                    syncing: {\r\n                        params: 0,\r\n                        subscriptionHandler: function(output) {\r\n                            const _this = this /* eslint-disable-line no-shadow */\r\n\r\n                            // fire TRUE at start\r\n                            if (this._isSyncing !== true) {\r\n                                this._isSyncing = true\r\n                                this.emit('changed', _this._isSyncing)\r\n\r\n                                if (_.isFunction(this.callback)) {\r\n                                    this.callback(null, _this._isSyncing, this)\r\n                                }\r\n\r\n                                setTimeout(function() {\r\n                                    _this.emit('data', output)\r\n\r\n                                    if (_.isFunction(_this.callback)) {\r\n                                        _this.callback(null, output, _this)\r\n                                    }\r\n                                }, 0)\r\n\r\n                                // fire sync status\r\n                            } else {\r\n                                this.emit('data', output)\r\n                                if (_.isFunction(_this.callback)) {\r\n                                    this.callback(null, output, this)\r\n                                }\r\n\r\n                                // wait for some time before fireing the FALSE\r\n                                clearTimeout(this._isSyncingTimeout)\r\n                                this._isSyncingTimeout = setTimeout(function() {\r\n                                    if (output.currentBlock > output.highestBlock - 200) {\r\n                                        _this._isSyncing = false\r\n                                        _this.emit('changed', _this._isSyncing)\r\n\r\n                                        if (_.isFunction(_this.callback)) {\r\n                                            _this.callback(null, _this._isSyncing, _this)\r\n                                        }\r\n                                    }\r\n                                }, 500)\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            }),\r\n        ]\r\n\r\n        methods.forEach(function(method) {\r\n            method.attachToObject(_this)\r\n            method.setRequestManager(_this._requestManager)\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = Klay\r\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,kBADC;MAEPC,IAAI,EAAE,uBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACkC,wBAAZ;IAJT,CAAX,CA/FY;IAqGZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIhB,MAAJ,CAAW;MACPI,IAAI,EAAE,kBADC;MAEPC,IAAI,EAAE,uBAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA5HY;IAiIZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,YADC;MAEPC,IAAI,EAAE,iBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmC1B,UAAU,CAAC2B,gCAA9C;IAJT,CAAX,CAzNY;IA+NZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,YADC;MAEPC,IAAI,EAAE,iBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmC1B,UAAU,CAAC2B,gCAA9C;IAJT,CAAX,CA9OY;IAoPZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,SADC;MAEPC,IAAI,EAAE,cAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmC1B,UAAU,CAAC2B,gCAA9C;IAJT,CAAX,CAnQY;IAyQZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,mBADC;MAEPC,IAAI,EAAE,wBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmC1B,UAAU,CAAC2B,gCAA9C;IAJT,CAAX,CA1RY;IAgSZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,MADC;MAEPC,IAAI,EAAE,WAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmC1B,UAAU,CAACmC,kBAA9C;IAJT,CAAX,CArTY,EA4TZ;;IACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIjB,MAAJ,CAAW;MACPI,IAAI,EAAE,gBADC;MAEPC,IAAI,EAAE,kuBAFC;MAGPa,OAAO,EAAE,qBAHF;MAIPZ,MAAM,EAAE,CAJD;MAKPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuC5B,UAAU,CAACqC,SAAlD;IALT,CAAX,CA5aY;IAmbZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAInB,MAAJ,CAAW;MACPI,IAAI,EAAE,kBADC;MAEPC,IAAI,EAAE,uBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuC5B,UAAU,CAACqC,SAAlD;IAJT,CAAX,CAlcY;IAwcZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAInB,MAAJ,CAAW;MACPI,IAAI,EAAE,gBADC;MAEPC,IAAI,EAAE,qBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuC5B,UAAU,CAACqC,SAAlD;IAJT,CAAX,CAvdY;IA6dZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAInB,MAAJ,CAAW;MACPI,IAAI,EAAE,WADC;MAEPC,IAAI,EAAE,wBAFC;MAGPa,OAAO,EAAE,sBAHF;MAIPZ,MAAM,EAAE,CAJD;MAKPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IALT,CAAX,CAtgBY;IA6gBZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIV,MAAJ,CAAW;MACPI,IAAI,EAAE,mBADC;MAEPC,IAAI,EAAE,wBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IAJT,CAAX,CA5hBY;IAkiBZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIV,MAAJ,CAAW;MACPI,IAAI,EAAE,iBADC;MAEPC,IAAI,EAAE,sBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IAJT,CAAX,CAhjBY;IAsjkBADC;MAEPC,IAAI,EAAE,uBAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA9pBY;IAmqBZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,0BADC;MAEPC,IAAI,EAAE,uCAFC;MAGPa,OAAO,EAAE,qCAHF;MAIPZ,MAAM,EAAE,CAJD;MAKPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IALT,CAAX,CArrBY;IA4rBZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIV,MAAJ,CAAW;MACPI,IAAI,EAAE,kCADC;MAEPC,IAAI,EAAE,uCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IAJT,CAAX,CA1sBY;IAgtBZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIV,MAAJ,CAAW;MACPI,IAAI,EAAE,gCADC;MAEPC,IAAI,EAAE,qCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ;IAJT,CAAX,CA9tBY;IAouwCAFC;MAGPa,OAAO,EAAE,sCAHF;MAIPZ,MAAM,EAAE,CAJD;MAKPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IALT,CAAX,CAj2BY;IAw2BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,mCADC;MAEPC,IAAI,EAAE,wCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CAt3BY;IA43BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,iCADC;MAEPC,IAAI,EAAE,sCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CA14BY;IAg5BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,cADC;MAEPC,IAAI,EAAE,mBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CA95BY;IAo6BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,kBADC;MAEPC,IAAI,EAAE,uBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CAl7BY;IAw7BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,YADC;MAEPC,IAAI,EAAE,iBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CAt8BY;IA48BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,gBADC;MAEPC,IAAI,EAAE,qBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC2B,gCAAZ;IAJT,CAAX,CA19BY;IAg+BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,cADC;MAEPC,IAAI,EAAE,mBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC0B,qBAAZ,EAAmCtB,KAAK,CAACkC,WAAzC,EAAsDtC,UAAU,CAAC2B,gCAAjE;IAJT,CAAX,CAh/BY;IAs/BZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,UADC;MAEPC,IAAI,EAAE,aAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CAtgCY;IA2gCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,WADC;MAEPC,IAAI,EAAE,cAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA3iCY,EAijCZ;;IACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,MADC;MAEPC,IAAI,EAAE,WAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACuC,kBAAZ,EAAgCvC,UAAU,CAAC2B,gCAA3C;IAJT,CAAX,CAtlCY;IA4lCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,aADC;MAEPC,IAAI,EAAE,kBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACuC,kBAAZ;IAJT,CAAX,CA/mCY;IAqnCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIrB,MAAJ,CAAW;MACPI,IAAI,EAAE,yBADC;MAEPC,IAAI,EAAE,8BAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACuC,kBAAZ,EAAgCvC,UAAU,CAAC2B,gCAA3C;IAJT,CAAX,CAzoCY;IA+oCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIT,MAAJ,CAAW;MACPI,IAAI,EAAE,yBADC;MAEPC,IAAI,EAAE,0CAFC;MAGPa,OAAO,EAAE,wCAHF;MAIPZ,MAAM,EAAE,CAJD;MAKPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuCxB,KAAK,CAACkC,WAA7C;IALT,CAAX,CAlqCY;IAyqCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIpB,MAAJ,CAAW;MACPI,IAAI,EAAE,qCADC;MAEPC,IAAI,EAAE,0CAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuCxB,KAAK,CAACkC,WAA7C;IAJT,CAAX,CAxrCY;IA8rCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIpB,MAAJ,CAAW;MACPI,IAAI,EAAE,mCADC;MAEPC,IAAI,EAAE,wCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAAC4B,yBAAZ,EAAuCxB,KAAK,CAACkC,WAA7C;IAJT,CAAX,CA7sCY;IAmtCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIpB,MAAJ,CAAW;MACPI,IAAI,EAAE,gBADC;MAEPC,IAAI,EAAE,2BAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CAluCY;IAuuCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,sBADC;MAEPC,IAAI,EAAE,2BAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CArvCY;IA0vCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,8BADC;MAEPC,IAAI,EAAE,mCAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA1wCY;IA+wCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,uBADC;MAEPC,IAAI,EAAE,4BAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA9xCY;IAmyCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,qCADC;MAEPC,IAAI,EAAE,0CAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CAtzCY;IA2zCZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,oBADC;MAEPC,IAAI,EAAE,yBAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CA50CY;IAi1CZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,mBADC;MAEPC,IAAI,EAAE,yBAFC;MAGPC,MAAM,EAAE;IAHD,CAAX,CAl2CY;IAu2CZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAIN,MAAJ,CAAW;MACPI,IAAI,EAAE,iBADC;MAEPC,IAAI,EAAE,sBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACwC,yBAAZ;IAJT,CAAX,CA93CY;IAo4CZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAItB,MAAJ,CAAW;MACPI,IAAI,EAAE,2BADC;MAEPC,IAAI,EAAE,gCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACwC,yBAAZ;IAJT,CAAX,CAv6CY;IA66CZ;AACZ;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAItB,MAAJ,CAAW;MACPI,IAAI,EAAE,iBADC;MAEPC,IAAI,EAAE,sBAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACwC,yBAAZ;IAJT,CAAX,CAj+CY;IAu+CZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,IAAItB,MAAJ,CAAW;MACPI,IAAI,EAAE,2BADC;MAEPC,IAAI,EAAE,gCAFC;MAGPC,MAAM,EAAE,CAHD;MAIPC,cAAc,EAAE,CAACzB,UAAU,CAACwC,yBAAZ;IAJT,CAAX,CAxgDY;IA8gDZ;AACZ;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"script"}