{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar raw = require('ipld-raw');\n\nvar multicodec = require('multicodec');\n\nvar noop = function noop() {};\n/**\r\n * @typedef {import('cids')} CID\r\n */\n\n/**\r\n * Return an object containing supported IPLD Formats\r\n *\r\n * @param {object} [options] - IPLD options passed to the http client constructor\r\n * @param {Array} [options.formats] - A list of IPLD Formats to use\r\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\r\n * @returns {Function}\r\n */\n\n\nmodule.exports = function () {\n  var _configuredFormats;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? [] : _ref$formats,\n      _ref$loadFormat = _ref.loadFormat,\n      loadFormat = _ref$loadFormat === void 0 ? noop : _ref$loadFormat;\n\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  var configuredFormats = (_configuredFormats = {}, _defineProperty(_configuredFormats, multicodec.DAG_PB, dagPB), _defineProperty(_configuredFormats, multicodec.DAG_CBOR, dagCBOR), _defineProperty(_configuredFormats, multicodec.RAW, raw), _configuredFormats);\n  formats.forEach(function (format) {\n    configuredFormats[format.codec] = format;\n  });\n  /**\r\n   * Attempts to load an IPLD format for the passed CID\r\n   *\r\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\r\n   * @returns {Promise<object>} - An IPLD format\r\n   */\n\n  var loadResolver = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(codec) {\n      var number, format;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // @ts-ignore - codec is a string and not a CodecName\n              number = multicodec.getNumber(codec);\n              _context.t0 = configuredFormats[number];\n\n              if (_context.t0) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return loadFormat(codec);\n\n            case 5:\n              _context.t0 = _context.sent;\n\n            case 6:\n              format = _context.t0;\n\n              if (format) {\n                _context.next = 9;\n                break;\n              }\n\n              throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(codec, \"\\\"\")), {\n                missingMulticodec: codec\n              });\n\n            case 9:\n              return _context.abrupt(\"return\", format);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadResolver(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return loadResolver;\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","multicodec","noop","module","exports","formats","loadFormat","configuredFormats","DAG_PB","DAG_CBOR","RAW","forEach","format","codec","loadResolver","number","getNumber","Object","assign","Error","missingMulticodec"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipfs-http-client/src/lib/ipld-formats.js"],"sourcesContent":["'use strict'\r\n\r\nconst dagPB = require('ipld-dag-pb')\r\nconst dagCBOR = require('ipld-dag-cbor')\r\nconst raw = require('ipld-raw')\r\nconst multicodec = require('multicodec')\r\n\r\nconst noop = () => {}\r\n\r\n/**\r\n * @typedef {import('cids')} CID\r\n */\r\n\r\n/**\r\n * Return an object containing supported IPLD Formats\r\n *\r\n * @param {object} [options] - IPLD options passed to the http client constructor\r\n * @param {Array} [options.formats] - A list of IPLD Formats to use\r\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\r\n * @returns {Function}\r\n */\r\nmodule.exports = ({ formats = [], loadFormat = noop } = {}) => {\r\n  formats = formats || []\r\n  loadFormat = loadFormat || noop\r\n\r\n  const configuredFormats = {\r\n    [multicodec.DAG_PB]: dagPB,\r\n    [multicodec.DAG_CBOR]: dagCBOR,\r\n    [multicodec.RAW]: raw\r\n  }\r\n\r\n  formats.forEach(format => {\r\n    configuredFormats[format.codec] = format\r\n  })\r\n\r\n  /**\r\n   * Attempts to load an IPLD format for the passed CID\r\n   *\r\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\r\n   * @returns {Promise<object>} - An IPLD format\r\n   */\r\n  const loadResolver = async (codec) => {\r\n    // @ts-ignore - codec is a string and not a CodecName\r\n    const number = multicodec.getNumber(codec)\r\n    const format = configuredFormats[number] || await loadFormat(codec)\r\n\r\n    if (!format) {\r\n      throw Object.assign(\r\n        new Error(`Missing IPLD format \"${codec}\"`),\r\n        { missingMulticodec: codec }\r\n      )\r\n    }\r\n\r\n    return format\r\n  }\r\n\r\n  return loadResolver\r\n}\r\n"],"mappings":"AAAA;;;;;;+CACA,oJ;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAMI,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAA8C;EAAA;;EAAA,+EAAP,EAAO;EAAA,wBAA3CC,OAA2C;EAAA,IAA3CA,OAA2C,6BAAjC,EAAiC;EAAA,2BAA7BC,UAA6B;EAAA,IAA7BA,UAA6B,gCAAhBJ,IAAgB;;EAC7DG,OAAO,GAAGA,OAAO,IAAI,EAArB;EACAC,UAAU,GAAGA,UAAU,IAAIJ,IAA3B;EAEA,IAAMK,iBAAiB,iEACpBN,UAAU,CAACO,MADS,EACAX,KADA,uCAEpBI,UAAU,CAACQ,QAFS,EAEEV,OAFF,uCAGpBE,UAAU,CAACS,GAHS,EAGHV,GAHG,sBAAvB;EAMAK,OAAO,CAACM,OAAR,CAAgB,UAAAC,MAAM,EAAI;IACxBL,iBAAiB,CAACK,MAAM,CAACC,KAAR,CAAjB,GAAkCD,MAAlC;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;;EACE,IAAME,YAAY;IAAA,uEAAG,iBAAOD,KAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cACnB;cACME,MAFa,GAEJd,UAAU,CAACe,SAAX,CAAqBH,KAArB,CAFI;cAAA,cAGJN,iBAAiB,CAACQ,MAAD,CAHb;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAG+BT,UAAU,CAACO,KAAD,CAHzC;;YAAA;cAAA;;YAAA;cAGbD,MAHa;;cAAA,IAKdA,MALc;gBAAA;gBAAA;cAAA;;cAAA,MAMXK,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,iCAAkCN,KAAlC,QADI,EAEJ;gBAAEO,iBAAiB,EAAEP;cAArB,CAFI,CANW;;YAAA;cAAA,iCAYZD,MAZY;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAZE,YAAY;MAAA;IAAA;EAAA,GAAlB;;EAeA,OAAOA,YAAP;AACD,CApCD"},"metadata":{},"sourceType":"script"}