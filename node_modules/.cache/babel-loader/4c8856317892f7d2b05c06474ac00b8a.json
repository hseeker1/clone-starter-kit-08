{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\n/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar utils = require('../../../../caver-utils');\n\nvar helpers = require('../../../../caver-core-helpers');\n\nvar _helpers$constants = helpers.constants,\n    ACCOUNT_UPDATE_TYPE_TAG = _helpers$constants.ACCOUNT_UPDATE_TYPE_TAG,\n    ACCOUNT_KEY_NIL_TAG = _helpers$constants.ACCOUNT_KEY_NIL_TAG,\n    ACCOUNT_KEY_LEGACY_TAG = _helpers$constants.ACCOUNT_KEY_LEGACY_TAG,\n    ACCOUNT_KEY_PUBLIC_TAG = _helpers$constants.ACCOUNT_KEY_PUBLIC_TAG,\n    ACCOUNT_KEY_FAIL_TAG = _helpers$constants.ACCOUNT_KEY_FAIL_TAG,\n    ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG = _helpers$constants.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\n    ACCOUNT_KEY_ROLE_BASED_TAG = _helpers$constants.ACCOUNT_KEY_ROLE_BASED_TAG,\n    FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG = _helpers$constants.FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n    FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG;\n\nfunction rlpEncodeForAccountUpdate(transaction) {\n  var accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\n  if (transaction.senderRawTransaction) {\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 6),\n        nonce = _utils$rlpDecode2[0],\n        gasPrice = _utils$rlpDecode2[1],\n        gas = _utils$rlpDecode2[2],\n        from = _utils$rlpDecode2[3],\n        _accountKey = _utils$rlpDecode2[4],\n        _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[5], 1),\n        _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n        v = _utils$rlpDecode2$$[0],\n        r = _utils$rlpDecode2$$[1],\n        s = _utils$rlpDecode2$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), _accountKey]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  var accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 7),\n        nonce = _utils$rlpDecode4[0],\n        gasPrice = _utils$rlpDecode4[1],\n        gas = _utils$rlpDecode4[2],\n        from = _utils$rlpDecode4[3],\n        _accountKey2 = _utils$rlpDecode4[4],\n        feeRatio = _utils$rlpDecode4[5],\n        _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[6], 1),\n        _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n        v = _utils$rlpDecode4$$[0],\n        r = _utils$rlpDecode4$$[1],\n        s = _utils$rlpDecode4$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), _accountKey2, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  var accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction resolveRawKeyToAccountKey(transaction) {\n  // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\n  if (transaction.key) {\n    // If the key field is a string,\n    // it means that the already encoded Account Key is passed as a parameter.\n    if (_.isString(transaction.key)) {\n      return transaction.key;\n    }\n\n    if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\n      throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.');\n    }\n\n    transaction.key.fillUpdateObject(transaction);\n  }\n\n  if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG;\n  if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG;\n\n  if (transaction.multisig) {\n    var _transaction$multisig = transaction.multisig,\n        threshold = _transaction$multisig.threshold,\n        keys = _transaction$multisig.keys;\n    var encodedMultisigPublicKeys = keys.map(function (_ref) {\n      var weight = _ref.weight,\n          publicKey = _ref.publicKey;\n      if (!weight) throw new Error('weight should be specified for multisig account');\n      if (!publicKey) throw new Error('publicKey should be specified for multisig account');\n      var compressedPublicKey = utils.compressPublicKey(publicKey);\n      return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey];\n    });\n    return ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2);\n  }\n\n  if (transaction.publicKey) {\n    var compressedPublicKey = utils.compressPublicKey(transaction.publicKey);\n    return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n  }\n\n  if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n    // Create a new object so as not to damage the input transaction object.\n    var roleBasedObject = {};\n    roleBasedObject.roleTransactionKey = transaction.roleTransactionKey ? resolveRawKeyToAccountKey(transaction.roleTransactionKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey) : ACCOUNT_KEY_NIL_TAG;\n    var _keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey];\n    return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(_keys).slice(2);\n  }\n\n  return ACCOUNT_KEY_NIL_TAG;\n}\n\nfunction parseAccountKey(transaction) {\n  var key = transaction.accountKey;\n  delete transaction.accountKey;\n\n  if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\n    transaction.legacyKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\n    transaction.failKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\n    transaction.publicKey = RLP.decode(\"0x\".concat(key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)));\n  } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n    var _RLP$decode = RLP.decode(\"0x\".concat(key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length))),\n        _RLP$decode2 = _slicedToArray(_RLP$decode, 2),\n        threshold = _RLP$decode2[0],\n        multiSigkeys = _RLP$decode2[1];\n\n    multiSigkeys = multiSigkeys.map(function (k) {\n      return {\n        weight: utils.hexToNumber(k[0]),\n        publicKey: k[1]\n      };\n    });\n    transaction.multisig = {\n      threshold: utils.hexToNumber(threshold),\n      keys: multiSigkeys\n    };\n  } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\n    var keys = RLP.decode(\"0x\".concat(key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)));\n    keys.map(function (k) {\n      if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n    });\n    if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleTransactionKey = parseAccountKey({\n      accountKey: keys[0]\n    });\n    if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleAccountUpdateKey = parseAccountKey({\n      accountKey: keys[1]\n    });\n    if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleFeePayerKey = parseAccountKey({\n      accountKey: keys[2]\n    });\n  }\n\n  return transaction;\n}\n\nmodule.exports = {\n  rlpEncodeForAccountUpdate: rlpEncodeForAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdate: rlpEncodeForFeeDelegatedAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdateWithRatio: rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n  parseAccountKey: parseAccountKey,\n  resolveRawKeyToAccountKey: resolveRawKeyToAccountKey\n};","map":{"version":3,"names":["_","require","RLP","Bytes","utils","helpers","constants","ACCOUNT_UPDATE_TYPE_TAG","ACCOUNT_KEY_NIL_TAG","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG","rlpEncodeForAccountUpdate","transaction","accountKey","resolveRawKeyToAccountKey","encode","fromNat","nonce","gasPrice","gas","from","toLowerCase","chainId","rlpEncodeForFeeDelegatedAccountUpdate","senderRawTransaction","typeDetacehdRawTransaction","slice","rlpDecode","v","r","s","feePayer","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","feeRatio","key","isString","address","Error","fillUpdateObject","legacyKey","failKey","multisig","threshold","keys","encodedMultisigPublicKeys","map","weight","publicKey","compressedPublicKey","compressPublicKey","numberToHex","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleBasedObject","parseAccountKey","startsWith","decode","length","multiSigkeys","k","hexToNumber","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/transactionType/account.js"],"sourcesContent":["/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst utils = require('../../../../caver-utils')\r\nconst helpers = require('../../../../caver-core-helpers')\r\n\r\nconst {\r\n    ACCOUNT_UPDATE_TYPE_TAG,\r\n\r\n    ACCOUNT_KEY_NIL_TAG,\r\n    ACCOUNT_KEY_LEGACY_TAG,\r\n    ACCOUNT_KEY_PUBLIC_TAG,\r\n    ACCOUNT_KEY_FAIL_TAG,\r\n    ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\r\n    ACCOUNT_KEY_ROLE_BASED_TAG,\r\n\r\n    FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\r\n    FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\r\n} = helpers.constants\r\n\r\nfunction rlpEncodeForAccountUpdate(transaction) {\r\n    const accountKey = resolveRawKeyToAccountKey(transaction)\r\n\r\n    return RLP.encode([\r\n        RLP.encode([\r\n            ACCOUNT_UPDATE_TYPE_TAG,\r\n            Bytes.fromNat(transaction.nonce),\r\n            Bytes.fromNat(transaction.gasPrice),\r\n            Bytes.fromNat(transaction.gas),\r\n            transaction.from.toLowerCase(),\r\n            accountKey,\r\n        ]),\r\n        Bytes.fromNat(transaction.chainId || '0x1'),\r\n        '0x',\r\n        '0x',\r\n    ])\r\n}\r\n\r\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\r\n    if (transaction.senderRawTransaction) {\r\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\r\n\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [nonce, gasPrice, gas, from, accountKey, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\r\n\r\n        return RLP.encode([\r\n            RLP.encode([\r\n                FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\r\n                Bytes.fromNat(nonce),\r\n                Bytes.fromNat(gasPrice),\r\n                Bytes.fromNat(gas),\r\n                from.toLowerCase(),\r\n                accountKey,\r\n            ]),\r\n            transaction.feePayer.toLowerCase(),\r\n            Bytes.fromNat(transaction.chainId || '0x1'),\r\n            '0x',\r\n            '0x',\r\n        ])\r\n    }\r\n    const accountKey = resolveRawKeyToAccountKey(transaction)\r\n\r\n    return RLP.encode([\r\n        RLP.encode([\r\n            FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\r\n            Bytes.fromNat(transaction.nonce),\r\n            Bytes.fromNat(transaction.gasPrice),\r\n            Bytes.fromNat(transaction.gas),\r\n            transaction.from.toLowerCase(),\r\n            accountKey,\r\n        ]),\r\n        Bytes.fromNat(transaction.chainId || '0x1'),\r\n        '0x',\r\n        '0x',\r\n    ])\r\n}\r\n\r\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\r\n    if (transaction.senderRawTransaction) {\r\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\r\n\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [nonce, gasPrice, gas, from, accountKey, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\r\n\r\n        return RLP.encode([\r\n            RLP.encode([\r\n                FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\r\n                Bytes.fromNat(nonce),\r\n                Bytes.fromNat(gasPrice),\r\n                Bytes.fromNat(gas),\r\n                from.toLowerCase(),\r\n                accountKey,\r\n                Bytes.fromNat(feeRatio),\r\n            ]),\r\n            transaction.feePayer.toLowerCase(),\r\n            Bytes.fromNat(transaction.chainId || '0x1'),\r\n            '0x',\r\n            '0x',\r\n        ])\r\n    }\r\n    const accountKey = resolveRawKeyToAccountKey(transaction)\r\n\r\n    return RLP.encode([\r\n        RLP.encode([\r\n            FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\r\n            Bytes.fromNat(transaction.nonce),\r\n            Bytes.fromNat(transaction.gasPrice),\r\n            Bytes.fromNat(transaction.gas),\r\n            transaction.from.toLowerCase(),\r\n            accountKey,\r\n            Bytes.fromNat(transaction.feeRatio),\r\n        ]),\r\n        Bytes.fromNat(transaction.chainId || '0x1'),\r\n        '0x',\r\n        '0x',\r\n    ])\r\n}\r\n\r\nfunction resolveRawKeyToAccountKey(transaction) {\r\n    // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\r\n    if (transaction.key) {\r\n        // If the key field is a string,\r\n        // it means that the already encoded Account Key is passed as a parameter.\r\n        if (_.isString(transaction.key)) {\r\n            return transaction.key\r\n        }\r\n        if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\r\n            throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.')\r\n        }\r\n        transaction.key.fillUpdateObject(transaction)\r\n    }\r\n\r\n    if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG\r\n    if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG\r\n\r\n    if (transaction.multisig) {\r\n        const { threshold, keys } = transaction.multisig\r\n\r\n        const encodedMultisigPublicKeys = keys.map(({ weight, publicKey }) => {\r\n            if (!weight) throw new Error('weight should be specified for multisig account')\r\n            if (!publicKey) throw new Error('publicKey should be specified for multisig account')\r\n\r\n            const compressedPublicKey = utils.compressPublicKey(publicKey)\r\n\r\n            return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey]\r\n        })\r\n\r\n        return (\r\n            ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\r\n            RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2)\r\n        )\r\n    }\r\n\r\n    if (transaction.publicKey) {\r\n        const compressedPublicKey = utils.compressPublicKey(transaction.publicKey)\r\n\r\n        return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\r\n    }\r\n\r\n    if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\r\n        // Create a new object so as not to damage the input transaction object.\r\n        const roleBasedObject = {}\r\n\r\n        roleBasedObject.roleTransactionKey = transaction.roleTransactionKey\r\n            ? resolveRawKeyToAccountKey(transaction.roleTransactionKey)\r\n            : ACCOUNT_KEY_NIL_TAG\r\n        roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey\r\n            ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey)\r\n            : ACCOUNT_KEY_NIL_TAG\r\n        roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey\r\n            ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey)\r\n            : ACCOUNT_KEY_NIL_TAG\r\n\r\n        const keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey]\r\n        return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(keys).slice(2)\r\n    }\r\n\r\n    return ACCOUNT_KEY_NIL_TAG\r\n}\r\n\r\nfunction parseAccountKey(transaction) {\r\n    const key = transaction.accountKey\r\n    delete transaction.accountKey\r\n\r\n    if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\r\n        transaction.legacyKey = true\r\n    } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\r\n        transaction.failKey = true\r\n    } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\r\n        transaction.publicKey = RLP.decode(`0x${key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)}`)\r\n    } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\r\n        let [threshold, multiSigkeys] = RLP.decode(`0x${key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\r\n        multiSigkeys = multiSigkeys.map(k => {\r\n            return { weight: utils.hexToNumber(k[0]), publicKey: k[1] }\r\n        })\r\n        transaction.multisig = {\r\n            threshold: utils.hexToNumber(threshold),\r\n            keys: multiSigkeys,\r\n        }\r\n    } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\r\n        const keys = RLP.decode(`0x${key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\r\n        keys.map(k => {\r\n            if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\r\n        })\r\n\r\n        if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG))\r\n            transaction.roleTransactionKey = parseAccountKey({\r\n                accountKey: keys[0],\r\n            })\r\n        if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG))\r\n            transaction.roleAccountUpdateKey = parseAccountKey({\r\n                accountKey: keys[1],\r\n            })\r\n        if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG))\r\n            transaction.roleFeePayerKey = parseAccountKey({\r\n                accountKey: keys[2],\r\n            })\r\n    }\r\n\r\n    return transaction\r\n}\r\n\r\nmodule.exports = {\r\n    rlpEncodeForAccountUpdate,\r\n    rlpEncodeForFeeDelegatedAccountUpdate,\r\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\r\n    parseAccountKey,\r\n    resolveRawKeyToAccountKey,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}