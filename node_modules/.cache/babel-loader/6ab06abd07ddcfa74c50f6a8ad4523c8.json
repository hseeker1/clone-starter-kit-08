{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n/**\r\n * Representing an options for AccountKeyWeightedMultiSig.\r\n * This class will define threshold and weights.\r\n * @class\r\n */\n\n\nclass WeightedMultiSigOptions {\n  /**\r\n   * Creates an instance of WeightedMultiSigOptions.\r\n   *\r\n   * @example\r\n   * const options = caver.account.weightedMultiSigOptions.fromObject({ threshold: 2, weights: [1, 1] })\r\n   *\r\n   * @param {object} options - An object which defines 'threshold' and 'weights'.\r\n   * @return {WeightedMultiSigOptions}\r\n   */\n  static fromObject(options) {\n    // To support the previous options format(threshold and weight)\n    if (options.weight && !options.weights) {\n      options.weights = options.weight;\n      delete options.weight;\n    } // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n\n\n    if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions();\n    if (options.threshold === undefined || options.weights === undefined) throw new Error(`Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.`);\n    return new WeightedMultiSigOptions(options.threshold, options.weights);\n  }\n  /**\r\n   * Creates an instance of WeightedMultiSigOptions.\r\n   *\r\n   * @example\r\n   * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n   *\r\n   * @param {number} threshold - a threshold\r\n   * @param {Array.<number>} weights - an array of weight of key\r\n   */\n\n\n  constructor(threshold, weights) {\n    if (threshold !== undefined && weights === undefined || threshold === undefined && weights !== undefined) {\n      throw new Error(`For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.`);\n    }\n\n    if (threshold !== undefined) this.threshold = threshold;\n    if (weights !== undefined) this.weights = weights;\n  }\n  /**\r\n   * @type {number}\r\n   */\n\n\n  get threshold() {\n    return this._threshold;\n  }\n\n  set threshold(th) {\n    if (!_.isNumber(th)) throw new Error(`The threshold must be number type.`);\n    if (!validateWeightedSum(th, this.weights)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n    this._threshold = th;\n  }\n  /**\r\n   * @type {Array.<number>}\r\n   */\n\n\n  get weights() {\n    return this._weights;\n  }\n\n  set weights(weightArr) {\n    if (!_.isArray(weightArr)) throw new Error(`weight should be an array that stores the weight of each public key.`);\n\n    for (const w of weightArr) {\n      if (!_.isNumber(w)) throw new Error(`The weight of each key must be number type.`);\n    }\n\n    if (!validateWeightedSum(this.threshold, weightArr)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n    this._weights = weightArr;\n  }\n  /**\r\n   * Returns 'true' if WeightedMultiSigOptions is empty.\r\n   *\r\n   * @example\r\n   * const isEmpty = options.isEmpty()\r\n   *\r\n   * @return {Boolean}\r\n   */\n\n\n  isEmpty() {\n    return this.threshold === undefined && this.weights === undefined;\n  }\n\n}\n/**\r\n * validates threshold and sum of weights.\r\n * @ignore\r\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n * @param {Array.<number>} weights - An array of weights.\r\n * @return {Boolean}\r\n */\n\n\nfunction validateWeightedSum(threshold, weights) {\n  if (threshold === undefined || weights === undefined) return true;\n  let weightSum = 0;\n\n  for (const w of weights) weightSum += w;\n\n  if (threshold > weightSum) return false;\n  return true;\n}\n\nmodule.exports = WeightedMultiSigOptions;","map":{"version":3,"names":["_","require","WeightedMultiSigOptions","fromObject","options","weight","weights","threshold","undefined","Error","constructor","_threshold","th","isNumber","validateWeightedSum","_weights","weightArr","isArray","w","isEmpty","weightSum","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/weightedMultiSigOptions.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\n\r\n/**\r\n * Representing an options for AccountKeyWeightedMultiSig.\r\n * This class will define threshold and weights.\r\n * @class\r\n */\r\nclass WeightedMultiSigOptions {\r\n    /**\r\n     * Creates an instance of WeightedMultiSigOptions.\r\n     *\r\n     * @example\r\n     * const options = caver.account.weightedMultiSigOptions.fromObject({ threshold: 2, weights: [1, 1] })\r\n     *\r\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\r\n     * @return {WeightedMultiSigOptions}\r\n     */\r\n    static fromObject(options) {\r\n        // To support the previous options format(threshold and weight)\r\n        if (options.weight && !options.weights) {\r\n            options.weights = options.weight\r\n            delete options.weight\r\n        }\r\n\r\n        // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\r\n        if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions()\r\n\r\n        if (options.threshold === undefined || options.weights === undefined)\r\n            throw new Error(`Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.`)\r\n\r\n        return new WeightedMultiSigOptions(options.threshold, options.weights)\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of WeightedMultiSigOptions.\r\n     *\r\n     * @example\r\n     * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n     *\r\n     * @param {number} threshold - a threshold\r\n     * @param {Array.<number>} weights - an array of weight of key\r\n     */\r\n    constructor(threshold, weights) {\r\n        if ((threshold !== undefined && weights === undefined) || (threshold === undefined && weights !== undefined)) {\r\n            throw new Error(`For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.`)\r\n        }\r\n        if (threshold !== undefined) this.threshold = threshold\r\n        if (weights !== undefined) this.weights = weights\r\n    }\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    get threshold() {\r\n        return this._threshold\r\n    }\r\n\r\n    set threshold(th) {\r\n        if (!_.isNumber(th)) throw new Error(`The threshold must be number type.`)\r\n\r\n        if (!validateWeightedSum(th, this.weights))\r\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\r\n\r\n        this._threshold = th\r\n    }\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     */\r\n    get weights() {\r\n        return this._weights\r\n    }\r\n\r\n    set weights(weightArr) {\r\n        if (!_.isArray(weightArr)) throw new Error(`weight should be an array that stores the weight of each public key.`)\r\n        for (const w of weightArr) {\r\n            if (!_.isNumber(w)) throw new Error(`The weight of each key must be number type.`)\r\n        }\r\n\r\n        if (!validateWeightedSum(this.threshold, weightArr))\r\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\r\n\r\n        this._weights = weightArr\r\n    }\r\n\r\n    /**\r\n     * Returns 'true' if WeightedMultiSigOptions is empty.\r\n     *\r\n     * @example\r\n     * const isEmpty = options.isEmpty()\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.threshold === undefined && this.weights === undefined\r\n    }\r\n}\r\n\r\n/**\r\n * validates threshold and sum of weights.\r\n * @ignore\r\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\r\n * @param {Array.<number>} weights - An array of weights.\r\n * @return {Boolean}\r\n */\r\nfunction validateWeightedSum(threshold, weights) {\r\n    if (threshold === undefined || weights === undefined) return true\r\n\r\n    let weightSum = 0\r\n\r\n    for (const w of weights) weightSum += w\r\n\r\n    if (threshold > weightSum) return false\r\n\r\n    return true\r\n}\r\n\r\nmodule.exports = WeightedMultiSigOptions\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}