{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../caver-utils');\n\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKey/accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nconst {\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat\n} = require('../../caver-wallet/src/keyring/keyringHelper');\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\r\n * Representing an Account which includes information for account update.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nclass Account {\n  /**\r\n   * Creates an Account instance with an address and an accountKey.\r\n   *\r\n   * If `accountKey` is a public key string, an `Account` instance with `AccountKeyPublic` as accountKey is created.\r\n   *\r\n   * If `accountKey` is an array containing public key strings, an `Account` instance with `AccountKeyWeightedMultiSig` as accountKey is created.\r\n   * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n   *\r\n   * If `accountKey` is an array containing accountKeys that are used for each role, an `Account` instance with `AccountKeyRoleBased` is created.\r\n   * Options must be defined for each role with WeightedMultiSigOptions (or object).\r\n   * If options are not defined, the default option is used for roles that use multiple public keys.\r\n   *\r\n   * @example\r\n   * // Create an account instance with AccountKeyPublic\r\n   * caver.account.create('0x{address in hex}', '0x{public key}')\r\n   *\r\n   * // Create an account instance with AccountKeyWeightedMultiSig\r\n   * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1, 1] })\r\n   *\r\n   * // Create an account instance with AccountKeyWeightedMultiSig (use the WeightedMultiSigOptions)\r\n   * const options = new caver.account.weightedMultiSigOptions(1, [1, 1])\r\n   * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], options)\r\n   *\r\n   * // Create an account instance with AccountKeyRoleBased\r\n   * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1, 1] }, {}])\r\n   *\r\n   * // Create an account instance with AccountKeyRoleBased (use the WeightedMultiSigOptions)\r\n   * const options = [\r\n   *      {},\r\n   *      new caver.account.weightedMultiSigOptions(1, [1, 1]),\r\n   *      {}\r\n   * ]\r\n   * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], options)\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\r\n   * @param {object|Array.<object>|WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\r\n   * @return {Account}\r\n   */\n  static create(address, accountKey, options) {\n    if (_.isString(accountKey)) {\n      if (utils.isValidPublicKey(accountKey)) {\n        return Account.createWithAccountKeyPublic(address, accountKey);\n      }\n\n      return Account.createFromRLPEncoding(address, accountKey);\n    }\n\n    if (isMultipleKeysFormat(accountKey)) {\n      if (accountKey.length === 0) throw new Error(`Empty accountKey array.`);\n      return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n    }\n\n    if (isRoleBasedKeysFormat(accountKey)) {\n      return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n    }\n\n    throw new Error(`Unsupported accountKey type: ${typeof accountKey}`);\n  }\n  /**\r\n   * Creates an Account instance from RLP-encoded account key.\r\n   *\r\n   * @example\r\n   * caver.account.createFromRLPEncoding('0x{address in hex}', '0x04f84...')\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\r\n   * @return {Account}\r\n   */\n\n\n  static createFromRLPEncoding(address, rlpEncodedKey) {\n    const accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n    return new Account(address, accountKey);\n  }\n  /**\r\n   * Creates an Account instance which has AccountKeyLegacy as an accountKey.\r\n   *\r\n   * @example\r\n   * caver.account.createWithAccountKeyLegacy('0x{address in hex}')\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @return {Account}\r\n   */\n\n\n  static createWithAccountKeyLegacy(address) {\n    return new Account(address, new AccountKeyLegacy());\n  }\n  /**\r\n   * Creates an Account instance which has AccountKeyPublic as an accountKey.\r\n   *\r\n   * @example\r\n   * caver.account.createWithAccountKeyPublic('0x{address in hex}', '0xb5a9a...')\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @param {string} publicKey The public key string.\r\n   * @return {Account}\r\n   */\n\n\n  static createWithAccountKeyPublic(address, publicKey) {\n    return new Account(address, new AccountKeyPublic(publicKey));\n  }\n  /**\r\n   * Creates an Account instance which has AccountKeyFail as an accountKey.\r\n   *\r\n   * @example\r\n   * caver.account.createWithAccountKeyFail('0x{address in hex}')\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @return {Account}\r\n   */\n\n\n  static createWithAccountKeyFail(address) {\n    return new Account(address, new AccountKeyFail());\n  }\n  /**\r\n   * Creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey.\r\n   * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n   *\r\n   * @example\r\n   * // create an Account instance without options\r\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'])\r\n   *\r\n   * // create an Account instance with options\r\n   * const options = { threshold: 2, weight: [1,1] }\r\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n   *\r\n   * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n   * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n   * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @param {Array.<string>} publicKeyArray The array that includes multiple public key strings.\r\n   * @param {object|WeightedMultiSigOptions} [options] The object that includes threshold and weight array.\r\n   * @return {Account}\r\n   */\n\n\n  static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address: ${address}`);\n    if (!_.isArray(publicKeyArray)) throw new Error(`Invalid public key array: ${publicKeyArray}`);\n    return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n  }\n  /**\r\n   * Creates an Account instance which has AccountKeyRoleBased as an accountKey.\r\n   * If options are not defined, the default option is used for roles that use multiple public keys.\r\n   *\r\n   * @example\r\n   * // create an Account instance without options\r\n   * const publicKeys = [\r\n   *     ['0x034f1...', '0xfe4b8...'],\r\n   *     ['0xb5a9a...'],\r\n   *     ['0x034f1...', '0xb5a9a...']\r\n   * ]\r\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys)\r\n   *\r\n   * // create an Account instance with options\r\n   * const options = [\r\n   *     { threshold: 2, weight: [1, 1] },\r\n   *     {},\r\n   *     { threshold: 3, weight: [1, 2] }\r\n   * ]\r\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n   *\r\n   * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n   * const options = [\r\n   *     new caver.account.weightedMultiSigOptions(2, [1, 1]),\r\n   *     new caver.account.weightedMultiSigOptions(),\r\n   *     new caver.account.weightedMultiSigOptions(3, [1, 2])\r\n   * ]\r\n   * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n   *\r\n   * @param {string} address The address of Account.\r\n   * @param {Array.<Array.<string>>} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\r\n   * @param {Array.<object|WeightedMultiSigOptions>} [options] An array that contains objects with threshold and weight array defined for each role.\r\n   * @return {Account}\r\n   */\n\n\n  static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n    return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n  }\n  /**\r\n   * The account key types which are used in the `caver.account` package.\r\n   *\r\n   * @typedef {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} Account.AccountKey\r\n   */\n\n  /**\r\n   * Creates an account. It is recommended to use [caver.account.create]{@link Account#create} rather than using the constructor directly.\r\n   *\r\n   * @example\r\n   * const accountKey = new caver.account.accountKey.accountKeyLegacy()\r\n   * const account = new caver.account('0x{address in hex}', accountKey)\r\n   *\r\n   * @constructor\r\n   * @hideconstructor\r\n   * @param {string} address - The address of account.\r\n   * @param {Account.AccountKey} accountKey - The accountKey of account.\r\n   */\n\n\n  constructor(address, accountKey) {\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addressInput) {\n    if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`);\n    this._address = utils.addHexPrefix(addressInput);\n  }\n  /**\r\n   * @type {Account.AccountKey}\r\n   */\n\n\n  get accountKey() {\n    return this._accountKey;\n  }\n\n  set accountKey(accountKey) {\n    if (!isAccountKeyInstance(accountKey)) throw new Error(`Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`);\n    this._accountKey = accountKey;\n  }\n  /**\r\n   * returns RLP-encoded account key string.\r\n   *\r\n   * @example\r\n   * const encodedAccountKey = account.getRLPEncodingAccountKey()\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  getRLPEncodingAccountKey() {\n    return this._accountKey.getRLPEncoding();\n  }\n\n}\n/**\r\n * @example\r\n * caver.account.weightedMultiSigOptions\r\n *\r\n * @type {typeof WeightedMultiSigOptions}\r\n * */\n\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\n/**\r\n * A module that provides functions for accountKey.\r\n *\r\n * @typedef {object} AccountKeyModule\r\n * @property {function} decode - A function to decode the accountKey. Please refer to {@link AccountKeyDecoder.decode|caver.account.accountKey.decode}.\r\n * @property {typeof AccountKeyLegacy} accountKeyLegacy - Class representing accountKeyLegacy.\r\n * @property {typeof AccountKeyPublic} accountKeyPublic - Class representing AccountKeyPublic.\r\n * @property {typeof AccountKeyFail} accountKeyFail - Class representing AccountKeyFail.\r\n * @property {typeof AccountKeyWeightedMultiSig} accountKeyWeightedMultiSig - Class representing AccountKeyWeightedMultiSig.\r\n * @property {typeof AccountKeyRoleBased} accountKeyRoleBased - Class representing AccountKeyRoleBased.\r\n * @property {typeof WeightedPublicKey} weightedPublicKey - Class representing WeightedPublicKey.\r\n */\n\n/**\r\n * @example\r\n * caver.account.accountKey\r\n * caver.account.accountKey.decode('0x{encoded account key}')\r\n * caver.account.accountKey.accountKeyLegacy\r\n * caver.account.accountKey.accountKeyPublic\r\n * caver.account.accountKey.accountKeyFail\r\n * caver.account.accountKey.accountKeyWeightedMultiSig\r\n * caver.account.accountKey.accountKeyRoleBased\r\n * caver.account.accountKey.weightedPublicKey\r\n *\r\n * @type {AccountKeyModule}\r\n * */\n\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":{"version":3,"names":["_","require","utils","AccountKeyDecoder","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","WeightedMultiSigOptions","WeightedPublicKey","isMultipleKeysFormat","isRoleBasedKeysFormat","isAccountKeyInstance","accountKey","Account","create","address","options","isString","isValidPublicKey","createWithAccountKeyPublic","createFromRLPEncoding","length","Error","createWithAccountKeyWeightedMultiSig","createWithAccountKeyRoleBased","rlpEncodedKey","decode","createWithAccountKeyLegacy","publicKey","createWithAccountKeyFail","publicKeyArray","isAddress","isArray","fromPublicKeysAndOptions","roledBasedPublicKeyArray","fromRoleBasedPublicKeysAndOptions","constructor","_address","addressInput","addHexPrefix","_accountKey","getRLPEncodingAccountKey","getRLPEncoding","weightedMultiSigOptions","accountKeyLegacy","accountKeyPublic","accountKeyFail","accountKeyWeightedMultiSig","accountKeyRoleBased","weightedPublicKey","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/index.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../caver-utils')\r\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder')\r\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy')\r\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic')\r\nconst AccountKeyFail = require('./accountKey/accountKeyFail')\r\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig')\r\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased')\r\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions')\r\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey')\r\nconst { isMultipleKeysFormat, isRoleBasedKeysFormat } = require('../../caver-wallet/src/keyring/keyringHelper')\r\n\r\nfunction isAccountKeyInstance(accountKey) {\r\n    if (\r\n        !(accountKey instanceof AccountKeyLegacy) &&\r\n        !(accountKey instanceof AccountKeyPublic) &&\r\n        !(accountKey instanceof AccountKeyFail) &&\r\n        !(accountKey instanceof AccountKeyWeightedMultiSig) &&\r\n        !(accountKey instanceof AccountKeyRoleBased)\r\n    )\r\n        return false\r\n\r\n    return true\r\n}\r\n/**\r\n * Representing an Account which includes information for account update.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass Account {\r\n    /**\r\n     * Creates an Account instance with an address and an accountKey.\r\n     *\r\n     * If `accountKey` is a public key string, an `Account` instance with `AccountKeyPublic` as accountKey is created.\r\n     *\r\n     * If `accountKey` is an array containing public key strings, an `Account` instance with `AccountKeyWeightedMultiSig` as accountKey is created.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * If `accountKey` is an array containing accountKeys that are used for each role, an `Account` instance with `AccountKeyRoleBased` is created.\r\n     * Options must be defined for each role with WeightedMultiSigOptions (or object).\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // Create an account instance with AccountKeyPublic\r\n     * caver.account.create('0x{address in hex}', '0x{public key}')\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1, 1] })\r\n     *\r\n     * // Create an account instance with AccountKeyWeightedMultiSig (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(1, [1, 1])\r\n     * caver.account.create('0x{address in hex}', ['0x{public key}', '0x{public key}'], options)\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1, 1] }, {}])\r\n     *\r\n     * // Create an account instance with AccountKeyRoleBased (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *      {},\r\n     *      new caver.account.weightedMultiSigOptions(1, [1, 1]),\r\n     *      {}\r\n     * ]\r\n     * caver.account.create('0x{address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\r\n     * @param {object|Array.<object>|WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\r\n     * @return {Account}\r\n     */\r\n    static create(address, accountKey, options) {\r\n        if (_.isString(accountKey)) {\r\n            if (utils.isValidPublicKey(accountKey)) {\r\n                return Account.createWithAccountKeyPublic(address, accountKey)\r\n            }\r\n            return Account.createFromRLPEncoding(address, accountKey)\r\n        }\r\n\r\n        if (isMultipleKeysFormat(accountKey)) {\r\n            if (accountKey.length === 0) throw new Error(`Empty accountKey array.`)\r\n            return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options)\r\n        }\r\n        if (isRoleBasedKeysFormat(accountKey)) {\r\n            return Account.createWithAccountKeyRoleBased(address, accountKey, options)\r\n        }\r\n\r\n        throw new Error(`Unsupported accountKey type: ${typeof accountKey}`)\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance from RLP-encoded account key.\r\n     *\r\n     * @example\r\n     * caver.account.createFromRLPEncoding('0x{address in hex}', '0x04f84...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\r\n     * @return {Account}\r\n     */\r\n    static createFromRLPEncoding(address, rlpEncodedKey) {\r\n        const accountKey = AccountKeyDecoder.decode(rlpEncodedKey)\r\n        return new Account(address, accountKey)\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyLegacy as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyLegacy('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyLegacy(address) {\r\n        return new Account(address, new AccountKeyLegacy())\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyPublic as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyPublic('0x{address in hex}', '0xb5a9a...')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {string} publicKey The public key string.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyPublic(address, publicKey) {\r\n        return new Account(address, new AccountKeyPublic(publicKey))\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyFail as an accountKey.\r\n     *\r\n     * @example\r\n     * caver.account.createWithAccountKeyFail('0x{address in hex}')\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyFail(address) {\r\n        return new Account(address, new AccountKeyFail())\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey.\r\n     * If options are not defined as the last parameter, it is created using a default option with a threshold of 1 and a weight of 1 for each key.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'])\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = { threshold: 2, weight: [1,1] }\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = new caver.account.weightedMultiSigOptions(2, [1, 1])\r\n     * caver.account.createWithAccountKeyWeightedMultiSig('0x{address in hex}', ['0xb5a9a...', '0xfe4b8...'], options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<string>} publicKeyArray The array that includes multiple public key strings.\r\n     * @param {object|WeightedMultiSigOptions} [options] The object that includes threshold and weight array.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\r\n        if (!utils.isAddress(address)) throw new Error(`Invalid address: ${address}`)\r\n        if (!_.isArray(publicKeyArray)) throw new Error(`Invalid public key array: ${publicKeyArray}`)\r\n        return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options))\r\n    }\r\n\r\n    /**\r\n     * Creates an Account instance which has AccountKeyRoleBased as an accountKey.\r\n     * If options are not defined, the default option is used for roles that use multiple public keys.\r\n     *\r\n     * @example\r\n     * // create an Account instance without options\r\n     * const publicKeys = [\r\n     *     ['0x034f1...', '0xfe4b8...'],\r\n     *     ['0xb5a9a...'],\r\n     *     ['0x034f1...', '0xb5a9a...']\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys)\r\n     *\r\n     * // create an Account instance with options\r\n     * const options = [\r\n     *     { threshold: 2, weight: [1, 1] },\r\n     *     {},\r\n     *     { threshold: 3, weight: [1, 2] }\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * // create an Account instance with options (use the WeightedMultiSigOptions)\r\n     * const options = [\r\n     *     new caver.account.weightedMultiSigOptions(2, [1, 1]),\r\n     *     new caver.account.weightedMultiSigOptions(),\r\n     *     new caver.account.weightedMultiSigOptions(3, [1, 2])\r\n     * ]\r\n     * caver.account.createWithAccountKeyRoleBased('0x{address in hex}', publicKeys, options)\r\n     *\r\n     * @param {string} address The address of Account.\r\n     * @param {Array.<Array.<string>>} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\r\n     * @param {Array.<object|WeightedMultiSigOptions>} [options] An array that contains objects with threshold and weight array defined for each role.\r\n     * @return {Account}\r\n     */\r\n    static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\r\n        return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options))\r\n    }\r\n\r\n    /**\r\n     * The account key types which are used in the `caver.account` package.\r\n     *\r\n     * @typedef {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} Account.AccountKey\r\n     */\r\n    /**\r\n     * Creates an account. It is recommended to use [caver.account.create]{@link Account#create} rather than using the constructor directly.\r\n     *\r\n     * @example\r\n     * const accountKey = new caver.account.accountKey.accountKeyLegacy()\r\n     * const account = new caver.account('0x{address in hex}', accountKey)\r\n     *\r\n     * @constructor\r\n     * @hideconstructor\r\n     * @param {string} address - The address of account.\r\n     * @param {Account.AccountKey} accountKey - The accountKey of account.\r\n     */\r\n    constructor(address, accountKey) {\r\n        this.address = address\r\n        this.accountKey = accountKey\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get address() {\r\n        return this._address\r\n    }\r\n\r\n    set address(addressInput) {\r\n        if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\r\n\r\n        this._address = utils.addHexPrefix(addressInput)\r\n    }\r\n\r\n    /**\r\n     * @type {Account.AccountKey}\r\n     */\r\n    get accountKey() {\r\n        return this._accountKey\r\n    }\r\n\r\n    set accountKey(accountKey) {\r\n        if (!isAccountKeyInstance(accountKey))\r\n            throw new Error(\r\n                `Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`\r\n            )\r\n\r\n        this._accountKey = accountKey\r\n    }\r\n\r\n    /**\r\n     * returns RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const encodedAccountKey = account.getRLPEncodingAccountKey()\r\n     *\r\n     * @return {string}\r\n     */\r\n    getRLPEncodingAccountKey() {\r\n        return this._accountKey.getRLPEncoding()\r\n    }\r\n}\r\n\r\n/**\r\n * @example\r\n * caver.account.weightedMultiSigOptions\r\n *\r\n * @type {typeof WeightedMultiSigOptions}\r\n * */\r\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions\r\n\r\n/**\r\n * A module that provides functions for accountKey.\r\n *\r\n * @typedef {object} AccountKeyModule\r\n * @property {function} decode - A function to decode the accountKey. Please refer to {@link AccountKeyDecoder.decode|caver.account.accountKey.decode}.\r\n * @property {typeof AccountKeyLegacy} accountKeyLegacy - Class representing accountKeyLegacy.\r\n * @property {typeof AccountKeyPublic} accountKeyPublic - Class representing AccountKeyPublic.\r\n * @property {typeof AccountKeyFail} accountKeyFail - Class representing AccountKeyFail.\r\n * @property {typeof AccountKeyWeightedMultiSig} accountKeyWeightedMultiSig - Class representing AccountKeyWeightedMultiSig.\r\n * @property {typeof AccountKeyRoleBased} accountKeyRoleBased - Class representing AccountKeyRoleBased.\r\n * @property {typeof WeightedPublicKey} weightedPublicKey - Class representing WeightedPublicKey.\r\n */\r\n/**\r\n * @example\r\n * caver.account.accountKey\r\n * caver.account.accountKey.decode('0x{encoded account key}')\r\n * caver.account.accountKey.accountKeyLegacy\r\n * caver.account.accountKey.accountKeyPublic\r\n * caver.account.accountKey.accountKeyFail\r\n * caver.account.accountKey.accountKeyWeightedMultiSig\r\n * caver.account.accountKey.accountKeyRoleBased\r\n * caver.account.accountKey.weightedPublicKey\r\n *\r\n * @type {AccountKeyModule}\r\n * */\r\nAccount.accountKey = {\r\n    decode: AccountKeyDecoder.decode,\r\n    accountKeyLegacy: AccountKeyLegacy,\r\n    accountKeyPublic: AccountKeyPublic,\r\n    accountKeyFail: AccountKeyFail,\r\n    accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\r\n    accountKeyRoleBased: AccountKeyRoleBased,\r\n    weightedPublicKey: WeightedPublicKey,\r\n}\r\n\r\nmodule.exports = Account\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}