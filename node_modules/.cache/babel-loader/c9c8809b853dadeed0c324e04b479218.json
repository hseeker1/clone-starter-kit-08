{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar utils = require('../../../caver-utils');\n/**\r\n * Representing a WeightedPublicKey.\r\n * This class is used to represent each public key with weight in {@link AccountKeyWeightedMultiSig}.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar WeightedPublicKey = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * Create an instance of WeightedPublicKey.\r\n   * @param {number} weight - The weight of the key.\r\n   * @param {string} publicKey - The public key string.\r\n   */\n  function WeightedPublicKey(weight, publicKey) {\n    _classCallCheck(this, WeightedPublicKey);\n\n    this.weight = weight;\n    this.publicKey = publicKey;\n  }\n  /**\r\n   * @type {number}\r\n   */\n\n\n  _createClass(WeightedPublicKey, [{\n    key: \"weight\",\n    get: function get() {\n      return this._weight;\n    },\n    set: function set(w) {\n      this._weight = utils.hexToNumber(w);\n    }\n    /**\r\n     * @type {string}\r\n     */\n\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n    /**\r\n     * Returns an encoded weighted public key string.\r\n     *\r\n     * @example\r\n     * const bytes = weightedPublicKey.encodeToBytes()\r\n     *\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"encodeToBytes\",\n    value: function encodeToBytes() {\n      if (this.weight === undefined) throw new Error('weight should be specified for a multisig account');\n      if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey];\n    }\n  }]);\n\n  return WeightedPublicKey;\n}();\n\nmodule.exports = WeightedPublicKey;","map":{"version":3,"names":["Bytes","require","utils","WeightedPublicKey","weight","publicKey","_weight","w","hexToNumber","_publicKey","p","isValidPublicKey","Error","addHexPrefix","undefined","compressedPublicKey","compressPublicKey","fromNat","numberToHex","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/weightedPublicKey.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst utils = require('../../../caver-utils')\r\n\r\n/**\r\n * Representing a WeightedPublicKey.\r\n * This class is used to represent each public key with weight in {@link AccountKeyWeightedMultiSig}.\r\n *\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass WeightedPublicKey {\r\n    /**\r\n     * Create an instance of WeightedPublicKey.\r\n     * @param {number} weight - The weight of the key.\r\n     * @param {string} publicKey - The public key string.\r\n     */\r\n    constructor(weight, publicKey) {\r\n        this.weight = weight\r\n        this.publicKey = publicKey\r\n    }\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    get weight() {\r\n        return this._weight\r\n    }\r\n\r\n    set weight(w) {\r\n        this._weight = utils.hexToNumber(w)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get publicKey() {\r\n        return this._publicKey\r\n    }\r\n\r\n    set publicKey(p) {\r\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\r\n        this._publicKey = utils.addHexPrefix(p)\r\n    }\r\n\r\n    /**\r\n     * Returns an encoded weighted public key string.\r\n     *\r\n     * @example\r\n     * const bytes = weightedPublicKey.encodeToBytes()\r\n     *\r\n     * @return {string}\r\n     */\r\n    encodeToBytes() {\r\n        if (this.weight === undefined) throw new Error('weight should be specified for a multisig account')\r\n        if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\r\n\r\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\r\n        return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey]\r\n    }\r\n}\r\n\r\nmodule.exports = WeightedPublicKey\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACME,iB;;;EACF;AACJ;AACA;AACA;AACA;EACI,2BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;IAAA;;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACH;EAED;AACJ;AACA;;;;;SACI,eAAa;MACT,OAAO,KAAKC,OAAZ;IACH,C;SAED,aAAWC,CAAX,EAAc;MACV,KAAKD,OAAL,GAAeJ,KAAK,CAACM,WAAN,CAAkBD,CAAlB,CAAf;IACH;IAED;AACJ;AACA;;;;SACI,eAAgB;MACZ,OAAO,KAAKE,UAAZ;IACH,C;SAED,aAAcC,CAAd,EAAiB;MACb,IAAI,CAACR,KAAK,CAACS,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIE,KAAJ,+BAAiCF,CAAjC,EAAN;MAChC,KAAKD,UAAL,GAAkBP,KAAK,CAACW,YAAN,CAAmBH,CAAnB,CAAlB;IACH;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,yBAAgB;MACZ,IAAI,KAAKN,MAAL,KAAgBU,SAApB,EAA+B,MAAM,IAAIF,KAAJ,CAAU,mDAAV,CAAN;MAC/B,IAAI,KAAKP,SAAL,KAAmBS,SAAvB,EAAkC,MAAM,IAAIF,KAAJ,CAAU,sDAAV,CAAN;MAElC,IAAMG,mBAAmB,GAAGb,KAAK,CAACc,iBAAN,CAAwB,KAAKX,SAA7B,CAA5B;MACA,OAAO,CAACL,KAAK,CAACiB,OAAN,CAAcf,KAAK,CAACgB,WAAN,CAAkB,KAAKd,MAAvB,CAAd,CAAD,EAAgDW,mBAAhD,CAAP;IACH;;;;;;AAGLI,MAAM,CAACC,OAAP,GAAiBjB,iBAAjB"},"metadata":{},"sourceType":"script"}