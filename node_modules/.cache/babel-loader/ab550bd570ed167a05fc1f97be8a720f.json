{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar CID = require('cids');\n\nvar multihashing = require('multihashing-async');\n\nvar multicodec = require('multicodec'); // binary resolver\n\n\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\r\n     * Resolves a path within a Raw block.\r\n     *\r\n     * Always returns the raw data as value without any remainderPath.\r\n     *\r\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\r\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\r\n     * @returns {Object} result - Result of the path it it was resolved successfully\r\n     * @returns {*} result.value - The raw data\r\n     * @returns {string} result.remainderPath - An empty string\r\n     */\n    resolve: function resolve(binaryBlob, path) {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved');\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n\n    /**\r\n     * Return all available paths of a block.\r\n     *\r\n     * @generator\r\n     * @param {Buffer} binaryBlob - The raw data\r\n     * @returns {Object} - Finished generator with `done: true`\r\n     */\n    tree: function tree(binaryBlob) {\n      return {\n        done: true\n      };\n    }\n  },\n  util: {\n    deserialize: function deserialize(data) {\n      return data;\n    },\n    serialize: function serialize(data) {\n      return data;\n    },\n\n    /**\r\n     * Calculate the CID of the binary blob.\r\n     *\r\n     * @param {Object} binaryBlob - Encoded IPLD Node\r\n     * @param {Object} [userOptions] - Options to create the CID\r\n     * @param {number} [userOptions.cidVersion=1] - CID version number\r\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n     * @returns {Promise.<CID>}\r\n     */\n    cid: function () {\n      var _cid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(binaryBlob, userOptions) {\n        var defaultOptions, options, multihash, codecName, cid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                defaultOptions = {\n                  cidVersion: 1,\n                  hashAlg: module.exports.defaultHashAlg\n                };\n                options = Object.assign(defaultOptions, userOptions);\n                _context.next = 4;\n                return multihashing(binaryBlob, options.hashAlg);\n\n              case 4:\n                multihash = _context.sent;\n                codecName = multicodec.print[module.exports.codec];\n                cid = new CID(options.cidVersion, codecName, multihash);\n                return _context.abrupt(\"return\", cid);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function cid(_x, _x2) {\n        return _cid.apply(this, arguments);\n      }\n\n      return cid;\n    }()\n  }\n};","map":{"version":3,"names":["CID","require","multihashing","multicodec","module","exports","codec","RAW","defaultHashAlg","SHA2_256","resolver","resolve","binaryBlob","path","Error","value","remainderPath","tree","done","util","deserialize","data","serialize","cid","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/ipld-raw/src/index.js"],"sourcesContent":["'use strict'\r\nconst CID = require('cids')\r\nconst multihashing = require('multihashing-async')\r\nconst multicodec = require('multicodec')\r\n\r\n// binary resolver\r\nmodule.exports = {\r\n  codec: multicodec.RAW,\r\n  defaultHashAlg: multicodec.SHA2_256,\r\n  resolver: {\r\n    /**\r\n     * Resolves a path within a Raw block.\r\n     *\r\n     * Always returns the raw data as value without any remainderPath.\r\n     *\r\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\r\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\r\n     * @returns {Object} result - Result of the path it it was resolved successfully\r\n     * @returns {*} result.value - The raw data\r\n     * @returns {string} result.remainderPath - An empty string\r\n     */\r\n    resolve: (binaryBlob, path) => {\r\n      if (path !== '/') {\r\n        throw new Error('Only the root path / may be resolved')\r\n      }\r\n\r\n      return {\r\n        value: binaryBlob,\r\n        remainderPath: ''\r\n      }\r\n    },\r\n    /**\r\n     * Return all available paths of a block.\r\n     *\r\n     * @generator\r\n     * @param {Buffer} binaryBlob - The raw data\r\n     * @returns {Object} - Finished generator with `done: true`\r\n     */\r\n    tree: (binaryBlob) => {\r\n      return {\r\n        done: true\r\n      }\r\n    }\r\n  },\r\n  util: {\r\n    deserialize: (data) => {\r\n      return data\r\n    },\r\n    serialize: (data) => {\r\n      return data\r\n    },\r\n    /**\r\n     * Calculate the CID of the binary blob.\r\n     *\r\n     * @param {Object} binaryBlob - Encoded IPLD Node\r\n     * @param {Object} [userOptions] - Options to create the CID\r\n     * @param {number} [userOptions.cidVersion=1] - CID version number\r\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n     * @returns {Promise.<CID>}\r\n     */\r\n    cid: async (binaryBlob, userOptions) => {\r\n      const defaultOptions = { cidVersion: 1, hashAlg: module.exports.defaultHashAlg }\r\n      const options = Object.assign(defaultOptions, userOptions)\r\n\r\n      const multihash = await multihashing(binaryBlob, options.hashAlg)\r\n      const codecName = multicodec.print[module.exports.codec]\r\n      const cid = new CID(options.cidVersion, codecName, multihash)\r\n\r\n      return cid\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA;;;;+CACA,oJ;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;EACfC,KAAK,EAAEH,UAAU,CAACI,GADH;EAEfC,cAAc,EAAEL,UAAU,CAACM,QAFZ;EAGfC,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAE,iBAACC,UAAD,EAAaC,IAAb,EAAsB;MAC7B,IAAIA,IAAI,KAAK,GAAb,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;MACD;;MAED,OAAO;QACLC,KAAK,EAAEH,UADF;QAELI,aAAa,EAAE;MAFV,CAAP;IAID,CArBO;;IAsBR;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,IAAI,EAAE,cAACL,UAAD,EAAgB;MACpB,OAAO;QACLM,IAAI,EAAE;MADD,CAAP;IAGD;EAjCO,CAHK;EAsCfC,IAAI,EAAE;IACJC,WAAW,EAAE,qBAACC,IAAD,EAAU;MACrB,OAAOA,IAAP;IACD,CAHG;IAIJC,SAAS,EAAE,mBAACD,IAAD,EAAU;MACnB,OAAOA,IAAP;IACD,CANG;;IAOJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIE,GAAG;MAAA,sEAAE,iBAAOX,UAAP,EAAmBY,WAAnB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACGC,cADH,GACoB;kBAAEC,UAAU,EAAE,CAAd;kBAAiBC,OAAO,EAAEvB,MAAM,CAACC,OAAP,CAAeG;gBAAzC,CADpB;gBAEGoB,OAFH,GAEaC,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BD,WAA9B,CAFb;gBAAA;gBAAA,OAIqBtB,YAAY,CAACU,UAAD,EAAagB,OAAO,CAACD,OAArB,CAJjC;;cAAA;gBAIGI,SAJH;gBAKGC,SALH,GAKe7B,UAAU,CAAC8B,KAAX,CAAiB7B,MAAM,CAACC,OAAP,CAAeC,KAAhC,CALf;gBAMGiB,GANH,GAMS,IAAIvB,GAAJ,CAAQ4B,OAAO,CAACF,UAAhB,EAA4BM,SAA5B,EAAuCD,SAAvC,CANT;gBAAA,iCAQIR,GARJ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAhBC;AAtCS,CAAjB"},"metadata":{},"sourceType":"script"}