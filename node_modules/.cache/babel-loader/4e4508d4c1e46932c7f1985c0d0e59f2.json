{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\User\\\\Documents\\\\clone-starter-kit-08\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n\nvar AccountKeyLegacy = require('./accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKeyFail');\n\nvar AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nvar AccountKeyRoleBased = require('./accountKeyRoleBased');\n/**\r\n * Representing an AccountKeyDecoder which can decode RLP-encoded accountKey string.\r\n * @class\r\n * @hideconstructor\r\n */\n\n\nvar AccountKeyDecoder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyDecoder() {\n    _classCallCheck(this, AccountKeyDecoder);\n  }\n\n  _createClass(AccountKeyDecoder, null, [{\n    key: \"decode\",\n    value:\n    /**\r\n     * decodes an RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey An RLP-encoded account key string.\r\n     * @return {IAccountKey}\r\n     */\n    function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n        return AccountKeyLegacy.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n        return AccountKeyPublic.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n        return AccountKeyFail.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n        return AccountKeyWeightedMultiSig.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) {\n        return AccountKeyRoleBased.decode(rlpEncodedKey);\n      }\n\n      throw new Error(\"Invalid RLP-encoded account key string: \".concat(rlpEncodedKey));\n    }\n  }]);\n\n  return AccountKeyDecoder;\n}();\n\nmodule.exports = AccountKeyDecoder;","map":{"version":3,"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","AccountKeyDecoder","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_LEGACY_TAG","decode","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","Error","module","exports"],"sources":["C:/Users/User/Documents/clone-starter-kit-08/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyDecoder.js"],"sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst utils = require('../../../caver-utils')\r\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\r\nconst AccountKeyLegacy = require('./accountKeyLegacy')\r\nconst AccountKeyPublic = require('./accountKeyPublic')\r\nconst AccountKeyFail = require('./accountKeyFail')\r\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig')\r\nconst AccountKeyRoleBased = require('./accountKeyRoleBased')\r\n\r\n/**\r\n * Representing an AccountKeyDecoder which can decode RLP-encoded accountKey string.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass AccountKeyDecoder {\r\n    /**\r\n     * decodes an RLP-encoded account key string.\r\n     *\r\n     * @example\r\n     * const accountKey = caver.account.accountKey.decode('0x{encoded account key}')\r\n     *\r\n     * @param {string} rlpEncodedKey An RLP-encoded account key string.\r\n     * @return {IAccountKey}\r\n     */\r\n    static decode(rlpEncodedKey) {\r\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\r\n\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\r\n            return AccountKeyLegacy.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\r\n            return AccountKeyPublic.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\r\n            return AccountKeyFail.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\r\n            return AccountKeyWeightedMultiSig.decode(rlpEncodedKey)\r\n        }\r\n        if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) {\r\n            return AccountKeyRoleBased.decode(rlpEncodedKey)\r\n        }\r\n\r\n        throw new Error(`Invalid RLP-encoded account key string: ${rlpEncodedKey}`)\r\n    }\r\n}\r\n\r\nmodule.exports = AccountKeyDecoder\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,eAA4BA,OAAO,CAAC,oBAAD,CAAnC;AAAA,IAAQC,eAAR,YAAQA,eAAR;;AACA,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;;AACA,IAAMI,cAAc,GAAGJ,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAMK,0BAA0B,GAAGL,OAAO,CAAC,8BAAD,CAA1C;;AACA,IAAMM,mBAAmB,GAAGN,OAAO,CAAC,uBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;IACMO,iB;;;;;;;;;;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,gBAAcC,aAAd,EAA6B;MACzBA,aAAa,GAAGT,KAAK,CAACU,YAAN,CAAmBD,aAAnB,CAAhB;;MAEA,IAAIA,aAAa,CAACE,UAAd,CAAyBT,eAAe,CAACU,sBAAzC,CAAJ,EAAsE;QAClE,OAAOT,gBAAgB,CAACU,MAAjB,CAAwBJ,aAAxB,CAAP;MACH;;MACD,IAAIA,aAAa,CAACE,UAAd,CAAyBT,eAAe,CAACY,sBAAzC,CAAJ,EAAsE;QAClE,OAAOV,gBAAgB,CAACS,MAAjB,CAAwBJ,aAAxB,CAAP;MACH;;MACD,IAAIA,aAAa,CAACE,UAAd,CAAyBT,eAAe,CAACa,oBAAzC,CAAJ,EAAoE;QAChE,OAAOV,cAAc,CAACQ,MAAf,CAAsBJ,aAAtB,CAAP;MACH;;MACD,IAAIA,aAAa,CAACE,UAAd,CAAyBT,eAAe,CAACc,iCAAzC,CAAJ,EAAiF;QAC7E,OAAOV,0BAA0B,CAACO,MAA3B,CAAkCJ,aAAlC,CAAP;MACH;;MACD,IAAIA,aAAa,CAACE,UAAd,CAAyBT,eAAe,CAACe,0BAAzC,CAAJ,EAA0E;QACtE,OAAOV,mBAAmB,CAACM,MAApB,CAA2BJ,aAA3B,CAAP;MACH;;MAED,MAAM,IAAIS,KAAJ,mDAAqDT,aAArD,EAAN;IACH;;;;;;AAGLU,MAAM,CAACC,OAAP,GAAiBZ,iBAAjB"},"metadata":{},"sourceType":"script"}